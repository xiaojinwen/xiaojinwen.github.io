{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/theme-snippet/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/theme-snippet/source/assets/highlight.pack.js","path":"assets/highlight.pack.js","modified":1,"renderable":1},{"_id":"themes/theme-snippet/source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/theme-snippet/source/img/head-img.jpg","path":"img/head-img.jpg","modified":1,"renderable":1},{"_id":"themes/theme-snippet/source/img/timeline.gif","path":"img/timeline.gif","modified":1,"renderable":1},{"_id":"themes/theme-snippet/source/img/timeline-dot.gif","path":"img/timeline-dot.gif","modified":1,"renderable":1},{"_id":"themes/theme-snippet/source/img/avatar1.jpg","path":"img/avatar1.jpg","modified":1,"renderable":1},{"_id":"themes/theme-snippet/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/theme-snippet/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/theme-snippet/source/img/branding.png","path":"img/branding.png","modified":1,"renderable":1},{"_id":"themes/theme-snippet/source/assets/valine.min.js","path":"assets/valine.min.js","modified":1,"renderable":1},{"_id":"themes/theme-snippet/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/theme-snippet/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/theme-snippet/source/img/timeline-clock.gif","path":"img/timeline-clock.gif","modified":1,"renderable":1},{"_id":"themes/theme-snippet/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":1,"renderable":1},{"_id":"themes/theme-snippet/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"themes/theme-snippet/source/js/app.js","path":"js/app.js","modified":1,"renderable":1},{"_id":"themes/theme-snippet/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/theme-snippet/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/theme-snippet/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/theme-snippet/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/theme-snippet/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/theme-snippet/.gitignore","hash":"5636464498c54867468ad1459c76b960af9c275c","modified":1535611295608},{"_id":"themes/theme-snippet/LICENSE","hash":"c976aafe3bc44246a978850b18102966afe3eeb5","modified":1535611295611},{"_id":"themes/theme-snippet/_config.yml","hash":"e02c0f4f4fbcf3b3803fe98688101664b1c74de4","modified":1535701613719},{"_id":"themes/theme-snippet/_travis.sh","hash":"030b5b59dc485b5fa7d155a1da30d9c5c4868f6b","modified":1535611295616},{"_id":"themes/theme-snippet/.travis.yml","hash":"c1fab2846fb56e0c444faffecbcd46bf746e9f91","modified":1535611295610},{"_id":"themes/theme-snippet/gulpfile.js","hash":"41ab8395f1aea0af1467c58ecda05ae04145dfd3","modified":1535611295617},{"_id":"source/_posts/es6学习.md","hash":"9dd680f573502cbcbf9b030f61875638cd7fa1b0","modified":1543203951137},{"_id":"source/_posts/git的问题解决方法.md","hash":"eb5d3d3a7c861b96d4a35b4c29d3bd6eefc2b04a","modified":1543197117634},{"_id":"source/_posts/hexo 常用命令.md","hash":"20ab92dfa4103b0c582578db66531db43944964d","modified":1535693455470},{"_id":"source/_posts/iOS上输入框光标错位问题.md","hash":"87b311af9e34010962f30555bc796d28a8ac5535","modified":1546998977236},{"_id":"source/_posts/vue-element-控制字段排序与显示小组件.md","hash":"32650fcbb629250dc85e491bf1af0b3b7af748cc","modified":1546999241595},{"_id":"source/_posts/phpMyAdmin无法登陆解决.md","hash":"0faf0b654e561aa9263c83139d358fe58823a5b4","modified":1535692113735},{"_id":"source/_posts/七牛云上传文件demo.md","hash":"61641ce022e899d2dc47ce6b2c821f8bb6368f93","modified":1539310954374},{"_id":"source/_posts/使用canvas画环形进度条.md","hash":"9fbd3c0fd35ca2f658eb82a8b71b8560801d6b41","modified":1546999188789},{"_id":"source/_posts/关于vue中修改UI库样式的坑.md","hash":"82c010604dc4a1052333470bb1ed160662ae523e","modified":1537330518889},{"_id":"source/_posts/关于列表水平展示的方法.md","hash":"b25b0f175219e2a4311b5c9cf7f3e7f1f34ad775","modified":1537432136849},{"_id":"source/_posts/删除服务器乱码文件.md","hash":"df6ed9224feded5f945aa2ab0fc82d4ac251d75a","modified":1535622222000},{"_id":"source/_posts/动态路由-路由访问权限.md","hash":"f34ecfa5d8010974d4d94f1005c4870487e066c4","modified":1535622222000},{"_id":"source/_posts/去掉vue的url中难看的井号并解决相关问题.md","hash":"c3e80dbdd2b7517cfe967f17dfbb496680da6288","modified":1537347742756},{"_id":"source/_posts/将数组对象筛选处理合并成一个对象.md","hash":"ce50d5ad32a92055aff65b1728d3f866c04ab807","modified":1540367841883},{"_id":"source/_posts/数组与字符串的那些相似方法.md","hash":"f6151ca8a7b1637b2d698ccc9cd64018ce08a5ea","modified":1536056048623},{"_id":"source/_posts/文件管理php.md","hash":"24ebe21cdea6b1547631e2b227c80af9a2533842","modified":1535622222000},{"_id":"source/_posts/淘宝主图换图技术.md","hash":"e648cf545a21273094cc407cb58c5206bd61568f","modified":1546999074041},{"_id":"source/_posts/自定义百度云分享密码.md","hash":"8ecd7ae482bdac02200f376d6f5b026094a4ca1a","modified":1546998995118},{"_id":"source/_posts/解决vue不能使用锚标记时的方法.md","hash":"5b8d2b9fdc13d3b4eae7e10b520f9e624cd468c4","modified":1540350285345},{"_id":"themes/theme-snippet/README.md","hash":"51933ece3e2515ba5a80d18726a3bc8dd224b7d2","modified":1535611295612},{"_id":"themes/theme-snippet/languages/default.yml","hash":"eb5575ae1f5c51abd8f0b43e491566eb7576c976","modified":1535611295619},{"_id":"themes/theme-snippet/languages/ja.yml","hash":"7c167ac36b5617d650eaf3c75800a46066b6cd96","modified":1535611295621},{"_id":"themes/theme-snippet/languages/zh-TW.yml","hash":"ae1b9580bf11458305f9534d7b58c6f5bcce55c7","modified":1535611295623},{"_id":"themes/theme-snippet/package.json","hash":"5d914ea40bae7de59fd8c4b04f1f72b328bfd01b","modified":1535611295693},{"_id":"themes/theme-snippet/layout/category.ejs","hash":"91d904f43ae2ad5ec2b05bf1e2473657a8315b5c","modified":1535611295684},{"_id":"themes/theme-snippet/languages/zh-CN.yml","hash":"25c10529aabb0cf5925d0e84c2e2a15eb561be06","modified":1535611295622},{"_id":"themes/theme-snippet/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1535611295689},{"_id":"themes/theme-snippet/layout/archive.ejs","hash":"71d95943fe978f6f85922800e801cfdd3d06b958","modified":1535611295683},{"_id":"themes/theme-snippet/scripts/helper.js","hash":"5502d8b4937be2463cd76ca82dcb8bd23c0090f6","modified":1535611295695},{"_id":"themes/theme-snippet/layout/tag.ejs","hash":"e7062d08cfff13dfe8b8c8915a2eb0fafb0ae567","modified":1535611295693},{"_id":"themes/theme-snippet/scripts/process.js","hash":"3b3ca8da64cacd9070ea8d888872348f301be2ac","modified":1535611295697},{"_id":"themes/theme-snippet/layout/layout.ejs","hash":"0a1a1cd49cb9cf53e2d870c23cdc8488921f78f9","modified":1535611295687},{"_id":"themes/theme-snippet/layout/index.ejs","hash":"86ac2e3239f2b51db5524df28161d9056fdb31d7","modified":1535611295686},{"_id":"themes/theme-snippet/layout/post.ejs","hash":"fcc8e3cb343c9003b7790faf4c72500889cb8e1f","modified":1535611295690},{"_id":"themes/theme-snippet/source/favicon.ico","hash":"65f26147ea3433ffd64d3f18bf281af48dc5d06e","modified":1535611295718},{"_id":"themes/theme-snippet/layout/_partial/article.ejs","hash":"5f7c7bdfbc09acf5ae86293a9cf6018c812a3250","modified":1535611295636},{"_id":"themes/theme-snippet/layout/_partial/footer.ejs","hash":"4985f82693b922e03382af244f4699d5703242a6","modified":1535942731463},{"_id":"themes/theme-snippet/layout/_partial/gallery.ejs","hash":"aecfcee48528c5e8cbf7d23765e030a3fbdd1baf","modified":1535611295640},{"_id":"themes/theme-snippet/layout/_partial/archive.ejs","hash":"f84e9ef94d8ec61b0788c1f489df93d211833ea7","modified":1535611295633},{"_id":"themes/theme-snippet/layout/_partial/article-meta.ejs","hash":"943bc4b4086144cbf528d97e58d701dfec73c16a","modified":1535611295634},{"_id":"themes/theme-snippet/layout/_partial/pagination.ejs","hash":"20eff43ad205febe8fc675d669b2be0b88c7158e","modified":1535611295645},{"_id":"themes/theme-snippet/layout/_partial/copyright.ejs","hash":"7058c5d7034348bd5e9d34672493295b5b2edf61","modified":1536056370958},{"_id":"themes/theme-snippet/layout/_partial/script.ejs","hash":"15b6a50c715fde41ed9ca6fb9c5fd5290619c5b2","modified":1535611295647},{"_id":"themes/theme-snippet/layout/_partial/toc.ejs","hash":"57a144a4680936731c853a5d79c893584fc6a8f0","modified":1535611295650},{"_id":"themes/theme-snippet/layout/_partial/head.ejs","hash":"57e37e6560bb201b0e2afaa4b8efd20bebb7f26e","modified":1535611295641},{"_id":"themes/theme-snippet/layout/_partial/header.ejs","hash":"25625d64245a6e378da030ce77ddf6a53213225b","modified":1535611295643},{"_id":"themes/theme-snippet/layout/_partial/sidebar.ejs","hash":"7a4dd0aa5a5acf3a56734385152c28591c45602e","modified":1535611295648},{"_id":"themes/theme-snippet/layout/_widget/friends.ejs","hash":"26eb71dd79f1e7d222b210ecd3afd2e177e1250e","modified":1535611295676},{"_id":"themes/theme-snippet/layout/_vendor/baidu_sitemap.ejs","hash":"6ed45973126cd3fc75810d32216760f7be0ef60f","modified":1535611295660},{"_id":"themes/theme-snippet/layout/_widget/archive.ejs","hash":"2a925b8c86fecabb7a79869080b0e32bba2cece3","modified":1535611295672},{"_id":"themes/theme-snippet/layout/_widget/notification.ejs","hash":"6a0781f4e7fb684a46bc277e59eb5a5f5d6925af","modified":1535611295677},{"_id":"themes/theme-snippet/layout/_widget/category.ejs","hash":"dcdb7a08a2f17beaf610de4e937047c291f39a90","modified":1535611295674},{"_id":"themes/theme-snippet/layout/_widget/social.ejs","hash":"83be8c71b5b40b79aed50263c28c99282559c23a","modified":1535611295680},{"_id":"themes/theme-snippet/layout/_widget/tagcloud.ejs","hash":"5d9929f9e771878d473b0b8dc6381c8bb78c9a44","modified":1535611295682},{"_id":"themes/theme-snippet/layout/_widget/search.ejs","hash":"f94a530179225d88fbc3a7b23ec63e06da30a972","modified":1535611295678},{"_id":"themes/theme-snippet/layout/_widget/stick.ejs","hash":"5077377d40926f3b119e6ecf94679adc5db709b3","modified":1535611295681},{"_id":"themes/theme-snippet/source/assets/highlight.pack.js","hash":"b93558f0b97e233132a8ccf7f0275053f2df4628","modified":1535611295700},{"_id":"themes/theme-snippet/layout/_partial/nav.ejs","hash":"197741d4d213fa560e830da855efae286a9729ec","modified":1535611295644},{"_id":"themes/theme-snippet/source/img/avatar.jpg","hash":"78c9740b65126b394a8523a457dfd2d5fa88b172","modified":1535617937990},{"_id":"themes/theme-snippet/source/img/head-img.jpg","hash":"a318d304665c2f410f79e6d2eb1b98119f675b4b","modified":1535611295742},{"_id":"themes/theme-snippet/source/img/timeline.gif","hash":"b7c7aac44e618df19626d882dc46db48a4aa3673","modified":1535611295748},{"_id":"themes/theme-snippet/source/img/timeline-dot.gif","hash":"c85ef87be5b631c009e7c5737d33b61dfe580a4d","modified":1535611295746},{"_id":"themes/theme-snippet/source/img/avatar1.jpg","hash":"512025710a8c6c938ab636fcb3c9da1c8df0eec0","modified":1535611295738},{"_id":"themes/theme-snippet/source/css/font-awesome.min.css","hash":"624e4a106f0cf385ff4bd6a65c52cecd84f42ef9","modified":1535611295706},{"_id":"themes/theme-snippet/source/css/style.css","hash":"2baf1beadd776be59c52b72cbff5eadf96fa6c77","modified":1535611295717},{"_id":"themes/theme-snippet/source/img/branding.png","hash":"18bee49d6a4c521ad230047c0b416245e009c2c9","modified":1535611295740},{"_id":"themes/theme-snippet/source/assets/valine.min.js","hash":"690ec400b4b23456f77e86e217a10a58a0954562","modified":1535611295702},{"_id":"themes/theme-snippet/source/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1535611295734},{"_id":"themes/theme-snippet/source/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1535611295736},{"_id":"themes/theme-snippet/source/img/timeline-clock.gif","hash":"e1f3e1061a38e9dcaa26963ab809ba0a70bb8221","modified":1535611295745},{"_id":"themes/theme-snippet/source/css/bootstrap.min.css","hash":"224c9f9ad11b495358aa61dbd53e838e9b61015b","modified":1535611295704},{"_id":"themes/theme-snippet/source/img/loading.gif","hash":"6cea4dc953ac09fb744c7fedc12a1f4736faf8ec","modified":1535611295744},{"_id":"themes/theme-snippet/layout/_partial/_head-sections/seo.ejs","hash":"1eabe3d23806f659206ee4f5ab51c21818112c07","modified":1535611295629},{"_id":"themes/theme-snippet/layout/_partial/_head-sections/IE.ejs","hash":"7cdbf6bc632c135925e00d5e27243d94a44c8031","modified":1535611295627},{"_id":"themes/theme-snippet/layout/_partial/_head-sections/style.ejs","hash":"8ff2d85b26e0a5b844bfbfbdd55a7cf5628cfc03","modified":1535611295630},{"_id":"themes/theme-snippet/layout/_vendor/analytics/baidu.ejs","hash":"e616c6d618d2aa34baa0f244de770abcee8b56f4","modified":1535611295652},{"_id":"themes/theme-snippet/layout/_vendor/analytics/cnzz.ejs","hash":"e12c2cba1b0a9447e7a46b88a1c4d175e65bbf98","modified":1535611295654},{"_id":"themes/theme-snippet/layout/_vendor/analytics/google.ejs","hash":"1ee0f1fadedc00633b3ab30b93bdeffe22b18afe","modified":1535611295656},{"_id":"themes/theme-snippet/layout/_vendor/analytics/index.ejs","hash":"68b3680acd34f62b0b4e0017e3d8bab20d4e459f","modified":1535611295657},{"_id":"themes/theme-snippet/layout/_vendor/analytics/tencent.ejs","hash":"52e4f2541482ae473a750921dfc6bf088fd78b33","modified":1535611295658},{"_id":"themes/theme-snippet/source/js/app.js","hash":"ea09fee9577cda06f27a57a7a889e758545b05cb","modified":1535611295750},{"_id":"themes/theme-snippet/layout/_vendor/comments/disqus.ejs","hash":"0713d00c14a9b5f3b6814f5a9ea6cf21142a511c","modified":1535611295663},{"_id":"themes/theme-snippet/layout/_vendor/comments/changyan.ejs","hash":"c75ac620d6a336921fa61090d22e5cf0a09019a1","modified":1535611295662},{"_id":"themes/theme-snippet/source/js/search.js","hash":"f5d4be173934c38be5b6e8561bdcabe91c6cc2d7","modified":1535611295751},{"_id":"themes/theme-snippet/layout/_vendor/comments/index.ejs","hash":"253e8019dd6ad0dff1fc51640c58869d8efe287e","modified":1535611295666},{"_id":"themes/theme-snippet/layout/_vendor/comments/gitment.ejs","hash":"61572c2616c319d798024597c2fb8ca470767ca5","modified":1535611295665},{"_id":"themes/theme-snippet/layout/_vendor/comments/livere.ejs","hash":"084108977f3767b961361495216271972b1ada39","modified":1535611295668},{"_id":"themes/theme-snippet/layout/_partial/_head-sections/title.ejs","hash":"0b55f4dcab22788bb5b9b4f0246264278145a424","modified":1535611295632},{"_id":"themes/theme-snippet/layout/_vendor/comments/valine.ejs","hash":"ab1d025b2e3f236dd7cd0f6d366a251b8b5ef9bd","modified":1535611295670},{"_id":"themes/theme-snippet/layout/_vendor/comments/uyan.ejs","hash":"4d5e43c69eb28d2f45bba3c1cee25d773b02f0d0","modified":1535611295669},{"_id":"themes/theme-snippet/source/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1535611295725},{"_id":"themes/theme-snippet/source/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1535611295732},{"_id":"themes/theme-snippet/source/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1535611295721},{"_id":"themes/theme-snippet/source/css/less/_highlight.less","hash":"62e0505c4c1be54291964cfad26ac838cee04e0c","modified":1535611295708},{"_id":"themes/theme-snippet/source/css/less/_scrollbar.less","hash":"d6ef59cac4da4994e925786edff920628fa4fb14","modified":1535611295711},{"_id":"themes/theme-snippet/source/css/less/_mixins.less","hash":"74f250b8c287ca5840f4d09a87eb23b69a722a8a","modified":1535611295710},{"_id":"themes/theme-snippet/source/css/less/_timeline.less","hash":"a1cece09a5fda5f7c84c55871e6faca8a75b654b","modified":1535611295714},{"_id":"themes/theme-snippet/source/css/less/_style.less","hash":"2aed0a46be5fed6492cb26338af167c7957d1d6b","modified":1535611295713},{"_id":"themes/theme-snippet/source/css/less/_variable.less","hash":"dba7274bc9a0baf2fca2bc764bb436b2e3c36eb9","modified":1535611295715},{"_id":"themes/theme-snippet/source/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1535611295729},{"_id":"public/content.json","hash":"a9a4c564f66f9e39677169fab5aead9a0bc47876","modified":1546999477395},{"_id":"public/2018/10/24/将数组对象筛选处理合并成一个对象/index.html","hash":"702d13a5696506d6353b92c6b57989680fe2874a","modified":1546999477837},{"_id":"public/2018/10/23/解决vue不能使用锚标记时的方法/index.html","hash":"09048d97c4e2b70a86b181679cc88311bbe4f11f","modified":1546999477837},{"_id":"public/2018/09/19/关于vue中修改UI库样式的坑/index.html","hash":"4064e56295efafadef9b9cf6aaa1ef6bef5c9dce","modified":1546999477838},{"_id":"public/2018/09/07/关于列表水平展示的方法/index.html","hash":"25e8a01caf9831fc5018815ce1ec588a7d44d077","modified":1546999477838},{"_id":"public/2018/08/31/phpMyAdmin无法登陆解决/index.html","hash":"3a3abee5757180b82a652453dd6954e5e8078e29","modified":1546999477838},{"_id":"public/2018/08/30/使用canvas画环形进度条/index.html","hash":"8349780f679b0e4ccea8b14adf6ac0ccd4c52631","modified":1546999477838},{"_id":"public/2018/08/30/自定义百度云分享密码/index.html","hash":"3754e29c4b26cd5e874886d902bc1216c26555b8","modified":1546999477838},{"_id":"public/2018/08/30/hexo 常用命令/index.html","hash":"36064614caa1bdac392814474b6a93ae8ae7caa5","modified":1546999477838},{"_id":"public/2018/08/30/删除服务器乱码文件/index.html","hash":"0fe0cdf4e326bb7f398398ed9a84673f6c392876","modified":1546999477838},{"_id":"public/archives/2019/index.html","hash":"613c4abd5ee6e8536050fb18c7117402b2e13c25","modified":1546999477838},{"_id":"public/archives/2019/01/index.html","hash":"2e907a1d25c7297fb6fc8cc2b0f345268ae8814f","modified":1546999477838},{"_id":"public/tags/前端/page/2/index.html","hash":"1cb8dc098a284ccd3d780fd8cfe97cec2a5ef27a","modified":1546999477838},{"_id":"public/tags/其他/index.html","hash":"15cc3e72ba8e52c55648deb46ad3a4ac83b04130","modified":1546999477838},{"_id":"public/tags/后端/index.html","hash":"9a387226752a84985425e7e19523661a551ef223","modified":1546999477839},{"_id":"public/tags/服务器/index.html","hash":"4934c5eaef76d630c2faaa78fc157d346b4309e1","modified":1546999477839},{"_id":"public/categories/前端/page/2/index.html","hash":"dbb06f11dd27af6b8f175bef6999bd2141e6361b","modified":1546999477839},{"_id":"public/categories/其他/index.html","hash":"8e738795ca84c82c0fea264ab8846a73636b410b","modified":1546999477839},{"_id":"public/categories/后端/index.html","hash":"2251a868761cb9d4748f8acd39de67e8dfbe5880","modified":1546999477839},{"_id":"public/categories/服务器/index.html","hash":"42b18964ff39b1219ce9402e6f52f4eb976c60fa","modified":1546999477839},{"_id":"public/2019/01/04/vue-element-控制字段排序与显示小组件/index.html","hash":"8ddf87c07d1a0b6528d45fc3fdce4f4eef7d65da","modified":1546999477839},{"_id":"public/2018/11/08/git的问题解决方法/index.html","hash":"fce288ae2cfb1413f06ac8745e27e5646d8b4e13","modified":1546999477839},{"_id":"public/2018/10/25/es6学习/index.html","hash":"f9ec4eb3d4a5b3c766364b877441bbfb24d4bfff","modified":1546999477839},{"_id":"public/2018/09/20/七牛云上传文件demo/index.html","hash":"b52c25c2c8bbf3106d79d6332d7bf89b0f98c083","modified":1546999477839},{"_id":"public/2018/09/20/iOS上输入框光标错位问题/index.html","hash":"c0bb6c68f6c27baa6c48de549a1cccd3dcfdc00d","modified":1546999477839},{"_id":"public/2018/09/19/去掉vue的url中难看的井号并解决相关问题/index.html","hash":"d84ea557769439cc7a92980cde3f405302c6b4d1","modified":1546999477840},{"_id":"public/2018/09/12/淘宝主图换图技术/index.html","hash":"7c3b0bf9db83ee8368ab49ad33734183302f328a","modified":1546999477840},{"_id":"public/2018/09/04/数组与字符串的那些相似方法/index.html","hash":"b3f664b5d1564587ad5cff51495ba6b68fc70267","modified":1546999477840},{"_id":"public/2018/08/30/动态路由-路由访问权限/index.html","hash":"908fa8ab8aea11c31c4712a2442ac9ac005529b5","modified":1546999477840},{"_id":"public/2018/08/30/文件管理php/index.html","hash":"1a01eb9c61db4ba7534435d47a0b7795c1c03ec9","modified":1546999477840},{"_id":"public/archives/index.html","hash":"35a9fc18def1312e0684a6a598a1d6f98c8715b9","modified":1546999477840},{"_id":"public/archives/page/2/index.html","hash":"35a9fc18def1312e0684a6a598a1d6f98c8715b9","modified":1546999477840},{"_id":"public/archives/2018/index.html","hash":"fbacf1b6462ef830e647fb3a92ecd9fcc2381ebf","modified":1546999477840},{"_id":"public/archives/2018/page/2/index.html","hash":"fbacf1b6462ef830e647fb3a92ecd9fcc2381ebf","modified":1546999477840},{"_id":"public/archives/2018/08/index.html","hash":"60e68e1cabb364b358ea9a8a8c7e04c3af83bca4","modified":1546999477841},{"_id":"public/archives/2018/09/index.html","hash":"5f4fca86d87f6e793008b9c6fc4757cf1828b63a","modified":1546999477841},{"_id":"public/archives/2018/10/index.html","hash":"4d7820a33e0545f96e293547e2b5e90bea37b874","modified":1546999477841},{"_id":"public/archives/2018/11/index.html","hash":"72fda3f717183d2120dcc7625c14feadc2ae51db","modified":1546999477841},{"_id":"public/tags/前端/index.html","hash":"507feb8e6eb19b721b1ada3212b1681f67c768ba","modified":1546999477841},{"_id":"public/index.html","hash":"39f088133cbe0e67b55aaf5f8f2fc61c0435abc4","modified":1546999477841},{"_id":"public/page/2/index.html","hash":"7ed552cc1c70d0105cc5616d2971fcc2431e9dc2","modified":1546999477841},{"_id":"public/categories/前端/index.html","hash":"7a6e4cc13a83cc5d7728ff0f65e57545a188f27c","modified":1546999477841},{"_id":"public/favicon.ico","hash":"65f26147ea3433ffd64d3f18bf281af48dc5d06e","modified":1546999477854},{"_id":"public/img/avatar.jpg","hash":"78c9740b65126b394a8523a457dfd2d5fa88b172","modified":1546999477854},{"_id":"public/img/head-img.jpg","hash":"a318d304665c2f410f79e6d2eb1b98119f675b4b","modified":1546999477855},{"_id":"public/img/timeline.gif","hash":"b7c7aac44e618df19626d882dc46db48a4aa3673","modified":1546999477855},{"_id":"public/img/timeline-dot.gif","hash":"c85ef87be5b631c009e7c5737d33b61dfe580a4d","modified":1546999477855},{"_id":"public/img/avatar1.jpg","hash":"512025710a8c6c938ab636fcb3c9da1c8df0eec0","modified":1546999477855},{"_id":"public/img/branding.png","hash":"18bee49d6a4c521ad230047c0b416245e009c2c9","modified":1546999477855},{"_id":"public/img/timeline-clock.gif","hash":"e1f3e1061a38e9dcaa26963ab809ba0a70bb8221","modified":1546999477855},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1546999477861},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1546999477866},{"_id":"public/img/loading.gif","hash":"6cea4dc953ac09fb744c7fedc12a1f4736faf8ec","modified":1546999477868},{"_id":"public/assets/highlight.pack.js","hash":"f39840759ec9afe56ec1ca30579d1f1c9d1f6026","modified":1546999477875},{"_id":"public/js/app.js","hash":"eca509fc5b45dcd1a0007c62f740529ca31a122f","modified":1546999477875},{"_id":"public/js/search.js","hash":"a6c7ac73821e5c7db7d4ae6de2d00f44367a858e","modified":1546999477875},{"_id":"public/css/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1546999477876},{"_id":"public/css/style.css","hash":"d5c8ad0fbf7634f66cbb945a6b1206e07ff54bf3","modified":1546999477876},{"_id":"public/assets/valine.min.js","hash":"bf7099fa607a93068dd01f109eaa2cd18663b946","modified":1546999477877},{"_id":"public/css/bootstrap.min.css","hash":"6527d8bf3e1e9368bab8c7b60f56bc01fa3afd68","modified":1546999477877},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1546999477877},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1546999477877},{"_id":"public/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1546999477877},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1546999477906}],"Category":[{"name":"前端","_id":"cjqojjnmj0002uwkqnkjxiujo"},{"name":"其他","_id":"cjqojjnmw0007uwkqttqwyek5"},{"name":"后端","_id":"cjqojjnnt000muwkqzvktva4b"},{"name":"服务器","_id":"cjqojjno2000xuwkq04ujuy3s"}],"Data":[],"Page":[],"Post":[{"title":"es6学习","date":"2018-10-25T02:46:07.000Z","comments":1,"_content":"# es5缺陷与es6解决\n## 数组\nES5 内建的forEach方法 缺陷：无法使用break 中断 ，也不能使用return 语句返回到外层函数\n### 1. 遍历数组\n① for forEach\n```javascript\nvar arr = [1,2,3,4,5,6];\narr.name = 'a';\nfor (var index = 0; index < arr.length; index++) {\n  console.log(arr[index]);\n}\narr.forEach(function (value) { //ES5 内建的forEach方法 缺陷：无法使用break 中断 ，也不能使用return 语句返回到外层函数\n  console.log(value);\n});\n// 结果都是：1,2,3,4,5,6\n```\n② 用 for-in ：作用于数组的 forfor -in 循环体除了遍历数组元素外,还会遍历自定义属性。比如数组有一个可枚举属性arr.a,循环将额外执行一次\n```javascript\nfor (var index in arr) { // 千万别这样做\n console.log(arr[index]);\n}\n// 结果：1,2,3,4,5,6，a\n```\nfor-in 是为普通对象设计的，赋值给index的值不是实际的数字1、2，而是字符串‘1'，‘2'\n```javascript\nvar b = 0;\nfor (var index in arr) {\n b = b+ index;\n console.log(b)\n}\n// 结果：00，001，0012，00123，001234，0012345，0012345name\n```\n③ 使用 for-of：避开了for-in 的所有缺陷，可以正确响应 break、return 语句\\\n```javascript\nfor(var value of arr){\n  console.log(value)\n}\n// 结果：1,2,3,4,5,6\n```\n### 2.for-of 循环便利其他集合\n① 遍历Set\n```javascript\nvar words = 'a';\nvar s = new Set();\ns.add(\"a\");\ns.add(1);\nfor(var word of s){\n  console.log(word);\n}\n// 结果：a，1\n```\n② 遍历Map \n```javascript\nvar map = new Map();\nmap.set('a',1);\nmap.set('b',2);\nmap.set('c',3);\nmap.set('d',4);\nfor(var [key,value] of map){\n  console.log(key+':'+value);\n}\n// 结果：a：1，b：2，c：3，d：4\n```\n### 3. Iterator（遍历器）\n① 遍历器（Iterator）是一种接口规格，任何对象只要部署这个接口，就可以完成遍历操作。它的作用有两个，一是为各种数据结构，提供一个统一的、简便的接口，二是使得对象的属性能够按某种次序排列。\n\n② 遍历器的原理：遍历器提供了一个指针，指向当前对象的某个属性，使用next方法，就可以将指针移动到下一个属性。next方法返回一个包含value和done两个属性的对象。其中，value属性是当前遍历位置的值，done属性是一个布尔值，表示遍历是否结束。\n```javascript\n//模拟遍历器原理\nfunction makeIterator(array){\n  var nextIndex = 0;\n  return {\n    next: function(){\n      return nextIndex < array.length ?\n        {value: array[nextIndex++], done: false} :\n        {value: undefined, done: true};\n    }\n  }\n}\nvar it = makeIterator(['a', 'b']);\nconsole.log(it.next());//{ value: 'a', done: false }\nconsole.log(it.next());//{ value: 'b', done: false }\nconsole.log(it.next());//{ value: undefined, done: true }\n```\n③ Iterator接口返回的遍历器，原生具备next方法。\n\n>   有三类数据结构原生具备Iterator接口：数组、类似数组的对象、Set和Map结构\n\n能调用遍历器接口的\n1. for...of\n1. Array.from()\n1. Map(), Set(), WeakMap(), WeakSet()（比如new Map([['a',1],['b',2]])）\n1. Promise.all()\n1. Promise.race()\n```javascript\nvar map = new Map();\nconsole.log(map[Symbol.iterator] === map.entries)//true\nvar arr = new Array();\nconsole.log(arr[Symbol.iterator] === arr.values)//true\nvar set = new Set();\nconsole.log(set[Symbol.iterator] === set.values)//true\n```\n> 其他数据结构（主要是对象）如果需要Iterator接口,都需要自己部署。\n```javascript\nvar students = {}\nstudents[Symbol.iterator] = function() {\n let index = 1;\n return {\n  next() {\n   return {done: index>10, value: index++}\n  }\n }\n}\nfor(var i of students) {\n console.log(i);\n}//\n```\n\n# es6\n## 字符串的扩展\n\n### includes(), startsWith(), endsWith()\n\nJavaScript 只有indexOf方法，可以用来确定一个字符串是否包含在另一个字符串中。ES6 又提供了三种新方法。\n\nincludes()：返回布尔值，表示是否找到了参数字符串。             第二参数数字 表示起始位置\nstartsWith()：返回布尔值，表示参数字符串是否在原字符串的头部。 第二参数数字 表示起始位置\nendsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部。   第二参数数字 表示截止位置\n\n```javascript\nlet s = 'Hello world!';\n\ns.startsWith('world', 6); // true\ns.endsWith('Hello', 5); // true\ns.includes('Hello', 6); // false\n\n```\n### repeat()\nrepeat方法返回一个新字符串，表示将原字符串重复n次。\n\n```javascript\n'x'.repeat(3); // \"xxx\"\n'hello'.repeat(2); // \"hellohello\"\n'na'.repeat(0); // \"\"\n\n```\n正小数,向下取整\n0- -1小数 为 -0  视为 0\n\n参数字符串,NaN 会优先转为数字,转不了的话 为0\n\n## padStart()，padEnd()\n\n```javascript\n'x'.padStart(5, 'ab') // 'ababx'\n'x'.padStart(4, 'ab') // 'abax'\n\n'x'.padEnd(5, 'ab') // 'xabab'\n'x'.padEnd(4, 'ab') // 'xaba'\n\n```\n如果用来补全的字符串与原字符串，两长度之和超过了指定的最小长度，则会截去超出位数的补全字符串。\n\n如果省略第二个参数，默认使用空格补全长度。\n```javascript\n'abc'.padStart(10, '0123456789')\n// '0123456abc'\n\n'x'.padStart(4) // '   x'\n'x'.padEnd(4) // 'x   '\n```\npadStart的常见用途是为数值补全指定位数。下面代码生成 10 位的数值字符串。\n\n另一个用途是提示字符串格式\n```javascript\n'1'.padStart(10, '0') // \"0000000001\"\n'12'.padStart(10, '0') // \"0000000012\"\n'123456'.padStart(10, '0') // \"0000123456\"\n\n'12'.padStart(10, 'YYYY-MM-DD') // \"YYYY-MM-12\"\n'09-12'.padStart(10, 'YYYY-MM-DD') // \"YYYY-09-12\"\n```\n\n## matchAll()\nmatchAll方法返回一个正则表达式在当前字符串的所有匹配，详见《正则的扩展》的一章\n\n## 模板字符串 `${变量名}`\n\n```javascript\nlet a = 'xiaojw'\nlet b =`我是${a}哟!`\nconsole.log(`可以直接换行\n哟!`)\n```\n\n## 正则的扩展\n\n### 1.RegExp 构造函数 \n```javascript\n// 允许\nvar regex = new RegExp('xyz', 'i');\nvar regex = new RegExp(/xyz/i);\n// 等价于\nvar regex = /xyz/i;\n// es5不允许 es6允许\nvar regex = new RegExp(/xyz/, 'i');\n\n```\n### 2.字符串的正则方法\n字符串对象共有 4 个方法，可以使用正则表达式：match()、replace()、search()和split()。\n\n### 3.u修饰符\nES6 对正则表达式添加了u修饰符，含义为“Unicode 模式”，用来正确处理大于\\uFFFF的 Unicode 字符。也就是说，会正确处理四个字节的 UTF-16 编码\n\n\n```javascript\n// 点字符\nvar s = '𠮷';\n\n/^.$/.test(s); // false\n/^.$/u.test(s); // true\n// 如果不添加u修饰符，正则表达式就会认为字符串为两个字符，从而匹配失败。\n\n// 2.Unicode 字符表示法\n/\\u{61}/.test('a'); // false\n/\\u{61}/u.test('a'); // true\n/\\u{20BB7}/u.test('𠮷'); // true\n\n// 3.量词\n/a{2}/.test('aa'); // true\n/a{2}/u.test('aa'); // true\n/𠮷{2}/.test('𠮷𠮷'); // false\n/𠮷{2}/u.test('𠮷𠮷'); // true\n\n// 4.预定义模式\n/^\\S$/.test('𠮷'); // false\n/^\\S$/u.test('𠮷'); // true\n\n// 返回字符串长度的函数\nfunction codePointLength(text) {\n  var result = text.match(/[\\s\\S]/gu);\n  return result ? result.length : 0;\n}\nvar s = '𠮷𠮷';\ns.length; // 4\ncodePointLength(s) // 2\n\n// 5.i 修饰符\n/[a-z]/i.test('\\u212A'); // false\n/[a-z]/iu.test('\\u212A'); // true\n```\n### 4.RegExp.prototype.unicode 属性\n```javascript\nconst r1 = /hello/;\nconst r2 = /hello/u;\n\nr1.unicode; // false\nr2.unicode; // true\n\n```\n### 5.y 修饰符\ny修饰符与g修饰符类似,全局搜索\n但与g不同的地方是需要严格从上一次匹配的位置进行下一次匹配 且y修饰符号隐含了头部匹配的标志^。\n```javascript\nvar s = 'aaa_aa_a';\nvar r1 = /a+/g;\nvar r2 = /a+/y;\n\nr1.exec(s) // [\"aaa\"]\nr2.exec(s) // [\"aaa\"]\n\nr1.exec(s) // [\"aa\"]  剩余字符 _aa_a\nr2.exec(s) // null    剩余字符 _aa_a   _匹配不上a\n\n```\n### 6.RegExp.prototype.sticky 属性\n与y修饰符相匹配，ES6 的正则实例对象多了sticky属性，表示是否设置了y修饰符。\n```javascript\nvar r = /hello\\d/y;\nr.sticky // true\n```\n### 7.RegExp.prototype.flags\nES6 为正则表达式新增了flags属性，会返回正则表达式的修饰符。\n\n### 8.s 修饰符：dotAll 模式\n这被称为dotAll模式，即点（dot）代表一切字符。但是有两个例外。一个是四个字节的 UTF-16 字符，这个可以用u修饰符解决；另一个是行终止符（line terminator character）。\n\n1.U+000A 换行符（\\n）\n2.U+000D 回车符（\\r）\n3.U+2028 行分隔符（line separator）\n4.U+2029 段分隔符（paragraph separator\n\n所以，正则表达式还引入了一个dotAll属性，返回一个布尔值，表示该正则表达式是否处在dotAll模式。\n\n### 9.后行断言\n\n(pattern) ：  匹配 pattern 并获取这一匹配，所获取的匹配可以从产生的 Matches 集合得到。 \n(?:pattern) ：匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。 \n(?!pattern) ：匹配 !pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。 \n(?=pattern) ：正向预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。\n\n\n(pattern)匹配pattern并捕获该匹配的子表达式.可以使用 $0...$9属性从结果\"匹配\"集合中检索捕获的匹配.若要匹配括号字符(),请使用\"\"或者\"\"或者\"\".\n\n(?:pattern)匹配pattern但不捕获该匹配的子表达式,即它是一个非捕获匹配,不存储供以后使用的匹配.这对于用\"或\"字符(|)组合模式部件的情况很有用.\n  例如,与\"industry|industries\"相比,\"industr(?:y|ies)\"是一个更加经济的表达式.\n\nlet RegExp = /industr(y|ies)/      // 存储\nlet RegExp1 = /industr(?:y|ies)/   // ?:不存储\nlet result1 = 'industry'.match(RegExp)\nlet result2 = 'industries'.match(RegExp)\n\nlet result3 = 'industry'.match(RegExp1)\nlet result4 = 'industries'.match(RegExp1)\n\t  \n(?=pattern)执行正向预测先行搜索的子表达式,该表达式匹配处于匹配 pattern 的字符串的起始点的字符串.它是一个非捕获匹配,即不能捕获供以后使用的匹配.\n  例如,\"Windows (?=95| 98| NT| 2000)\"与\"Windows 2000\"中的\"Windows\"匹配,但不与\"Windows 3.1\"中的\"Windows\"匹配.\n        预测先行不占用字符,即发生匹配后,下一匹配的搜索紧随上一匹配之后,而不是在组成预测先行的字符后.\n\n(?!pattern)执行反向预测先行搜索的子表达式,该表达式匹配不处于匹配 pattern 的字符串的起始点的搜索字符串.它是一个非捕获匹配,即不能捕获供以后使用的匹配.\n  例如,\"Windows (?!95| 98| NT| 2000)\"与\"Windows 3.1\"中的\"Windows\"匹配,但不与\"Windows 2000\"中的\"Windows\"匹配.\n        预测先行不占用字符,即发生匹配后,下一匹配的搜索紧随上一匹配之后,而不是在组成预测先行的字符后.\n\n--------------------- \n作者：warmsmellofcolitas \n来源：CSDN \n原文：https://blog.csdn.net/warmsmellofcolitas/article/details/79403706 \n版权声明：本文为博主原创文章，转载请附上博文链接！\n\n### 10.Unicode 属性类\nES2018 引入了一种新的类的写法\\p{...}和\\P{...}，允许正则表达式匹配符合 Unicode 某种属性的所有字符。\n```javascript\nconst regexGreekSymbol = /\\p{Script=Greek}/u;\nregexGreekSymbol.test('π') // true\n```\n上面代码中，\\p{Script=Greek}指定匹配一个希腊文字母，所以匹配π成功\n\nUnicode 属性类要指定属性名和属性值\n对于某些属性，可以只写属性名，或者只写属性值。\n```javascript\n/\\p{UnicodePropertyName=UnicodePropertyValue}/\n/\\p{UnicodePropertyName}/\n/\\p{UnicodePropertyValue}/\n```\n\\P{…}是\\p{…}的反向匹配，即匹配不满足条件的字符。\n注意，这两种类只对 Unicode 有效，所以使用的时候一定要加上u修饰符。如果不加u修饰符，正则表达式使用\\p和\\P会报错，ECMAScript 预留了这两个类。\n由于 Unicode 的各种属性非常多，所以这种新的类的表达能力非常强\n```javascript\nconst regex = /^\\p{Decimal_Number}+$/u;\nregex.test('𝟏𝟐𝟑𝟜𝟝𝟞𝟩𝟪𝟫𝟬𝟭𝟮𝟯𝟺𝟻𝟼'); // true\n```\n上面代码中，属性类指定匹配所有十进制字符，可以看到各种字型的十进制字符都会匹配成功。\n\n\\p{Number}甚至能匹配罗马数字。\n```javascript\n// 匹配所有数字\nconst regex = /^\\p{Number}+$/u;\nregex.test('²³¹¼½¾'); // true\nregex.test('㉛㉜㉝'); // true\nregex.test('ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫ'); // true\n```\n例子\n```javascript\n// 匹配所有空格\n/\\p{White_Space}/\n\n// 匹配各种文字的所有字母，等同于 Unicode 版的 \\w\n/[\\p{Alphabetic}\\p{Mark}\\p{Decimal_Number}\\p{Connector_Punctuation}\\p{Join_Control}]/\n\n// 匹配各种文字的所有非字母的字符，等同于 Unicode 版的 \\W\n/[^\\p{Alphabetic}\\p{Mark}\\p{Decimal_Number}\\p{Connector_Punctuation}\\p{Join_Control}]/\n\n// 匹配 Emoji\n/\\p{Emoji_Modifier_Base}\\p{Emoji_Modifier}?|\\p{Emoji_Presentation}|\\p{Emoji}\\uFE0F/gu\n\n// 匹配所有的箭头字符\nconst regexArrows = /^\\p{Block=Arrows}+$/u;\nregexArrows.test('←↑→↓↔↕↖↗↘↙⇏⇐⇑⇒⇓⇔⇕⇖⇗⇘⇙⇧⇩') // true\n```\n### 11.具名组匹配\n正则表达式使用圆括号进行组匹配。\n```javascript\nconst RE_DATE = /(\\d{4})-(\\d{2})-(\\d{2})/;\n```\n上面代码中，正则表达式里面有三组圆括号。使用exec方法，就可以将这三组匹配结果提取出来\n```javascript\nconst RE_DATE = /(\\d{4})-(\\d{2})-(\\d{2})/;\n\nconst matchObj = RE_DATE.exec('1999-12-31');\nconst year = matchObj[1]; // 1999\nconst month = matchObj[2]; // 12\nconst day = matchObj[3]; // 31\n```\n组匹配的一个问题是，每一组的匹配含义不容易看出来，而且只能用数字序号（比如matchObj[1]）引用，要是组的顺序变了，引用的时候就必须修改序号。\n\nES2018 引入了具名组匹配（Named Capture Groups），允许为每一个组匹配指定一个名字，既便于阅读代码，又便于引用。\n```javascript\nconst RE_DATE = /(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/;\n\nconst matchObj = RE_DATE.exec('1999-12-31');\nconst year = matchObj.groups.year; // 1999\nconst month = matchObj.groups.month; // 12\nconst day = matchObj.groups.day; // 31\n// 数字序号（matchObj[1]）依然有效\n```\n没有找到匹配,属性值就是undefined\n\n#### 解构赋值和替换\n有了具名组匹配以后，可以使用解构赋值直接从匹配结果上为变量赋值。\n```javascript\nlet {groups: {one, two}} = /^(?<one>.*):(?<two>.*)$/u.exec('foo:bar');\none  // foo\ntwo  // bar\n```\n字符串替换时，使用$<组名>引用具名组\n```javascript\nlet re = /(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/u;\n\n'2015-01-02'.replace(re, '$<day>/$<month>/$<year>')\n// '02/01/2015'\n```\n上面代码中，replace方法的第二个参数是一个字符串，而不是正则表达式。\n\nreplace方法的第二个参数也可以是函数，该函数的参数序列如下。\n```javascript\n'2015-01-02'.replace(re, (\n   matched, // 整个匹配结果 2015-01-02\n   capture1, // 第一个组匹配 2015\n   capture2, // 第二个组匹配 01\n   capture3, // 第三个组匹配 02\n   position, // 匹配开始的位置 0\n   S, // 原字符串 2015-01-02\n   groups // 具名组构成的一个对象 {year, month, day}\n ) => {\n let {day, month, year} = groups;\n return `${day}/${month}/${year}`;\n});\n```\n具名组匹配在原来的基础上，新增了最后一个函数参数：具名组构成的一个对象。函数内部可以直接对这个对象进行解构赋值。\n\n#### 引用\n如果要在正则表达式内部引用某个“具名组匹配”，可以使用\\k<组名>的写法。\n\n```javascript\nconst RE_TWICE = /^(?<word>[a-z]+)!\\k<word>$/;\nRE_TWICE.test('abc!abc'); // true\nRE_TWICE.test('abc!ab'); // false\n```\n数字引用（\\1）依然有效\n```javascript\nconst RE_TWICE = /^(?<word>[a-z]+)!\\1$/;\nRE_TWICE.test('abc!abc'); // true\nRE_TWICE.test('abc!ab'); // false\n```\n这两种引用语法还可以同时使用。\n```javascript\nconst RE_TWICE = /^(?<word>[a-z]+)!\\k<word>!\\1$/;\nRE_TWICE.test('abc!abc!abc') // true\nRE_TWICE.test('abc!abc!ab') // false\n```\n\n### 12.String.prototype.matchAll\n如果一个正则表达式在字符串里面有多个匹配，现在一般使用g修饰符或y修饰符，在循环里面逐一取出。\n\n```javascript\nvar regex = /t(e)(st(\\d?))/g;\nvar string = 'test1test2test3';\n\nvar matches = [];\nvar match;\nwhile (match = regex.exec(string)) {\n  matches.push(match);\n}\n\nmatches\n// [\n//   [\"test1\", \"e\", \"st1\", \"1\", index: 0, input: \"test1test2test3\"],\n//   [\"test2\", \"e\", \"st2\", \"2\", index: 5, input: \"test1test2test3\"],\n//   [\"test3\", \"e\", \"st3\", \"3\", index: 10, input: \"test1test2test3\"]\n// ]\n```\n上面代码中，while循环取出每一轮的正则匹配，一共三轮。\n\n目前有一个提案，增加了String.prototype.matchAll方法，可以一次性取出所有匹配。不过，它返回的是一个遍历器（Iterator），而不是数组\n```javascript\nconst string = 'test1test2test3';\n\n// g 修饰符加不加都可以\nconst regex = /t(e)(st(\\d?))/g;\n\nfor (const match of string.matchAll(regex)) {\n  console.log(match);\n}\n// [\"test1\", \"e\", \"st1\", \"1\", index: 0, input: \"test1test2test3\"]\n// [\"test2\", \"e\", \"st2\", \"2\", index: 5, input: \"test1test2test3\"]\n// [\"test3\", \"e\", \"st3\", \"3\", index: 10, input: \"test1test2test3\"]\n```\n上面代码中，由于string.matchAll(regex)返回的是遍历器，所以可以用for...of循环取出。相对于返回数组，返回遍历器的好处在于，如果匹配结果是一个很大的数组，那么遍历器比较节省资源。\n\n遍历器转为数组是非常简单的，使用...运算符和Array.from方法就可以了。\n```javascript\n// 转为数组方法一\n[...string.matchAll(regex)]\n\n// 转为数组方法二\nArray.from(string.matchAll(regex));\n```\n###### 注:javascript中for...in和for...of的区别,以下括号中注的解释\n{\nfor...of循环是ES6引入的新的语法。\nfor...in遍历拿到的x是键（下标）。而for...of遍历拿到的x是值，但在对象中会提示不是一个迭代器报错。\n```javascript\nlet x;\nlet a = ['A','B','C'];\nlet b = {name: '刘德华',age: '18'};\n\nconsole.log(a.length);\nfor(x of a){\n　　console.log(x); //A,B,C\n}\nfor(x in a){\n　　console.log(x+':'+a[x]); //0:A,1:B,2:C\n}\n/*for(x of b){\n　　console.log(x); //报错\n}*/\nfor(x in b){\n　　console.log(x); //name,age\n}\n```\n}\n\n## 函数的扩展\n\n### 1.函数参数的默认值\n```javascript\nfunction log(x, y = 'World') {\n  console.log(x, y);\n}\n\nlog('Hello') // Hello World\nlog('Hello', 'China') // Hello China\nlog('Hello', '') // Hello\n```\n#### 与解构赋值默认值结合使用\n```javascript\nfunction fetch(url, { body = '', method = 'GET', headers = {} }) {\n  console.log(method);\n}\n\nfetch('http://example.com', {})\n// \"GET\"\n\nfetch('http://example.com')\n// 报错\n```\n两个写法的区别\n```javascript\n// 写法一\nfunction m1({x = 0, y = 0} = {}) {\n  return [x, y];\n}\n\n// 写法二\nfunction m2({x, y} = { x: 0, y: 0 }) {\n  return [x, y];\n}\n\n// 函数没有参数的情况\nm1() // [0, 0]\nm2() // [0, 0]\n\n// x 和 y 都有值的情况\nm1({x: 3, y: 8}) // [3, 8]\nm2({x: 3, y: 8}) // [3, 8]\n\n// x 有值，y 无值的情况\nm1({x: 3}) // [3, 0]\nm2({x: 3}) // [3, undefined]\n\n// x 和 y 都无值的情况\nm1({}) // [0, 0];\nm2({}) // [undefined, undefined]\n\nm1({z: 3}) // [0, 0]\nm2({z: 3}) // [undefined, undefined]\n```\n#### 函数的 length 属性\n指定了默认值以后，函数的length属性，将返回没有指定默认值的参数个数。也就是说，指定了默认值后，length属性将失真。\n```javascript\n(function (a) {}).length // 1\n(function (a = 5) {}).length // 0\n(function (a, b, c = 5) {}).length // 2\n```\n#### 作用域\n```javascript\nfunction f(y = x) {\n  let x = 2;\n  console.log(y);\n}\n\nf() // ReferenceError: x is not defined\n\n\n\nvar x = 1;\n\nfunction foo(x = x) {\n  // ...\n}\n\nfoo() // R\n\n```\n上面代码中，参数x = x形成一个单独作用域。实际执行的是let x = x，由于暂时性死区的原因，这行代码会报错”x 未定义“。\n\n```javascript\nlet foo = 'outer';\n\nfunction bar(func = () => foo) {\n  let foo = 'inner';\n  console.log(func());\n}\n\nbar(); // outer\n```\n上面代码中，函数bar的参数func的默认值是一个匿名函数，返回值为变量foo。函数参数形成的单独作用域里面，并没有定义变量foo，所以foo指向外层的全局变量foo，因此输出outer。\n### 2.rest 参数\nES6 引入 rest 参数（形式为...变量名），用于获取函数的多余参数，这样就不需要使用arguments对象了。rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中。\n\n```javascript\nfunction add(...values) {\n  let sum = 0;\n\n  for (var val of values) {\n    sum += val;\n  }\n\n  return sum;\n}\n\nadd(2, 5, 3) // 10\n``````\n\n### 3.尾调用优化\n#### 什么是尾调用\n尾调用（Tail Call）是函数式编程的一个重要概念，本身非常简单，一句话就能说清楚，就是指某个函数的最后一步是调用另一个函数。\n\n```javascript\nfunction f(x){\n  return g(x);\n}\n```\n上面代码中，函数f的最后一步是调用函数g，这就叫尾调用。\n\n以下三种情况，都不属于尾调用。\n```javascript\n// 情况一\nfunction f(x){\n  let y = g(x);\n  return y;\n}\n\n// 情况二\nfunction f(x){\n  return g(x) + 1;\n}\n\n// 情况三\nfunction f(x){\n  g(x);\n}\n```\n上面代码中，情况一是调用函数g之后，还有赋值操作，所以不属于尾调用，即使语义完全一样。情况二也属于调用后还有操作，即使写在一行内。情况三等同于下面的代码。\n```javascript\nfunction f(x){\n  g(x);\n  return undefined;\n}\n```\n尾调用不一定出现在函数尾部，只要是最后一步操作即可。\n```javascript\nfunction f(x) {\n  if (x > 0) {\n    return m(x)\n  }\n  return n(x);\n}\n```\n上面代码中，函数m和n都属于尾调用，因为它们都是函数f的最后一步操作。\n#### 尾调用优化\n函数调用会在内存形成一个“调用记录”，又称“调用帧”（call frame），保存调用位置和内部变量等信息。如果在函数A的内部调用函数B，那么在A的调用帧上方，还会形成一个B的调用帧。等到B运行结束，将结果返回到A，B的调用帧才会消失。如果函数B内部还调用函数C，那就还有一个C的调用帧，以此类推。所有的调用帧，就形成一个“调用栈”（call stack）\n\n尾调用由于是函数的最后一步操作，所以不需要保留外层函数的调用帧，因为调用位置、内部变量等信息都不会再用到了，只要直接用内层函数的调用帧，取代外层函数的调用帧就可以了。\n```javascript\nfunction f() {\n  let m = 1;\n  let n = 2;\n  return g(m + n);\n}\nf();\n\n// 等同于\nfunction f() {\n  return g(3);\n}\nf();\n\n// 等同于\ng(3);\n```\n\n这就叫做“尾调用优化”（Tail call optimization），即只保留内层函数的调用帧。如果所有函数都是尾调用，那么完全可以做到每次执行时，调用帧只有一项，这将大大节省内存。这就是“尾调用优化”的意义。\n\n注意，只有不再用到外层函数的内部变量，内层函数的调用帧才会取代外层函数的调用帧，否则就无法进行“尾调用优化”\n\n```javascript\nfunction addOne(a){\n  var one = 1;\n  function inner(b){\n    return b + one;\n  }\n  return inner(a);\n}\n```\n上面的函数不会进行尾调用优化，因为内层函数inner用到了外层函数addOne的内部变量one。\n\n### 尾递归\n函数调用自身，称为递归。如果尾调用自身，就称为尾递归。\n\n递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）。但对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。\n```javascript\nfunction factorial(n) {\n  if (n === 1) return 1;\n  return n * factorial(n - 1);\n}\n\nfactorial(5) // 120\n```\n上面代码是一个阶乘函数，计算n的阶乘，最多需要保存n个调用记录，复杂度 O(n) 。\n\n如果改写成尾递归，只保留一个调用记录，复杂度 O(1) 。\n```javascript\nfunction factorial(n, total) {\n  if (n === 1) return total;\n  return factorial(n - 1, n * total);\n}\n\nfactorial(5, 1) // 120\n```\n\n非尾递归的 Fibonacci 数列实现如下。\n```javascript\nfunction Fibonacci (n) {\n  if ( n <= 1 ) {return 1};\n\n  return Fibonacci(n - 1) + Fibonacci(n - 2);\n}\n\n// f(3) => f(2)+ f(1) => f(1)+ f(0) + f(1) => 3\nFibonacci(3) // 3\nFibonacci(10) // 89\nFibonacci(100) // 堆栈溢出\nFibonacci(500) // 堆栈溢出\n```\n尾递归优化过的 Fibonacci 数列实现如下。\n```javascript\nfunction Fibonacci2 (n , ac1 = 1 , ac2 = 1) {\n  if( n <= 1 ) {return ac2};\n //                  (序号,上一次结果,本次结果)  \n  return Fibonacci2 (n - 1, ac2, ac1 + ac2);\n}\n\n// f(3,1,1)= f(2,1,2)=f(1,2,3) = 3\n// f(4,1,1) = f(3,1,2)=f(2,2,3) =f(1,3,5) = 5\nFibonacci2(100) // 573147844013817200000\nFibonacci2(1000) // 7.0330367711422765e+208\nFibonacci2(10000) // Infinity\n```\n由此可见，“尾调用优化”对递归操作意义重大，所以一些函数式编程语言将其写入了语言规格。ES6 是如此，第一次明确规定，所有 ECMAScript 的实现，都必须部署“尾调用优化”。这就是说，ES6 中只要使用尾递归，就不会发生栈溢出，相对节省内存。\n\n### 严格模式\nES6 的尾调用优化只在严格模式下开启，正常模式是无效的。\n\n这是因为在正常模式下，函数内部有两个变量，可以跟踪函数的调用栈。\n\nfunc.arguments：返回调用时函数的参数。\nfunc.caller：返回调用当前函数的那个函数。\n尾调用优化发生时，函数的调用栈会改写，因此上面两个变量就会失真。严格模式禁用这两个变量，所以尾调用模式仅在严格模式下生效。\n```bash\nfunction restricted() {\n  'use strict';\n  restricted.caller;    // 报错\n  restricted.arguments; // 报错\n}\nrestricted();\n```\n\n### 尾递归优化的实现\n尾递归优化只在严格模式下生效，那么正常模式下，或者那些不支持该功能的环境中，有没有办法也使用尾递归优化呢？回答是可以的，就是自己实现尾递归优化。\n\n它的原理非常简单。尾递归之所以需要优化，原因是调用栈太多，造成溢出，那么只要减少调用栈，就不会溢出。怎么做可以减少调用栈呢？就是采用“循环”换掉“递归”。\n\n下面是一个正常的递归函数。\n```javascript\nfunction sum(x, y) {\n  if (y > 0) {\n    return sum(x + 1, y - 1);\n  } else {\n    return x;\n  }\n}\n\nsum(1, 100000)\n// Uncaught RangeError: Maximum call stack size exceeded(…)\n```\n上面代码中，sum是一个递归函数，参数x是需要累加的值，参数y控制递归次数。一旦指定sum递归 100000 次，就会报错，提示超出调用栈的最大次数。\n\n蹦床函数（trampoline）可以将递归执行转为循环执行。\n```javascript\nfunction trampoline(f) {\n  while (f && f instanceof Function) {\n    f = f();\n  }\n  return f;\n}\n```\n上面就是蹦床函数的一个实现，它接受一个函数f作为参数。只要f执行后返回一个函数，就继续执行。注意，这里是返回一个函数，然后执行该函数，而不是函数里面调用函数，这样就避免了递归执行，从而就消除了调用栈过大的问题。\n\n然后，要做的就是将原来的递归函数，改写为每一步返回另一个函数。\n```javascript\nfunction sum(x, y) {\n  if (y > 0) {\n    return sum.bind(null, x + 1, y - 1);\n  } else {\n    return x;\n  }\n}\n```\n","source":"_posts/es6学习.md","raw":"---\ntitle: es6学习\ndate: 2018-10-25 10:46:07\ncategories: ['前端'] \ntags: 前端\ncomments: true\n---\n# es5缺陷与es6解决\n## 数组\nES5 内建的forEach方法 缺陷：无法使用break 中断 ，也不能使用return 语句返回到外层函数\n### 1. 遍历数组\n① for forEach\n```javascript\nvar arr = [1,2,3,4,5,6];\narr.name = 'a';\nfor (var index = 0; index < arr.length; index++) {\n  console.log(arr[index]);\n}\narr.forEach(function (value) { //ES5 内建的forEach方法 缺陷：无法使用break 中断 ，也不能使用return 语句返回到外层函数\n  console.log(value);\n});\n// 结果都是：1,2,3,4,5,6\n```\n② 用 for-in ：作用于数组的 forfor -in 循环体除了遍历数组元素外,还会遍历自定义属性。比如数组有一个可枚举属性arr.a,循环将额外执行一次\n```javascript\nfor (var index in arr) { // 千万别这样做\n console.log(arr[index]);\n}\n// 结果：1,2,3,4,5,6，a\n```\nfor-in 是为普通对象设计的，赋值给index的值不是实际的数字1、2，而是字符串‘1'，‘2'\n```javascript\nvar b = 0;\nfor (var index in arr) {\n b = b+ index;\n console.log(b)\n}\n// 结果：00，001，0012，00123，001234，0012345，0012345name\n```\n③ 使用 for-of：避开了for-in 的所有缺陷，可以正确响应 break、return 语句\\\n```javascript\nfor(var value of arr){\n  console.log(value)\n}\n// 结果：1,2,3,4,5,6\n```\n### 2.for-of 循环便利其他集合\n① 遍历Set\n```javascript\nvar words = 'a';\nvar s = new Set();\ns.add(\"a\");\ns.add(1);\nfor(var word of s){\n  console.log(word);\n}\n// 结果：a，1\n```\n② 遍历Map \n```javascript\nvar map = new Map();\nmap.set('a',1);\nmap.set('b',2);\nmap.set('c',3);\nmap.set('d',4);\nfor(var [key,value] of map){\n  console.log(key+':'+value);\n}\n// 结果：a：1，b：2，c：3，d：4\n```\n### 3. Iterator（遍历器）\n① 遍历器（Iterator）是一种接口规格，任何对象只要部署这个接口，就可以完成遍历操作。它的作用有两个，一是为各种数据结构，提供一个统一的、简便的接口，二是使得对象的属性能够按某种次序排列。\n\n② 遍历器的原理：遍历器提供了一个指针，指向当前对象的某个属性，使用next方法，就可以将指针移动到下一个属性。next方法返回一个包含value和done两个属性的对象。其中，value属性是当前遍历位置的值，done属性是一个布尔值，表示遍历是否结束。\n```javascript\n//模拟遍历器原理\nfunction makeIterator(array){\n  var nextIndex = 0;\n  return {\n    next: function(){\n      return nextIndex < array.length ?\n        {value: array[nextIndex++], done: false} :\n        {value: undefined, done: true};\n    }\n  }\n}\nvar it = makeIterator(['a', 'b']);\nconsole.log(it.next());//{ value: 'a', done: false }\nconsole.log(it.next());//{ value: 'b', done: false }\nconsole.log(it.next());//{ value: undefined, done: true }\n```\n③ Iterator接口返回的遍历器，原生具备next方法。\n\n>   有三类数据结构原生具备Iterator接口：数组、类似数组的对象、Set和Map结构\n\n能调用遍历器接口的\n1. for...of\n1. Array.from()\n1. Map(), Set(), WeakMap(), WeakSet()（比如new Map([['a',1],['b',2]])）\n1. Promise.all()\n1. Promise.race()\n```javascript\nvar map = new Map();\nconsole.log(map[Symbol.iterator] === map.entries)//true\nvar arr = new Array();\nconsole.log(arr[Symbol.iterator] === arr.values)//true\nvar set = new Set();\nconsole.log(set[Symbol.iterator] === set.values)//true\n```\n> 其他数据结构（主要是对象）如果需要Iterator接口,都需要自己部署。\n```javascript\nvar students = {}\nstudents[Symbol.iterator] = function() {\n let index = 1;\n return {\n  next() {\n   return {done: index>10, value: index++}\n  }\n }\n}\nfor(var i of students) {\n console.log(i);\n}//\n```\n\n# es6\n## 字符串的扩展\n\n### includes(), startsWith(), endsWith()\n\nJavaScript 只有indexOf方法，可以用来确定一个字符串是否包含在另一个字符串中。ES6 又提供了三种新方法。\n\nincludes()：返回布尔值，表示是否找到了参数字符串。             第二参数数字 表示起始位置\nstartsWith()：返回布尔值，表示参数字符串是否在原字符串的头部。 第二参数数字 表示起始位置\nendsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部。   第二参数数字 表示截止位置\n\n```javascript\nlet s = 'Hello world!';\n\ns.startsWith('world', 6); // true\ns.endsWith('Hello', 5); // true\ns.includes('Hello', 6); // false\n\n```\n### repeat()\nrepeat方法返回一个新字符串，表示将原字符串重复n次。\n\n```javascript\n'x'.repeat(3); // \"xxx\"\n'hello'.repeat(2); // \"hellohello\"\n'na'.repeat(0); // \"\"\n\n```\n正小数,向下取整\n0- -1小数 为 -0  视为 0\n\n参数字符串,NaN 会优先转为数字,转不了的话 为0\n\n## padStart()，padEnd()\n\n```javascript\n'x'.padStart(5, 'ab') // 'ababx'\n'x'.padStart(4, 'ab') // 'abax'\n\n'x'.padEnd(5, 'ab') // 'xabab'\n'x'.padEnd(4, 'ab') // 'xaba'\n\n```\n如果用来补全的字符串与原字符串，两长度之和超过了指定的最小长度，则会截去超出位数的补全字符串。\n\n如果省略第二个参数，默认使用空格补全长度。\n```javascript\n'abc'.padStart(10, '0123456789')\n// '0123456abc'\n\n'x'.padStart(4) // '   x'\n'x'.padEnd(4) // 'x   '\n```\npadStart的常见用途是为数值补全指定位数。下面代码生成 10 位的数值字符串。\n\n另一个用途是提示字符串格式\n```javascript\n'1'.padStart(10, '0') // \"0000000001\"\n'12'.padStart(10, '0') // \"0000000012\"\n'123456'.padStart(10, '0') // \"0000123456\"\n\n'12'.padStart(10, 'YYYY-MM-DD') // \"YYYY-MM-12\"\n'09-12'.padStart(10, 'YYYY-MM-DD') // \"YYYY-09-12\"\n```\n\n## matchAll()\nmatchAll方法返回一个正则表达式在当前字符串的所有匹配，详见《正则的扩展》的一章\n\n## 模板字符串 `${变量名}`\n\n```javascript\nlet a = 'xiaojw'\nlet b =`我是${a}哟!`\nconsole.log(`可以直接换行\n哟!`)\n```\n\n## 正则的扩展\n\n### 1.RegExp 构造函数 \n```javascript\n// 允许\nvar regex = new RegExp('xyz', 'i');\nvar regex = new RegExp(/xyz/i);\n// 等价于\nvar regex = /xyz/i;\n// es5不允许 es6允许\nvar regex = new RegExp(/xyz/, 'i');\n\n```\n### 2.字符串的正则方法\n字符串对象共有 4 个方法，可以使用正则表达式：match()、replace()、search()和split()。\n\n### 3.u修饰符\nES6 对正则表达式添加了u修饰符，含义为“Unicode 模式”，用来正确处理大于\\uFFFF的 Unicode 字符。也就是说，会正确处理四个字节的 UTF-16 编码\n\n\n```javascript\n// 点字符\nvar s = '𠮷';\n\n/^.$/.test(s); // false\n/^.$/u.test(s); // true\n// 如果不添加u修饰符，正则表达式就会认为字符串为两个字符，从而匹配失败。\n\n// 2.Unicode 字符表示法\n/\\u{61}/.test('a'); // false\n/\\u{61}/u.test('a'); // true\n/\\u{20BB7}/u.test('𠮷'); // true\n\n// 3.量词\n/a{2}/.test('aa'); // true\n/a{2}/u.test('aa'); // true\n/𠮷{2}/.test('𠮷𠮷'); // false\n/𠮷{2}/u.test('𠮷𠮷'); // true\n\n// 4.预定义模式\n/^\\S$/.test('𠮷'); // false\n/^\\S$/u.test('𠮷'); // true\n\n// 返回字符串长度的函数\nfunction codePointLength(text) {\n  var result = text.match(/[\\s\\S]/gu);\n  return result ? result.length : 0;\n}\nvar s = '𠮷𠮷';\ns.length; // 4\ncodePointLength(s) // 2\n\n// 5.i 修饰符\n/[a-z]/i.test('\\u212A'); // false\n/[a-z]/iu.test('\\u212A'); // true\n```\n### 4.RegExp.prototype.unicode 属性\n```javascript\nconst r1 = /hello/;\nconst r2 = /hello/u;\n\nr1.unicode; // false\nr2.unicode; // true\n\n```\n### 5.y 修饰符\ny修饰符与g修饰符类似,全局搜索\n但与g不同的地方是需要严格从上一次匹配的位置进行下一次匹配 且y修饰符号隐含了头部匹配的标志^。\n```javascript\nvar s = 'aaa_aa_a';\nvar r1 = /a+/g;\nvar r2 = /a+/y;\n\nr1.exec(s) // [\"aaa\"]\nr2.exec(s) // [\"aaa\"]\n\nr1.exec(s) // [\"aa\"]  剩余字符 _aa_a\nr2.exec(s) // null    剩余字符 _aa_a   _匹配不上a\n\n```\n### 6.RegExp.prototype.sticky 属性\n与y修饰符相匹配，ES6 的正则实例对象多了sticky属性，表示是否设置了y修饰符。\n```javascript\nvar r = /hello\\d/y;\nr.sticky // true\n```\n### 7.RegExp.prototype.flags\nES6 为正则表达式新增了flags属性，会返回正则表达式的修饰符。\n\n### 8.s 修饰符：dotAll 模式\n这被称为dotAll模式，即点（dot）代表一切字符。但是有两个例外。一个是四个字节的 UTF-16 字符，这个可以用u修饰符解决；另一个是行终止符（line terminator character）。\n\n1.U+000A 换行符（\\n）\n2.U+000D 回车符（\\r）\n3.U+2028 行分隔符（line separator）\n4.U+2029 段分隔符（paragraph separator\n\n所以，正则表达式还引入了一个dotAll属性，返回一个布尔值，表示该正则表达式是否处在dotAll模式。\n\n### 9.后行断言\n\n(pattern) ：  匹配 pattern 并获取这一匹配，所获取的匹配可以从产生的 Matches 集合得到。 \n(?:pattern) ：匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。 \n(?!pattern) ：匹配 !pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。 \n(?=pattern) ：正向预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。\n\n\n(pattern)匹配pattern并捕获该匹配的子表达式.可以使用 $0...$9属性从结果\"匹配\"集合中检索捕获的匹配.若要匹配括号字符(),请使用\"\"或者\"\"或者\"\".\n\n(?:pattern)匹配pattern但不捕获该匹配的子表达式,即它是一个非捕获匹配,不存储供以后使用的匹配.这对于用\"或\"字符(|)组合模式部件的情况很有用.\n  例如,与\"industry|industries\"相比,\"industr(?:y|ies)\"是一个更加经济的表达式.\n\nlet RegExp = /industr(y|ies)/      // 存储\nlet RegExp1 = /industr(?:y|ies)/   // ?:不存储\nlet result1 = 'industry'.match(RegExp)\nlet result2 = 'industries'.match(RegExp)\n\nlet result3 = 'industry'.match(RegExp1)\nlet result4 = 'industries'.match(RegExp1)\n\t  \n(?=pattern)执行正向预测先行搜索的子表达式,该表达式匹配处于匹配 pattern 的字符串的起始点的字符串.它是一个非捕获匹配,即不能捕获供以后使用的匹配.\n  例如,\"Windows (?=95| 98| NT| 2000)\"与\"Windows 2000\"中的\"Windows\"匹配,但不与\"Windows 3.1\"中的\"Windows\"匹配.\n        预测先行不占用字符,即发生匹配后,下一匹配的搜索紧随上一匹配之后,而不是在组成预测先行的字符后.\n\n(?!pattern)执行反向预测先行搜索的子表达式,该表达式匹配不处于匹配 pattern 的字符串的起始点的搜索字符串.它是一个非捕获匹配,即不能捕获供以后使用的匹配.\n  例如,\"Windows (?!95| 98| NT| 2000)\"与\"Windows 3.1\"中的\"Windows\"匹配,但不与\"Windows 2000\"中的\"Windows\"匹配.\n        预测先行不占用字符,即发生匹配后,下一匹配的搜索紧随上一匹配之后,而不是在组成预测先行的字符后.\n\n--------------------- \n作者：warmsmellofcolitas \n来源：CSDN \n原文：https://blog.csdn.net/warmsmellofcolitas/article/details/79403706 \n版权声明：本文为博主原创文章，转载请附上博文链接！\n\n### 10.Unicode 属性类\nES2018 引入了一种新的类的写法\\p{...}和\\P{...}，允许正则表达式匹配符合 Unicode 某种属性的所有字符。\n```javascript\nconst regexGreekSymbol = /\\p{Script=Greek}/u;\nregexGreekSymbol.test('π') // true\n```\n上面代码中，\\p{Script=Greek}指定匹配一个希腊文字母，所以匹配π成功\n\nUnicode 属性类要指定属性名和属性值\n对于某些属性，可以只写属性名，或者只写属性值。\n```javascript\n/\\p{UnicodePropertyName=UnicodePropertyValue}/\n/\\p{UnicodePropertyName}/\n/\\p{UnicodePropertyValue}/\n```\n\\P{…}是\\p{…}的反向匹配，即匹配不满足条件的字符。\n注意，这两种类只对 Unicode 有效，所以使用的时候一定要加上u修饰符。如果不加u修饰符，正则表达式使用\\p和\\P会报错，ECMAScript 预留了这两个类。\n由于 Unicode 的各种属性非常多，所以这种新的类的表达能力非常强\n```javascript\nconst regex = /^\\p{Decimal_Number}+$/u;\nregex.test('𝟏𝟐𝟑𝟜𝟝𝟞𝟩𝟪𝟫𝟬𝟭𝟮𝟯𝟺𝟻𝟼'); // true\n```\n上面代码中，属性类指定匹配所有十进制字符，可以看到各种字型的十进制字符都会匹配成功。\n\n\\p{Number}甚至能匹配罗马数字。\n```javascript\n// 匹配所有数字\nconst regex = /^\\p{Number}+$/u;\nregex.test('²³¹¼½¾'); // true\nregex.test('㉛㉜㉝'); // true\nregex.test('ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫ'); // true\n```\n例子\n```javascript\n// 匹配所有空格\n/\\p{White_Space}/\n\n// 匹配各种文字的所有字母，等同于 Unicode 版的 \\w\n/[\\p{Alphabetic}\\p{Mark}\\p{Decimal_Number}\\p{Connector_Punctuation}\\p{Join_Control}]/\n\n// 匹配各种文字的所有非字母的字符，等同于 Unicode 版的 \\W\n/[^\\p{Alphabetic}\\p{Mark}\\p{Decimal_Number}\\p{Connector_Punctuation}\\p{Join_Control}]/\n\n// 匹配 Emoji\n/\\p{Emoji_Modifier_Base}\\p{Emoji_Modifier}?|\\p{Emoji_Presentation}|\\p{Emoji}\\uFE0F/gu\n\n// 匹配所有的箭头字符\nconst regexArrows = /^\\p{Block=Arrows}+$/u;\nregexArrows.test('←↑→↓↔↕↖↗↘↙⇏⇐⇑⇒⇓⇔⇕⇖⇗⇘⇙⇧⇩') // true\n```\n### 11.具名组匹配\n正则表达式使用圆括号进行组匹配。\n```javascript\nconst RE_DATE = /(\\d{4})-(\\d{2})-(\\d{2})/;\n```\n上面代码中，正则表达式里面有三组圆括号。使用exec方法，就可以将这三组匹配结果提取出来\n```javascript\nconst RE_DATE = /(\\d{4})-(\\d{2})-(\\d{2})/;\n\nconst matchObj = RE_DATE.exec('1999-12-31');\nconst year = matchObj[1]; // 1999\nconst month = matchObj[2]; // 12\nconst day = matchObj[3]; // 31\n```\n组匹配的一个问题是，每一组的匹配含义不容易看出来，而且只能用数字序号（比如matchObj[1]）引用，要是组的顺序变了，引用的时候就必须修改序号。\n\nES2018 引入了具名组匹配（Named Capture Groups），允许为每一个组匹配指定一个名字，既便于阅读代码，又便于引用。\n```javascript\nconst RE_DATE = /(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/;\n\nconst matchObj = RE_DATE.exec('1999-12-31');\nconst year = matchObj.groups.year; // 1999\nconst month = matchObj.groups.month; // 12\nconst day = matchObj.groups.day; // 31\n// 数字序号（matchObj[1]）依然有效\n```\n没有找到匹配,属性值就是undefined\n\n#### 解构赋值和替换\n有了具名组匹配以后，可以使用解构赋值直接从匹配结果上为变量赋值。\n```javascript\nlet {groups: {one, two}} = /^(?<one>.*):(?<two>.*)$/u.exec('foo:bar');\none  // foo\ntwo  // bar\n```\n字符串替换时，使用$<组名>引用具名组\n```javascript\nlet re = /(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/u;\n\n'2015-01-02'.replace(re, '$<day>/$<month>/$<year>')\n// '02/01/2015'\n```\n上面代码中，replace方法的第二个参数是一个字符串，而不是正则表达式。\n\nreplace方法的第二个参数也可以是函数，该函数的参数序列如下。\n```javascript\n'2015-01-02'.replace(re, (\n   matched, // 整个匹配结果 2015-01-02\n   capture1, // 第一个组匹配 2015\n   capture2, // 第二个组匹配 01\n   capture3, // 第三个组匹配 02\n   position, // 匹配开始的位置 0\n   S, // 原字符串 2015-01-02\n   groups // 具名组构成的一个对象 {year, month, day}\n ) => {\n let {day, month, year} = groups;\n return `${day}/${month}/${year}`;\n});\n```\n具名组匹配在原来的基础上，新增了最后一个函数参数：具名组构成的一个对象。函数内部可以直接对这个对象进行解构赋值。\n\n#### 引用\n如果要在正则表达式内部引用某个“具名组匹配”，可以使用\\k<组名>的写法。\n\n```javascript\nconst RE_TWICE = /^(?<word>[a-z]+)!\\k<word>$/;\nRE_TWICE.test('abc!abc'); // true\nRE_TWICE.test('abc!ab'); // false\n```\n数字引用（\\1）依然有效\n```javascript\nconst RE_TWICE = /^(?<word>[a-z]+)!\\1$/;\nRE_TWICE.test('abc!abc'); // true\nRE_TWICE.test('abc!ab'); // false\n```\n这两种引用语法还可以同时使用。\n```javascript\nconst RE_TWICE = /^(?<word>[a-z]+)!\\k<word>!\\1$/;\nRE_TWICE.test('abc!abc!abc') // true\nRE_TWICE.test('abc!abc!ab') // false\n```\n\n### 12.String.prototype.matchAll\n如果一个正则表达式在字符串里面有多个匹配，现在一般使用g修饰符或y修饰符，在循环里面逐一取出。\n\n```javascript\nvar regex = /t(e)(st(\\d?))/g;\nvar string = 'test1test2test3';\n\nvar matches = [];\nvar match;\nwhile (match = regex.exec(string)) {\n  matches.push(match);\n}\n\nmatches\n// [\n//   [\"test1\", \"e\", \"st1\", \"1\", index: 0, input: \"test1test2test3\"],\n//   [\"test2\", \"e\", \"st2\", \"2\", index: 5, input: \"test1test2test3\"],\n//   [\"test3\", \"e\", \"st3\", \"3\", index: 10, input: \"test1test2test3\"]\n// ]\n```\n上面代码中，while循环取出每一轮的正则匹配，一共三轮。\n\n目前有一个提案，增加了String.prototype.matchAll方法，可以一次性取出所有匹配。不过，它返回的是一个遍历器（Iterator），而不是数组\n```javascript\nconst string = 'test1test2test3';\n\n// g 修饰符加不加都可以\nconst regex = /t(e)(st(\\d?))/g;\n\nfor (const match of string.matchAll(regex)) {\n  console.log(match);\n}\n// [\"test1\", \"e\", \"st1\", \"1\", index: 0, input: \"test1test2test3\"]\n// [\"test2\", \"e\", \"st2\", \"2\", index: 5, input: \"test1test2test3\"]\n// [\"test3\", \"e\", \"st3\", \"3\", index: 10, input: \"test1test2test3\"]\n```\n上面代码中，由于string.matchAll(regex)返回的是遍历器，所以可以用for...of循环取出。相对于返回数组，返回遍历器的好处在于，如果匹配结果是一个很大的数组，那么遍历器比较节省资源。\n\n遍历器转为数组是非常简单的，使用...运算符和Array.from方法就可以了。\n```javascript\n// 转为数组方法一\n[...string.matchAll(regex)]\n\n// 转为数组方法二\nArray.from(string.matchAll(regex));\n```\n###### 注:javascript中for...in和for...of的区别,以下括号中注的解释\n{\nfor...of循环是ES6引入的新的语法。\nfor...in遍历拿到的x是键（下标）。而for...of遍历拿到的x是值，但在对象中会提示不是一个迭代器报错。\n```javascript\nlet x;\nlet a = ['A','B','C'];\nlet b = {name: '刘德华',age: '18'};\n\nconsole.log(a.length);\nfor(x of a){\n　　console.log(x); //A,B,C\n}\nfor(x in a){\n　　console.log(x+':'+a[x]); //0:A,1:B,2:C\n}\n/*for(x of b){\n　　console.log(x); //报错\n}*/\nfor(x in b){\n　　console.log(x); //name,age\n}\n```\n}\n\n## 函数的扩展\n\n### 1.函数参数的默认值\n```javascript\nfunction log(x, y = 'World') {\n  console.log(x, y);\n}\n\nlog('Hello') // Hello World\nlog('Hello', 'China') // Hello China\nlog('Hello', '') // Hello\n```\n#### 与解构赋值默认值结合使用\n```javascript\nfunction fetch(url, { body = '', method = 'GET', headers = {} }) {\n  console.log(method);\n}\n\nfetch('http://example.com', {})\n// \"GET\"\n\nfetch('http://example.com')\n// 报错\n```\n两个写法的区别\n```javascript\n// 写法一\nfunction m1({x = 0, y = 0} = {}) {\n  return [x, y];\n}\n\n// 写法二\nfunction m2({x, y} = { x: 0, y: 0 }) {\n  return [x, y];\n}\n\n// 函数没有参数的情况\nm1() // [0, 0]\nm2() // [0, 0]\n\n// x 和 y 都有值的情况\nm1({x: 3, y: 8}) // [3, 8]\nm2({x: 3, y: 8}) // [3, 8]\n\n// x 有值，y 无值的情况\nm1({x: 3}) // [3, 0]\nm2({x: 3}) // [3, undefined]\n\n// x 和 y 都无值的情况\nm1({}) // [0, 0];\nm2({}) // [undefined, undefined]\n\nm1({z: 3}) // [0, 0]\nm2({z: 3}) // [undefined, undefined]\n```\n#### 函数的 length 属性\n指定了默认值以后，函数的length属性，将返回没有指定默认值的参数个数。也就是说，指定了默认值后，length属性将失真。\n```javascript\n(function (a) {}).length // 1\n(function (a = 5) {}).length // 0\n(function (a, b, c = 5) {}).length // 2\n```\n#### 作用域\n```javascript\nfunction f(y = x) {\n  let x = 2;\n  console.log(y);\n}\n\nf() // ReferenceError: x is not defined\n\n\n\nvar x = 1;\n\nfunction foo(x = x) {\n  // ...\n}\n\nfoo() // R\n\n```\n上面代码中，参数x = x形成一个单独作用域。实际执行的是let x = x，由于暂时性死区的原因，这行代码会报错”x 未定义“。\n\n```javascript\nlet foo = 'outer';\n\nfunction bar(func = () => foo) {\n  let foo = 'inner';\n  console.log(func());\n}\n\nbar(); // outer\n```\n上面代码中，函数bar的参数func的默认值是一个匿名函数，返回值为变量foo。函数参数形成的单独作用域里面，并没有定义变量foo，所以foo指向外层的全局变量foo，因此输出outer。\n### 2.rest 参数\nES6 引入 rest 参数（形式为...变量名），用于获取函数的多余参数，这样就不需要使用arguments对象了。rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中。\n\n```javascript\nfunction add(...values) {\n  let sum = 0;\n\n  for (var val of values) {\n    sum += val;\n  }\n\n  return sum;\n}\n\nadd(2, 5, 3) // 10\n``````\n\n### 3.尾调用优化\n#### 什么是尾调用\n尾调用（Tail Call）是函数式编程的一个重要概念，本身非常简单，一句话就能说清楚，就是指某个函数的最后一步是调用另一个函数。\n\n```javascript\nfunction f(x){\n  return g(x);\n}\n```\n上面代码中，函数f的最后一步是调用函数g，这就叫尾调用。\n\n以下三种情况，都不属于尾调用。\n```javascript\n// 情况一\nfunction f(x){\n  let y = g(x);\n  return y;\n}\n\n// 情况二\nfunction f(x){\n  return g(x) + 1;\n}\n\n// 情况三\nfunction f(x){\n  g(x);\n}\n```\n上面代码中，情况一是调用函数g之后，还有赋值操作，所以不属于尾调用，即使语义完全一样。情况二也属于调用后还有操作，即使写在一行内。情况三等同于下面的代码。\n```javascript\nfunction f(x){\n  g(x);\n  return undefined;\n}\n```\n尾调用不一定出现在函数尾部，只要是最后一步操作即可。\n```javascript\nfunction f(x) {\n  if (x > 0) {\n    return m(x)\n  }\n  return n(x);\n}\n```\n上面代码中，函数m和n都属于尾调用，因为它们都是函数f的最后一步操作。\n#### 尾调用优化\n函数调用会在内存形成一个“调用记录”，又称“调用帧”（call frame），保存调用位置和内部变量等信息。如果在函数A的内部调用函数B，那么在A的调用帧上方，还会形成一个B的调用帧。等到B运行结束，将结果返回到A，B的调用帧才会消失。如果函数B内部还调用函数C，那就还有一个C的调用帧，以此类推。所有的调用帧，就形成一个“调用栈”（call stack）\n\n尾调用由于是函数的最后一步操作，所以不需要保留外层函数的调用帧，因为调用位置、内部变量等信息都不会再用到了，只要直接用内层函数的调用帧，取代外层函数的调用帧就可以了。\n```javascript\nfunction f() {\n  let m = 1;\n  let n = 2;\n  return g(m + n);\n}\nf();\n\n// 等同于\nfunction f() {\n  return g(3);\n}\nf();\n\n// 等同于\ng(3);\n```\n\n这就叫做“尾调用优化”（Tail call optimization），即只保留内层函数的调用帧。如果所有函数都是尾调用，那么完全可以做到每次执行时，调用帧只有一项，这将大大节省内存。这就是“尾调用优化”的意义。\n\n注意，只有不再用到外层函数的内部变量，内层函数的调用帧才会取代外层函数的调用帧，否则就无法进行“尾调用优化”\n\n```javascript\nfunction addOne(a){\n  var one = 1;\n  function inner(b){\n    return b + one;\n  }\n  return inner(a);\n}\n```\n上面的函数不会进行尾调用优化，因为内层函数inner用到了外层函数addOne的内部变量one。\n\n### 尾递归\n函数调用自身，称为递归。如果尾调用自身，就称为尾递归。\n\n递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）。但对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。\n```javascript\nfunction factorial(n) {\n  if (n === 1) return 1;\n  return n * factorial(n - 1);\n}\n\nfactorial(5) // 120\n```\n上面代码是一个阶乘函数，计算n的阶乘，最多需要保存n个调用记录，复杂度 O(n) 。\n\n如果改写成尾递归，只保留一个调用记录，复杂度 O(1) 。\n```javascript\nfunction factorial(n, total) {\n  if (n === 1) return total;\n  return factorial(n - 1, n * total);\n}\n\nfactorial(5, 1) // 120\n```\n\n非尾递归的 Fibonacci 数列实现如下。\n```javascript\nfunction Fibonacci (n) {\n  if ( n <= 1 ) {return 1};\n\n  return Fibonacci(n - 1) + Fibonacci(n - 2);\n}\n\n// f(3) => f(2)+ f(1) => f(1)+ f(0) + f(1) => 3\nFibonacci(3) // 3\nFibonacci(10) // 89\nFibonacci(100) // 堆栈溢出\nFibonacci(500) // 堆栈溢出\n```\n尾递归优化过的 Fibonacci 数列实现如下。\n```javascript\nfunction Fibonacci2 (n , ac1 = 1 , ac2 = 1) {\n  if( n <= 1 ) {return ac2};\n //                  (序号,上一次结果,本次结果)  \n  return Fibonacci2 (n - 1, ac2, ac1 + ac2);\n}\n\n// f(3,1,1)= f(2,1,2)=f(1,2,3) = 3\n// f(4,1,1) = f(3,1,2)=f(2,2,3) =f(1,3,5) = 5\nFibonacci2(100) // 573147844013817200000\nFibonacci2(1000) // 7.0330367711422765e+208\nFibonacci2(10000) // Infinity\n```\n由此可见，“尾调用优化”对递归操作意义重大，所以一些函数式编程语言将其写入了语言规格。ES6 是如此，第一次明确规定，所有 ECMAScript 的实现，都必须部署“尾调用优化”。这就是说，ES6 中只要使用尾递归，就不会发生栈溢出，相对节省内存。\n\n### 严格模式\nES6 的尾调用优化只在严格模式下开启，正常模式是无效的。\n\n这是因为在正常模式下，函数内部有两个变量，可以跟踪函数的调用栈。\n\nfunc.arguments：返回调用时函数的参数。\nfunc.caller：返回调用当前函数的那个函数。\n尾调用优化发生时，函数的调用栈会改写，因此上面两个变量就会失真。严格模式禁用这两个变量，所以尾调用模式仅在严格模式下生效。\n```bash\nfunction restricted() {\n  'use strict';\n  restricted.caller;    // 报错\n  restricted.arguments; // 报错\n}\nrestricted();\n```\n\n### 尾递归优化的实现\n尾递归优化只在严格模式下生效，那么正常模式下，或者那些不支持该功能的环境中，有没有办法也使用尾递归优化呢？回答是可以的，就是自己实现尾递归优化。\n\n它的原理非常简单。尾递归之所以需要优化，原因是调用栈太多，造成溢出，那么只要减少调用栈，就不会溢出。怎么做可以减少调用栈呢？就是采用“循环”换掉“递归”。\n\n下面是一个正常的递归函数。\n```javascript\nfunction sum(x, y) {\n  if (y > 0) {\n    return sum(x + 1, y - 1);\n  } else {\n    return x;\n  }\n}\n\nsum(1, 100000)\n// Uncaught RangeError: Maximum call stack size exceeded(…)\n```\n上面代码中，sum是一个递归函数，参数x是需要累加的值，参数y控制递归次数。一旦指定sum递归 100000 次，就会报错，提示超出调用栈的最大次数。\n\n蹦床函数（trampoline）可以将递归执行转为循环执行。\n```javascript\nfunction trampoline(f) {\n  while (f && f instanceof Function) {\n    f = f();\n  }\n  return f;\n}\n```\n上面就是蹦床函数的一个实现，它接受一个函数f作为参数。只要f执行后返回一个函数，就继续执行。注意，这里是返回一个函数，然后执行该函数，而不是函数里面调用函数，这样就避免了递归执行，从而就消除了调用栈过大的问题。\n\n然后，要做的就是将原来的递归函数，改写为每一步返回另一个函数。\n```javascript\nfunction sum(x, y) {\n  if (y > 0) {\n    return sum.bind(null, x + 1, y - 1);\n  } else {\n    return x;\n  }\n}\n```\n","slug":"es6学习","published":1,"updated":"2018-11-26T03:45:51.137Z","layout":"post","photos":[],"link":"","_id":"cjqojjnm90000uwkql23yxb4x","content":"<h1 id=\"es5缺陷与es6解决\"><a href=\"#es5缺陷与es6解决\" class=\"headerlink\" title=\"es5缺陷与es6解决\"></a>es5缺陷与es6解决</h1><h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><p>ES5 内建的forEach方法 缺陷：无法使用break 中断 ，也不能使用return 语句返回到外层函数</p>\n<h3 id=\"1-遍历数组\"><a href=\"#1-遍历数组\" class=\"headerlink\" title=\"1. 遍历数组\"></a>1. 遍历数组</h3><p>① for forEach<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\">arr.name = <span class=\"string\">'a'</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index = <span class=\"number\">0</span>; index &lt; arr.length; index++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arr[index]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123; <span class=\"comment\">//ES5 内建的forEach方法 缺陷：无法使用break 中断 ，也不能使用return 语句返回到外层函数</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 结果都是：1,2,3,4,5,6</span></span><br></pre></td></tr></table></figure></p>\n<p>② 用 for-in ：作用于数组的 forfor -in 循环体除了遍历数组元素外,还会遍历自定义属性。比如数组有一个可枚举属性arr.a,循环将额外执行一次<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index <span class=\"keyword\">in</span> arr) &#123; <span class=\"comment\">// 千万别这样做</span></span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(arr[index]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 结果：1,2,3,4,5,6，a</span></span><br></pre></td></tr></table></figure></p>\n<p>for-in 是为普通对象设计的，赋值给index的值不是实际的数字1、2，而是字符串‘1’，‘2’<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index <span class=\"keyword\">in</span> arr) &#123;</span><br><span class=\"line\"> b = b+ index;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 结果：00，001，0012，00123，001234，0012345，0012345name</span></span><br></pre></td></tr></table></figure></p>\n<p>③ 使用 for-of：避开了for-in 的所有缺陷，可以正确响应 break、return 语句\\<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> value <span class=\"keyword\">of</span> arr)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 结果：1,2,3,4,5,6</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-for-of-循环便利其他集合\"><a href=\"#2-for-of-循环便利其他集合\" class=\"headerlink\" title=\"2.for-of 循环便利其他集合\"></a>2.for-of 循环便利其他集合</h3><p>① 遍历Set<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> words = <span class=\"string\">'a'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</span><br><span class=\"line\">s.add(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">s.add(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> word <span class=\"keyword\">of</span> s)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(word);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 结果：a，1</span></span><br></pre></td></tr></table></figure></p>\n<p>② 遍历Map<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"string\">'a'</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">map.set(<span class=\"string\">'b'</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">map.set(<span class=\"string\">'c'</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">map.set(<span class=\"string\">'d'</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> [key,value] <span class=\"keyword\">of</span> map)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key+<span class=\"string\">':'</span>+value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 结果：a：1，b：2，c：3，d：4</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-Iterator（遍历器）\"><a href=\"#3-Iterator（遍历器）\" class=\"headerlink\" title=\"3. Iterator（遍历器）\"></a>3. Iterator（遍历器）</h3><p>① 遍历器（Iterator）是一种接口规格，任何对象只要部署这个接口，就可以完成遍历操作。它的作用有两个，一是为各种数据结构，提供一个统一的、简便的接口，二是使得对象的属性能够按某种次序排列。</p>\n<p>② 遍历器的原理：遍历器提供了一个指针，指向当前对象的某个属性，使用next方法，就可以将指针移动到下一个属性。next方法返回一个包含value和done两个属性的对象。其中，value属性是当前遍历位置的值，done属性是一个布尔值，表示遍历是否结束。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//模拟遍历器原理</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeIterator</span>(<span class=\"params\">array</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> nextIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    next: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> nextIndex &lt; array.length ?</span><br><span class=\"line\">        &#123;<span class=\"attr\">value</span>: array[nextIndex++], <span class=\"attr\">done</span>: <span class=\"literal\">false</span>&#125; :</span><br><span class=\"line\">        &#123;<span class=\"attr\">value</span>: <span class=\"literal\">undefined</span>, <span class=\"attr\">done</span>: <span class=\"literal\">true</span>&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> it = makeIterator([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(it.next());<span class=\"comment\">//&#123; value: 'a', done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(it.next());<span class=\"comment\">//&#123; value: 'b', done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(it.next());<span class=\"comment\">//&#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>③ Iterator接口返回的遍历器，原生具备next方法。</p>\n<blockquote>\n<p>  有三类数据结构原生具备Iterator接口：数组、类似数组的对象、Set和Map结构</p>\n</blockquote>\n<p>能调用遍历器接口的</p>\n<ol>\n<li>for…of</li>\n<li>Array.from()</li>\n<li>Map(), Set(), WeakMap(), WeakSet()（比如new Map([[‘a’,1],[‘b’,2]])）</li>\n<li>Promise.all()</li>\n<li>Promise.race()<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map[<span class=\"built_in\">Symbol</span>.iterator] === map.entries)<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr[<span class=\"built_in\">Symbol</span>.iterator] === arr.values)<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set[<span class=\"built_in\">Symbol</span>.iterator] === set.values)<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>其他数据结构（主要是对象）如果需要Iterator接口,都需要自己部署。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> students = &#123;&#125;</span><br><span class=\"line\">students[<span class=\"built_in\">Symbol</span>.iterator] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">let</span> index = <span class=\"number\">1</span>;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">  next() &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> &#123;<span class=\"attr\">done</span>: index&gt;<span class=\"number\">10</span>, <span class=\"attr\">value</span>: index++&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">of</span> students) &#123;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">&#125;<span class=\"comment\">//</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h1 id=\"es6\"><a href=\"#es6\" class=\"headerlink\" title=\"es6\"></a>es6</h1><h2 id=\"字符串的扩展\"><a href=\"#字符串的扩展\" class=\"headerlink\" title=\"字符串的扩展\"></a>字符串的扩展</h2><h3 id=\"includes-startsWith-endsWith\"><a href=\"#includes-startsWith-endsWith\" class=\"headerlink\" title=\"includes(), startsWith(), endsWith()\"></a>includes(), startsWith(), endsWith()</h3><p>JavaScript 只有indexOf方法，可以用来确定一个字符串是否包含在另一个字符串中。ES6 又提供了三种新方法。</p>\n<p>includes()：返回布尔值，表示是否找到了参数字符串。             第二参数数字 表示起始位置<br>startsWith()：返回布尔值，表示参数字符串是否在原字符串的头部。 第二参数数字 表示起始位置<br>endsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部。   第二参数数字 表示截止位置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"string\">'Hello world!'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">s.startsWith(<span class=\"string\">'world'</span>, <span class=\"number\">6</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">s.endsWith(<span class=\"string\">'Hello'</span>, <span class=\"number\">5</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">s.includes(<span class=\"string\">'Hello'</span>, <span class=\"number\">6</span>); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"repeat\"><a href=\"#repeat\" class=\"headerlink\" title=\"repeat()\"></a>repeat()</h3><p>repeat方法返回一个新字符串，表示将原字符串重复n次。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'x'</span>.repeat(<span class=\"number\">3</span>); <span class=\"comment\">// \"xxx\"</span></span><br><span class=\"line\"><span class=\"string\">'hello'</span>.repeat(<span class=\"number\">2</span>); <span class=\"comment\">// \"hellohello\"</span></span><br><span class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"number\">0</span>); <span class=\"comment\">// \"\"</span></span><br></pre></td></tr></table></figure>\n<p>正小数,向下取整<br>0- -1小数 为 -0  视为 0</p>\n<p>参数字符串,NaN 会优先转为数字,转不了的话 为0</p>\n<h2 id=\"padStart-，padEnd\"><a href=\"#padStart-，padEnd\" class=\"headerlink\" title=\"padStart()，padEnd()\"></a>padStart()，padEnd()</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'x'</span>.padStart(<span class=\"number\">5</span>, <span class=\"string\">'ab'</span>) <span class=\"comment\">// 'ababx'</span></span><br><span class=\"line\"><span class=\"string\">'x'</span>.padStart(<span class=\"number\">4</span>, <span class=\"string\">'ab'</span>) <span class=\"comment\">// 'abax'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'x'</span>.padEnd(<span class=\"number\">5</span>, <span class=\"string\">'ab'</span>) <span class=\"comment\">// 'xabab'</span></span><br><span class=\"line\"><span class=\"string\">'x'</span>.padEnd(<span class=\"number\">4</span>, <span class=\"string\">'ab'</span>) <span class=\"comment\">// 'xaba'</span></span><br></pre></td></tr></table></figure>\n<p>如果用来补全的字符串与原字符串，两长度之和超过了指定的最小长度，则会截去超出位数的补全字符串。</p>\n<p>如果省略第二个参数，默认使用空格补全长度。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'abc'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'0123456789'</span>)</span><br><span class=\"line\"><span class=\"comment\">// '0123456abc'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'x'</span>.padStart(<span class=\"number\">4</span>) <span class=\"comment\">// '   x'</span></span><br><span class=\"line\"><span class=\"string\">'x'</span>.padEnd(<span class=\"number\">4</span>) <span class=\"comment\">// 'x   '</span></span><br></pre></td></tr></table></figure></p>\n<p>padStart的常见用途是为数值补全指定位数。下面代码生成 10 位的数值字符串。</p>\n<p>另一个用途是提示字符串格式<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'1'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'0'</span>) <span class=\"comment\">// \"0000000001\"</span></span><br><span class=\"line\"><span class=\"string\">'12'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'0'</span>) <span class=\"comment\">// \"0000000012\"</span></span><br><span class=\"line\"><span class=\"string\">'123456'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'0'</span>) <span class=\"comment\">// \"0000123456\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'12'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'YYYY-MM-DD'</span>) <span class=\"comment\">// \"YYYY-MM-12\"</span></span><br><span class=\"line\"><span class=\"string\">'09-12'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'YYYY-MM-DD'</span>) <span class=\"comment\">// \"YYYY-09-12\"</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"matchAll\"><a href=\"#matchAll\" class=\"headerlink\" title=\"matchAll()\"></a>matchAll()</h2><p>matchAll方法返回一个正则表达式在当前字符串的所有匹配，详见《正则的扩展》的一章</p>\n<h2 id=\"模板字符串-变量名\"><a href=\"#模板字符串-变量名\" class=\"headerlink\" title=\"模板字符串 ${变量名}\"></a>模板字符串 <code>${变量名}</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">'xiaojw'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b =<span class=\"string\">`我是<span class=\"subst\">$&#123;a&#125;</span>哟!`</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`可以直接换行</span></span><br><span class=\"line\"><span class=\"string\">哟!`</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"正则的扩展\"><a href=\"#正则的扩展\" class=\"headerlink\" title=\"正则的扩展\"></a>正则的扩展</h2><h3 id=\"1-RegExp-构造函数\"><a href=\"#1-RegExp-构造函数\" class=\"headerlink\" title=\"1.RegExp 构造函数\"></a>1.RegExp 构造函数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 允许</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> regex = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'xyz'</span>, <span class=\"string\">'i'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> regex = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/xyz/i</span>);</span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> regex = <span class=\"regexp\">/xyz/i</span>;</span><br><span class=\"line\"><span class=\"comment\">// es5不允许 es6允许</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> regex = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/xyz/</span>, <span class=\"string\">'i'</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-字符串的正则方法\"><a href=\"#2-字符串的正则方法\" class=\"headerlink\" title=\"2.字符串的正则方法\"></a>2.字符串的正则方法</h3><p>字符串对象共有 4 个方法，可以使用正则表达式：match()、replace()、search()和split()。</p>\n<h3 id=\"3-u修饰符\"><a href=\"#3-u修饰符\" class=\"headerlink\" title=\"3.u修饰符\"></a>3.u修饰符</h3><p>ES6 对正则表达式添加了u修饰符，含义为“Unicode 模式”，用来正确处理大于\\uFFFF的 Unicode 字符。也就是说，会正确处理四个字节的 UTF-16 编码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 点字符</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'𠮷'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">/^.$/.test(s); <span class=\"comment\">// false</span></span><br><span class=\"line\">/^.$/u.test(s); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// 如果不添加u修饰符，正则表达式就会认为字符串为两个字符，从而匹配失败。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.Unicode 字符表示法</span></span><br><span class=\"line\">/\\u&#123;<span class=\"number\">61</span>&#125;/.test(<span class=\"string\">'a'</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\">/\\u&#123;<span class=\"number\">61</span>&#125;/u.test(<span class=\"string\">'a'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">/\\u&#123;<span class=\"number\">20</span>BB7&#125;/u.test(<span class=\"string\">'𠮷'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.量词</span></span><br><span class=\"line\">/a&#123;<span class=\"number\">2</span>&#125;/.test(<span class=\"string\">'aa'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">/a&#123;<span class=\"number\">2</span>&#125;/u.test(<span class=\"string\">'aa'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">/𠮷&#123;<span class=\"number\">2</span>&#125;/.test(<span class=\"string\">'𠮷𠮷'</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\">/𠮷&#123;<span class=\"number\">2</span>&#125;/u.test(<span class=\"string\">'𠮷𠮷'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4.预定义模式</span></span><br><span class=\"line\">/^\\S$/.test(<span class=\"string\">'𠮷'</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\">/^\\S$/u.test(<span class=\"string\">'𠮷'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回字符串长度的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">codePointLength</span>(<span class=\"params\">text</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = text.match(<span class=\"regexp\">/[\\s\\S]/gu</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result ? result.length : <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'𠮷𠮷'</span>;</span><br><span class=\"line\">s.length; <span class=\"comment\">// 4</span></span><br><span class=\"line\">codePointLength(s) <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 5.i 修饰符</span></span><br><span class=\"line\">/[a-z]/i.test(<span class=\"string\">'\\u212A'</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\">/[a-z]/iu.test(<span class=\"string\">'\\u212A'</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-RegExp-prototype-unicode-属性\"><a href=\"#4-RegExp-prototype-unicode-属性\" class=\"headerlink\" title=\"4.RegExp.prototype.unicode 属性\"></a>4.RegExp.prototype.unicode 属性</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> r1 = <span class=\"regexp\">/hello/</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> r2 = <span class=\"regexp\">/hello/u</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">r1.unicode; <span class=\"comment\">// false</span></span><br><span class=\"line\">r2.unicode; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-y-修饰符\"><a href=\"#5-y-修饰符\" class=\"headerlink\" title=\"5.y 修饰符\"></a>5.y 修饰符</h3><p>y修饰符与g修饰符类似,全局搜索<br>但与g不同的地方是需要严格从上一次匹配的位置进行下一次匹配 且y修饰符号隐含了头部匹配的标志^。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'aaa_aa_a'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> r1 = <span class=\"regexp\">/a+/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> r2 = <span class=\"regexp\">/a+/y</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">r1.exec(s) <span class=\"comment\">// [\"aaa\"]</span></span><br><span class=\"line\">r2.exec(s) <span class=\"comment\">// [\"aaa\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\">r1.exec(s) <span class=\"comment\">// [\"aa\"]  剩余字符 _aa_a</span></span><br><span class=\"line\">r2.exec(s) <span class=\"comment\">// null    剩余字符 _aa_a   _匹配不上a</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"6-RegExp-prototype-sticky-属性\"><a href=\"#6-RegExp-prototype-sticky-属性\" class=\"headerlink\" title=\"6.RegExp.prototype.sticky 属性\"></a>6.RegExp.prototype.sticky 属性</h3><p>与y修饰符相匹配，ES6 的正则实例对象多了sticky属性，表示是否设置了y修饰符。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> r = <span class=\"regexp\">/hello\\d/y</span>;</span><br><span class=\"line\">r.sticky <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"7-RegExp-prototype-flags\"><a href=\"#7-RegExp-prototype-flags\" class=\"headerlink\" title=\"7.RegExp.prototype.flags\"></a>7.RegExp.prototype.flags</h3><p>ES6 为正则表达式新增了flags属性，会返回正则表达式的修饰符。</p>\n<h3 id=\"8-s-修饰符：dotAll-模式\"><a href=\"#8-s-修饰符：dotAll-模式\" class=\"headerlink\" title=\"8.s 修饰符：dotAll 模式\"></a>8.s 修饰符：dotAll 模式</h3><p>这被称为dotAll模式，即点（dot）代表一切字符。但是有两个例外。一个是四个字节的 UTF-16 字符，这个可以用u修饰符解决；另一个是行终止符（line terminator character）。</p>\n<p>1.U+000A 换行符（\\n）<br>2.U+000D 回车符（\\r）<br>3.U+2028 行分隔符（line separator）<br>4.U+2029 段分隔符（paragraph separator</p>\n<p>所以，正则表达式还引入了一个dotAll属性，返回一个布尔值，表示该正则表达式是否处在dotAll模式。</p>\n<h3 id=\"9-后行断言\"><a href=\"#9-后行断言\" class=\"headerlink\" title=\"9.后行断言\"></a>9.后行断言</h3><p>(pattern) ：  匹配 pattern 并获取这一匹配，所获取的匹配可以从产生的 Matches 集合得到。<br>(?:pattern) ：匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。<br>(?!pattern) ：匹配 !pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。<br>(?=pattern) ：正向预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</p>\n<p>(pattern)匹配pattern并捕获该匹配的子表达式.可以使用 $0…$9属性从结果”匹配”集合中检索捕获的匹配.若要匹配括号字符(),请使用””或者””或者””.</p>\n<p>(?:pattern)匹配pattern但不捕获该匹配的子表达式,即它是一个非捕获匹配,不存储供以后使用的匹配.这对于用”或”字符(|)组合模式部件的情况很有用.<br>  例如,与”industry|industries”相比,”industr(?:y|ies)”是一个更加经济的表达式.</p>\n<p>let RegExp = /industr(y|ies)/      // 存储<br>let RegExp1 = /industr(?:y|ies)/   // ?:不存储<br>let result1 = ‘industry’.match(RegExp)<br>let result2 = ‘industries’.match(RegExp)</p>\n<p>let result3 = ‘industry’.match(RegExp1)<br>let result4 = ‘industries’.match(RegExp1)</p>\n<p>(?=pattern)执行正向预测先行搜索的子表达式,该表达式匹配处于匹配 pattern 的字符串的起始点的字符串.它是一个非捕获匹配,即不能捕获供以后使用的匹配.<br>  例如,”Windows (?=95| 98| NT| 2000)”与”Windows 2000”中的”Windows”匹配,但不与”Windows 3.1”中的”Windows”匹配.<br>        预测先行不占用字符,即发生匹配后,下一匹配的搜索紧随上一匹配之后,而不是在组成预测先行的字符后.</p>\n<p>(?!pattern)执行反向预测先行搜索的子表达式,该表达式匹配不处于匹配 pattern 的字符串的起始点的搜索字符串.它是一个非捕获匹配,即不能捕获供以后使用的匹配.<br>  例如,”Windows (?!95| 98| NT| 2000)”与”Windows 3.1”中的”Windows”匹配,但不与”Windows 2000”中的”Windows”匹配.<br>        预测先行不占用字符,即发生匹配后,下一匹配的搜索紧随上一匹配之后,而不是在组成预测先行的字符后.</p>\n<hr>\n<p>作者：warmsmellofcolitas<br>来源：CSDN<br>原文：<a href=\"https://blog.csdn.net/warmsmellofcolitas/article/details/79403706\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/warmsmellofcolitas/article/details/79403706</a><br>版权声明：本文为博主原创文章，转载请附上博文链接！</p>\n<h3 id=\"10-Unicode-属性类\"><a href=\"#10-Unicode-属性类\" class=\"headerlink\" title=\"10.Unicode 属性类\"></a>10.Unicode 属性类</h3><p>ES2018 引入了一种新的类的写法\\p{…}和\\P{…}，允许正则表达式匹配符合 Unicode 某种属性的所有字符。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> regexGreekSymbol = <span class=\"regexp\">/\\p&#123;Script=Greek&#125;/u</span>;</span><br><span class=\"line\">regexGreekSymbol.test(<span class=\"string\">'π'</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，\\p{Script=Greek}指定匹配一个希腊文字母，所以匹配π成功</p>\n<p>Unicode 属性类要指定属性名和属性值<br>对于某些属性，可以只写属性名，或者只写属性值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/\\p&#123;UnicodePropertyName=UnicodePropertyValue&#125;/</span><br><span class=\"line\">/\\p&#123;UnicodePropertyName&#125;/</span><br><span class=\"line\">/\\p&#123;UnicodePropertyValue&#125;/</span><br></pre></td></tr></table></figure></p>\n<p>\\P{…}是\\p{…}的反向匹配，即匹配不满足条件的字符。<br>注意，这两种类只对 Unicode 有效，所以使用的时候一定要加上u修饰符。如果不加u修饰符，正则表达式使用\\p和\\P会报错，ECMAScript 预留了这两个类。<br>由于 Unicode 的各种属性非常多，所以这种新的类的表达能力非常强<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> regex = <span class=\"regexp\">/^\\p&#123;Decimal_Number&#125;+$/u</span>;</span><br><span class=\"line\">regex.test(<span class=\"string\">'𝟏𝟐𝟑𝟜𝟝𝟞𝟩𝟪𝟫𝟬𝟭𝟮𝟯𝟺𝟻𝟼'</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，属性类指定匹配所有十进制字符，可以看到各种字型的十进制字符都会匹配成功。</p>\n<p>\\p{Number}甚至能匹配罗马数字。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 匹配所有数字</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> regex = <span class=\"regexp\">/^\\p&#123;Number&#125;+$/u</span>;</span><br><span class=\"line\">regex.test(<span class=\"string\">'²³¹¼½¾'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">regex.test(<span class=\"string\">'㉛㉜㉝'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">regex.test(<span class=\"string\">'ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫ'</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n<p>例子<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 匹配所有空格</span></span><br><span class=\"line\">/\\p&#123;White_Space&#125;/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 匹配各种文字的所有字母，等同于 Unicode 版的 \\w</span></span><br><span class=\"line\">/[\\p&#123;Alphabetic&#125;\\p&#123;Mark&#125;\\p&#123;Decimal_Number&#125;\\p&#123;Connector_Punctuation&#125;\\p&#123;Join_Control&#125;]/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 匹配各种文字的所有非字母的字符，等同于 Unicode 版的 \\W</span></span><br><span class=\"line\">/[^\\p&#123;Alphabetic&#125;\\p&#123;Mark&#125;\\p&#123;Decimal_Number&#125;\\p&#123;Connector_Punctuation&#125;\\p&#123;Join_Control&#125;]/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 匹配 Emoji</span></span><br><span class=\"line\">/\\p&#123;Emoji_Modifier_Base&#125;\\p&#123;Emoji_Modifier&#125;?|\\p&#123;Emoji_Presentation&#125;|\\p&#123;Emoji&#125;\\uFE0F/gu</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 匹配所有的箭头字符</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> regexArrows = <span class=\"regexp\">/^\\p&#123;Block=Arrows&#125;+$/u</span>;</span><br><span class=\"line\">regexArrows.test(<span class=\"string\">'←↑→↓↔↕↖↗↘↙⇏⇐⇑⇒⇓⇔⇕⇖⇗⇘⇙⇧⇩'</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"11-具名组匹配\"><a href=\"#11-具名组匹配\" class=\"headerlink\" title=\"11.具名组匹配\"></a>11.具名组匹配</h3><p>正则表达式使用圆括号进行组匹配。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> RE_DATE = <span class=\"regexp\">/(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)/</span>;</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，正则表达式里面有三组圆括号。使用exec方法，就可以将这三组匹配结果提取出来<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> RE_DATE = <span class=\"regexp\">/(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)/</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> matchObj = RE_DATE.exec(<span class=\"string\">'1999-12-31'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> year = matchObj[<span class=\"number\">1</span>]; <span class=\"comment\">// 1999</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> month = matchObj[<span class=\"number\">2</span>]; <span class=\"comment\">// 12</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> day = matchObj[<span class=\"number\">3</span>]; <span class=\"comment\">// 31</span></span><br></pre></td></tr></table></figure></p>\n<p>组匹配的一个问题是，每一组的匹配含义不容易看出来，而且只能用数字序号（比如matchObj[1]）引用，要是组的顺序变了，引用的时候就必须修改序号。</p>\n<p>ES2018 引入了具名组匹配（Named Capture Groups），允许为每一个组匹配指定一个名字，既便于阅读代码，又便于引用。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> RE_DATE = <span class=\"regexp\">/(?&lt;year&gt;\\d&#123;4&#125;)-(?&lt;month&gt;\\d&#123;2&#125;)-(?&lt;day&gt;\\d&#123;2&#125;)/</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> matchObj = RE_DATE.exec(<span class=\"string\">'1999-12-31'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> year = matchObj.groups.year; <span class=\"comment\">// 1999</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> month = matchObj.groups.month; <span class=\"comment\">// 12</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> day = matchObj.groups.day; <span class=\"comment\">// 31</span></span><br><span class=\"line\"><span class=\"comment\">// 数字序号（matchObj[1]）依然有效</span></span><br></pre></td></tr></table></figure></p>\n<p>没有找到匹配,属性值就是undefined</p>\n<h4 id=\"解构赋值和替换\"><a href=\"#解构赋值和替换\" class=\"headerlink\" title=\"解构赋值和替换\"></a>解构赋值和替换</h4><p>有了具名组匹配以后，可以使用解构赋值直接从匹配结果上为变量赋值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">groups</span>: &#123;one, two&#125;&#125; = <span class=\"regexp\">/^(?&lt;one&gt;.*):(?&lt;two&gt;.*)$/u</span>.exec(<span class=\"string\">'foo:bar'</span>);</span><br><span class=\"line\">one  <span class=\"comment\">// foo</span></span><br><span class=\"line\">two  <span class=\"comment\">// bar</span></span><br></pre></td></tr></table></figure></p>\n<p>字符串替换时，使用$&lt;组名&gt;引用具名组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> re = <span class=\"regexp\">/(?&lt;year&gt;\\d&#123;4&#125;)-(?&lt;month&gt;\\d&#123;2&#125;)-(?&lt;day&gt;\\d&#123;2&#125;)/u</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'2015-01-02'</span>.replace(re, <span class=\"string\">'$&lt;day&gt;/$&lt;month&gt;/$&lt;year&gt;'</span>)</span><br><span class=\"line\"><span class=\"comment\">// '02/01/2015'</span></span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，replace方法的第二个参数是一个字符串，而不是正则表达式。</p>\n<p>replace方法的第二个参数也可以是函数，该函数的参数序列如下。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'2015-01-02'</span>.replace(re, (</span><br><span class=\"line\">   matched, <span class=\"comment\">// 整个匹配结果 2015-01-02</span></span><br><span class=\"line\">   capture1, <span class=\"comment\">// 第一个组匹配 2015</span></span><br><span class=\"line\">   capture2, <span class=\"comment\">// 第二个组匹配 01</span></span><br><span class=\"line\">   capture3, <span class=\"comment\">// 第三个组匹配 02</span></span><br><span class=\"line\">   position, <span class=\"comment\">// 匹配开始的位置 0</span></span><br><span class=\"line\">   S, <span class=\"comment\">// 原字符串 2015-01-02</span></span><br><span class=\"line\">   groups <span class=\"comment\">// 具名组构成的一个对象 &#123;year, month, day&#125;</span></span><br><span class=\"line\"> ) =&gt; &#123;</span><br><span class=\"line\"> <span class=\"keyword\">let</span> &#123;day, month, year&#125; = groups;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;day&#125;</span>/<span class=\"subst\">$&#123;month&#125;</span>/<span class=\"subst\">$&#123;year&#125;</span>`</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>具名组匹配在原来的基础上，新增了最后一个函数参数：具名组构成的一个对象。函数内部可以直接对这个对象进行解构赋值。</p>\n<h4 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h4><p>如果要在正则表达式内部引用某个“具名组匹配”，可以使用\\k&lt;组名&gt;的写法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> RE_TWICE = <span class=\"regexp\">/^(?&lt;word&gt;[a-z]+)!\\k&lt;word&gt;$/</span>;</span><br><span class=\"line\">RE_TWICE.test(<span class=\"string\">'abc!abc'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">RE_TWICE.test(<span class=\"string\">'abc!ab'</span>); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>数字引用（\\1）依然有效<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> RE_TWICE = <span class=\"regexp\">/^(?&lt;word&gt;[a-z]+)!\\1$/</span>;</span><br><span class=\"line\">RE_TWICE.test(<span class=\"string\">'abc!abc'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">RE_TWICE.test(<span class=\"string\">'abc!ab'</span>); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></p>\n<p>这两种引用语法还可以同时使用。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> RE_TWICE = <span class=\"regexp\">/^(?&lt;word&gt;[a-z]+)!\\k&lt;word&gt;!\\1$/</span>;</span><br><span class=\"line\">RE_TWICE.test(<span class=\"string\">'abc!abc!abc'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">RE_TWICE.test(<span class=\"string\">'abc!abc!ab'</span>) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"12-String-prototype-matchAll\"><a href=\"#12-String-prototype-matchAll\" class=\"headerlink\" title=\"12.String.prototype.matchAll\"></a>12.String.prototype.matchAll</h3><p>如果一个正则表达式在字符串里面有多个匹配，现在一般使用g修饰符或y修饰符，在循环里面逐一取出。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> regex = <span class=\"regexp\">/t(e)(st(\\d?))/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> string = <span class=\"string\">'test1test2test3'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> matches = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> match;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (match = regex.exec(string)) &#123;</span><br><span class=\"line\">  matches.push(match);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">matches</span><br><span class=\"line\"><span class=\"comment\">// [</span></span><br><span class=\"line\"><span class=\"comment\">//   [\"test1\", \"e\", \"st1\", \"1\", index: 0, input: \"test1test2test3\"],</span></span><br><span class=\"line\"><span class=\"comment\">//   [\"test2\", \"e\", \"st2\", \"2\", index: 5, input: \"test1test2test3\"],</span></span><br><span class=\"line\"><span class=\"comment\">//   [\"test3\", \"e\", \"st3\", \"3\", index: 10, input: \"test1test2test3\"]</span></span><br><span class=\"line\"><span class=\"comment\">// ]</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，while循环取出每一轮的正则匹配，一共三轮。</p>\n<p>目前有一个提案，增加了String.prototype.matchAll方法，可以一次性取出所有匹配。不过，它返回的是一个遍历器（Iterator），而不是数组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> string = <span class=\"string\">'test1test2test3'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// g 修饰符加不加都可以</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> regex = <span class=\"regexp\">/t(e)(st(\\d?))/g</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> match <span class=\"keyword\">of</span> string.matchAll(regex)) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(match);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// [\"test1\", \"e\", \"st1\", \"1\", index: 0, input: \"test1test2test3\"]</span></span><br><span class=\"line\"><span class=\"comment\">// [\"test2\", \"e\", \"st2\", \"2\", index: 5, input: \"test1test2test3\"]</span></span><br><span class=\"line\"><span class=\"comment\">// [\"test3\", \"e\", \"st3\", \"3\", index: 10, input: \"test1test2test3\"]</span></span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，由于string.matchAll(regex)返回的是遍历器，所以可以用for…of循环取出。相对于返回数组，返回遍历器的好处在于，如果匹配结果是一个很大的数组，那么遍历器比较节省资源。</p>\n<p>遍历器转为数组是非常简单的，使用…运算符和Array.from方法就可以了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 转为数组方法一</span></span><br><span class=\"line\">[...string.matchAll(regex)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 转为数组方法二</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(string.matchAll(regex));</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"注-javascript中for…in和for…of的区别-以下括号中注的解释\"><a href=\"#注-javascript中for…in和for…of的区别-以下括号中注的解释\" class=\"headerlink\" title=\"注:javascript中for…in和for…of的区别,以下括号中注的解释\"></a>注:javascript中for…in和for…of的区别,以下括号中注的解释</h6><p>{<br>for…of循环是ES6引入的新的语法。<br>for…in遍历拿到的x是键（下标）。而for…of遍历拿到的x是值，但在对象中会提示不是一个迭代器报错。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'刘德华'</span>,<span class=\"attr\">age</span>: <span class=\"string\">'18'</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.length);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(x <span class=\"keyword\">of</span> a)&#123;</span><br><span class=\"line\">　　<span class=\"built_in\">console</span>.log(x); <span class=\"comment\">//A,B,C</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(x <span class=\"keyword\">in</span> a)&#123;</span><br><span class=\"line\">　　<span class=\"built_in\">console</span>.log(x+<span class=\"string\">':'</span>+a[x]); <span class=\"comment\">//0:A,1:B,2:C</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*for(x of b)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">　　console.log(x); //报错</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(x <span class=\"keyword\">in</span> b)&#123;</span><br><span class=\"line\">　　<span class=\"built_in\">console</span>.log(x); <span class=\"comment\">//name,age</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>}</p>\n<h2 id=\"函数的扩展\"><a href=\"#函数的扩展\" class=\"headerlink\" title=\"函数的扩展\"></a>函数的扩展</h2><h3 id=\"1-函数参数的默认值\"><a href=\"#1-函数参数的默认值\" class=\"headerlink\" title=\"1.函数参数的默认值\"></a>1.函数参数的默认值</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\">x, y = <span class=\"string\">'World'</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x, y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">log(<span class=\"string\">'Hello'</span>) <span class=\"comment\">// Hello World</span></span><br><span class=\"line\">log(<span class=\"string\">'Hello'</span>, <span class=\"string\">'China'</span>) <span class=\"comment\">// Hello China</span></span><br><span class=\"line\">log(<span class=\"string\">'Hello'</span>, <span class=\"string\">''</span>) <span class=\"comment\">// Hello</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"与解构赋值默认值结合使用\"><a href=\"#与解构赋值默认值结合使用\" class=\"headerlink\" title=\"与解构赋值默认值结合使用\"></a>与解构赋值默认值结合使用</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetch</span>(<span class=\"params\">url, &#123; body = <span class=\"string\">''</span>, method = <span class=\"string\">'GET'</span>, headers = &#123;&#125; &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(method);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fetch(<span class=\"string\">'http://example.com'</span>, &#123;&#125;)</span><br><span class=\"line\"><span class=\"comment\">// \"GET\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">fetch(<span class=\"string\">'http://example.com'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n<p>两个写法的区别<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 写法一</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">m1</span>(<span class=\"params\">&#123;x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写法二</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">m2</span>(<span class=\"params\">&#123;x, y&#125; = &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span> &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数没有参数的情况</span></span><br><span class=\"line\">m1() <span class=\"comment\">// [0, 0]</span></span><br><span class=\"line\">m2() <span class=\"comment\">// [0, 0]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// x 和 y 都有值的情况</span></span><br><span class=\"line\">m1(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span>&#125;) <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\">m2(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span>&#125;) <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// x 有值，y 无值的情况</span></span><br><span class=\"line\">m1(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>&#125;) <span class=\"comment\">// [3, 0]</span></span><br><span class=\"line\">m2(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>&#125;) <span class=\"comment\">// [3, undefined]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// x 和 y 都无值的情况</span></span><br><span class=\"line\">m1(&#123;&#125;) <span class=\"comment\">// [0, 0];</span></span><br><span class=\"line\">m2(&#123;&#125;) <span class=\"comment\">// [undefined, undefined]</span></span><br><span class=\"line\"></span><br><span class=\"line\">m1(&#123;<span class=\"attr\">z</span>: <span class=\"number\">3</span>&#125;) <span class=\"comment\">// [0, 0]</span></span><br><span class=\"line\">m2(&#123;<span class=\"attr\">z</span>: <span class=\"number\">3</span>&#125;) <span class=\"comment\">// [undefined, undefined]</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"函数的-length-属性\"><a href=\"#函数的-length-属性\" class=\"headerlink\" title=\"函数的 length 属性\"></a>函数的 length 属性</h4><p>指定了默认值以后，函数的length属性，将返回没有指定默认值的参数个数。也就是说，指定了默认值后，length属性将失真。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a</span>) </span>&#123;&#125;).length <span class=\"comment\">// 1</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a = <span class=\"number\">5</span></span>) </span>&#123;&#125;).length <span class=\"comment\">// 0</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b, c = <span class=\"number\">5</span></span>) </span>&#123;&#125;).length <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">y = x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> x = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f() <span class=\"comment\">// ReferenceError: x is not defined</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">x = x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo() <span class=\"comment\">// R</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，参数x = x形成一个单独作用域。实际执行的是let x = x，由于暂时性死区的原因，这行代码会报错”x 未定义“。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo = <span class=\"string\">'outer'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\">func = (</span>) =&gt; <span class=\"title\">foo</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> foo = <span class=\"string\">'inner'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(func());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bar(); <span class=\"comment\">// outer</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，函数bar的参数func的默认值是一个匿名函数，返回值为变量foo。函数参数形成的单独作用域里面，并没有定义变量foo，所以foo指向外层的全局变量foo，因此输出outer。</p>\n<h3 id=\"2-rest-参数\"><a href=\"#2-rest-参数\" class=\"headerlink\" title=\"2.rest 参数\"></a>2.rest 参数</h3><p>ES6 引入 rest 参数（形式为…变量名），用于获取函数的多余参数，这样就不需要使用arguments对象了。rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">...values</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> val <span class=\"keyword\">of</span> values) &#123;</span><br><span class=\"line\">    sum += val;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>) <span class=\"comment\">// 10</span></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-尾调用优化\"><a href=\"#3-尾调用优化\" class=\"headerlink\" title=\"3.尾调用优化\"></a>3.尾调用优化</h3><h4 id=\"什么是尾调用\"><a href=\"#什么是尾调用\" class=\"headerlink\" title=\"什么是尾调用\"></a>什么是尾调用</h4><p>尾调用（Tail Call）是函数式编程的一个重要概念，本身非常简单，一句话就能说清楚，就是指某个函数的最后一步是调用另一个函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> g(x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中，函数f的最后一步是调用函数g，这就叫尾调用。</p>\n<p>以下三种情况，都不属于尾调用。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 情况一</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> y = g(x);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 情况二</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> g(x) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 情况三</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">  g(x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，情况一是调用函数g之后，还有赋值操作，所以不属于尾调用，即使语义完全一样。情况二也属于调用后还有操作，即使写在一行内。情况三等同于下面的代码。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">  g(x);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>尾调用不一定出现在函数尾部，只要是最后一步操作即可。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m(x)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> n(x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，函数m和n都属于尾调用，因为它们都是函数f的最后一步操作。</p>\n<h4 id=\"尾调用优化\"><a href=\"#尾调用优化\" class=\"headerlink\" title=\"尾调用优化\"></a>尾调用优化</h4><p>函数调用会在内存形成一个“调用记录”，又称“调用帧”（call frame），保存调用位置和内部变量等信息。如果在函数A的内部调用函数B，那么在A的调用帧上方，还会形成一个B的调用帧。等到B运行结束，将结果返回到A，B的调用帧才会消失。如果函数B内部还调用函数C，那就还有一个C的调用帧，以此类推。所有的调用帧，就形成一个“调用栈”（call stack）</p>\n<p>尾调用由于是函数的最后一步操作，所以不需要保留外层函数的调用帧，因为调用位置、内部变量等信息都不会再用到了，只要直接用内层函数的调用帧，取代外层函数的调用帧就可以了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> m = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> n = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> g(m + n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> g(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">g(<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure></p>\n<p>这就叫做“尾调用优化”（Tail call optimization），即只保留内层函数的调用帧。如果所有函数都是尾调用，那么完全可以做到每次执行时，调用帧只有一项，这将大大节省内存。这就是“尾调用优化”的意义。</p>\n<p>注意，只有不再用到外层函数的内部变量，内层函数的调用帧才会取代外层函数的调用帧，否则就无法进行“尾调用优化”</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addOne</span>(<span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> one = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inner</span>(<span class=\"params\">b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b + one;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> inner(a);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的函数不会进行尾调用优化，因为内层函数inner用到了外层函数addOne的内部变量one。</p>\n<h3 id=\"尾递归\"><a href=\"#尾递归\" class=\"headerlink\" title=\"尾递归\"></a>尾递归</h3><p>函数调用自身，称为递归。如果尾调用自身，就称为尾递归。</p>\n<p>递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）。但对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> n * factorial(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">factorial(<span class=\"number\">5</span>) <span class=\"comment\">// 120</span></span><br></pre></td></tr></table></figure></p>\n<p>上面代码是一个阶乘函数，计算n的阶乘，最多需要保存n个调用记录，复杂度 O(n) 。</p>\n<p>如果改写成尾递归，只保留一个调用记录，复杂度 O(1) 。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">n, total</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> total;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> factorial(n - <span class=\"number\">1</span>, n * total);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">factorial(<span class=\"number\">5</span>, <span class=\"number\">1</span>) <span class=\"comment\">// 120</span></span><br></pre></td></tr></table></figure></p>\n<p>非尾递归的 Fibonacci 数列实现如下。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fibonacci</span> (<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( n &lt;= <span class=\"number\">1</span> ) &#123;<span class=\"keyword\">return</span> <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> Fibonacci(n - <span class=\"number\">1</span>) + Fibonacci(n - <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// f(3) =&gt; f(2)+ f(1) =&gt; f(1)+ f(0) + f(1) =&gt; 3</span></span><br><span class=\"line\">Fibonacci(<span class=\"number\">3</span>) <span class=\"comment\">// 3</span></span><br><span class=\"line\">Fibonacci(<span class=\"number\">10</span>) <span class=\"comment\">// 89</span></span><br><span class=\"line\">Fibonacci(<span class=\"number\">100</span>) <span class=\"comment\">// 堆栈溢出</span></span><br><span class=\"line\">Fibonacci(<span class=\"number\">500</span>) <span class=\"comment\">// 堆栈溢出</span></span><br></pre></td></tr></table></figure></p>\n<p>尾递归优化过的 Fibonacci 数列实现如下。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fibonacci2</span> (<span class=\"params\">n , ac1 = <span class=\"number\">1</span> , ac2 = <span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>( n &lt;= <span class=\"number\">1</span> ) &#123;<span class=\"keyword\">return</span> ac2&#125;;</span><br><span class=\"line\"> <span class=\"comment\">//                  (序号,上一次结果,本次结果)  </span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> Fibonacci2 (n - <span class=\"number\">1</span>, ac2, ac1 + ac2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// f(3,1,1)= f(2,1,2)=f(1,2,3) = 3</span></span><br><span class=\"line\"><span class=\"comment\">// f(4,1,1) = f(3,1,2)=f(2,2,3) =f(1,3,5) = 5</span></span><br><span class=\"line\">Fibonacci2(<span class=\"number\">100</span>) <span class=\"comment\">// 573147844013817200000</span></span><br><span class=\"line\">Fibonacci2(<span class=\"number\">1000</span>) <span class=\"comment\">// 7.0330367711422765e+208</span></span><br><span class=\"line\">Fibonacci2(<span class=\"number\">10000</span>) <span class=\"comment\">// Infinity</span></span><br></pre></td></tr></table></figure></p>\n<p>由此可见，“尾调用优化”对递归操作意义重大，所以一些函数式编程语言将其写入了语言规格。ES6 是如此，第一次明确规定，所有 ECMAScript 的实现，都必须部署“尾调用优化”。这就是说，ES6 中只要使用尾递归，就不会发生栈溢出，相对节省内存。</p>\n<h3 id=\"严格模式\"><a href=\"#严格模式\" class=\"headerlink\" title=\"严格模式\"></a>严格模式</h3><p>ES6 的尾调用优化只在严格模式下开启，正常模式是无效的。</p>\n<p>这是因为在正常模式下，函数内部有两个变量，可以跟踪函数的调用栈。</p>\n<p>func.arguments：返回调用时函数的参数。<br>func.caller：返回调用当前函数的那个函数。<br>尾调用优化发生时，函数的调用栈会改写，因此上面两个变量就会失真。严格模式禁用这两个变量，所以尾调用模式仅在严格模式下生效。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">restricted</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"string\">'use strict'</span>;</span><br><span class=\"line\">  restricted.caller;    // 报错</span><br><span class=\"line\">  restricted.arguments; // 报错</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">restricted();</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"尾递归优化的实现\"><a href=\"#尾递归优化的实现\" class=\"headerlink\" title=\"尾递归优化的实现\"></a>尾递归优化的实现</h3><p>尾递归优化只在严格模式下生效，那么正常模式下，或者那些不支持该功能的环境中，有没有办法也使用尾递归优化呢？回答是可以的，就是自己实现尾递归优化。</p>\n<p>它的原理非常简单。尾递归之所以需要优化，原因是调用栈太多，造成溢出，那么只要减少调用栈，就不会溢出。怎么做可以减少调用栈呢？就是采用“循环”换掉“递归”。</p>\n<p>下面是一个正常的递归函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (y &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum(x + <span class=\"number\">1</span>, y - <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sum(<span class=\"number\">1</span>, <span class=\"number\">100000</span>)</span><br><span class=\"line\"><span class=\"comment\">// Uncaught RangeError: Maximum call stack size exceeded(…)</span></span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，sum是一个递归函数，参数x是需要累加的值，参数y控制递归次数。一旦指定sum递归 100000 次，就会报错，提示超出调用栈的最大次数。</p>\n<p>蹦床函数（trampoline）可以将递归执行转为循环执行。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trampoline</span>(<span class=\"params\">f</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (f &amp;&amp; f <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span>) &#123;</span><br><span class=\"line\">    f = f();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> f;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面就是蹦床函数的一个实现，它接受一个函数f作为参数。只要f执行后返回一个函数，就继续执行。注意，这里是返回一个函数，然后执行该函数，而不是函数里面调用函数，这样就避免了递归执行，从而就消除了调用栈过大的问题。</p>\n<p>然后，要做的就是将原来的递归函数，改写为每一步返回另一个函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (y &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum.bind(<span class=\"literal\">null</span>, x + <span class=\"number\">1</span>, y - <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"es5缺陷与es6解决\"><a href=\"#es5缺陷与es6解决\" class=\"headerlink\" title=\"es5缺陷与es6解决\"></a>es5缺陷与es6解决</h1><h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><p>ES5 内建的forEach方法 缺陷：无法使用break 中断 ，也不能使用return 语句返回到外层函数</p>\n<h3 id=\"1-遍历数组\"><a href=\"#1-遍历数组\" class=\"headerlink\" title=\"1. 遍历数组\"></a>1. 遍历数组</h3><p>① for forEach<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\">arr.name = <span class=\"string\">'a'</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index = <span class=\"number\">0</span>; index &lt; arr.length; index++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arr[index]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123; <span class=\"comment\">//ES5 内建的forEach方法 缺陷：无法使用break 中断 ，也不能使用return 语句返回到外层函数</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 结果都是：1,2,3,4,5,6</span></span><br></pre></td></tr></table></figure></p>\n<p>② 用 for-in ：作用于数组的 forfor -in 循环体除了遍历数组元素外,还会遍历自定义属性。比如数组有一个可枚举属性arr.a,循环将额外执行一次<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index <span class=\"keyword\">in</span> arr) &#123; <span class=\"comment\">// 千万别这样做</span></span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(arr[index]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 结果：1,2,3,4,5,6，a</span></span><br></pre></td></tr></table></figure></p>\n<p>for-in 是为普通对象设计的，赋值给index的值不是实际的数字1、2，而是字符串‘1’，‘2’<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index <span class=\"keyword\">in</span> arr) &#123;</span><br><span class=\"line\"> b = b+ index;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 结果：00，001，0012，00123，001234，0012345，0012345name</span></span><br></pre></td></tr></table></figure></p>\n<p>③ 使用 for-of：避开了for-in 的所有缺陷，可以正确响应 break、return 语句\\<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> value <span class=\"keyword\">of</span> arr)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 结果：1,2,3,4,5,6</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-for-of-循环便利其他集合\"><a href=\"#2-for-of-循环便利其他集合\" class=\"headerlink\" title=\"2.for-of 循环便利其他集合\"></a>2.for-of 循环便利其他集合</h3><p>① 遍历Set<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> words = <span class=\"string\">'a'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</span><br><span class=\"line\">s.add(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">s.add(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> word <span class=\"keyword\">of</span> s)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(word);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 结果：a，1</span></span><br></pre></td></tr></table></figure></p>\n<p>② 遍历Map<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"string\">'a'</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">map.set(<span class=\"string\">'b'</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">map.set(<span class=\"string\">'c'</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">map.set(<span class=\"string\">'d'</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> [key,value] <span class=\"keyword\">of</span> map)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key+<span class=\"string\">':'</span>+value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 结果：a：1，b：2，c：3，d：4</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-Iterator（遍历器）\"><a href=\"#3-Iterator（遍历器）\" class=\"headerlink\" title=\"3. Iterator（遍历器）\"></a>3. Iterator（遍历器）</h3><p>① 遍历器（Iterator）是一种接口规格，任何对象只要部署这个接口，就可以完成遍历操作。它的作用有两个，一是为各种数据结构，提供一个统一的、简便的接口，二是使得对象的属性能够按某种次序排列。</p>\n<p>② 遍历器的原理：遍历器提供了一个指针，指向当前对象的某个属性，使用next方法，就可以将指针移动到下一个属性。next方法返回一个包含value和done两个属性的对象。其中，value属性是当前遍历位置的值，done属性是一个布尔值，表示遍历是否结束。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//模拟遍历器原理</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeIterator</span>(<span class=\"params\">array</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> nextIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    next: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> nextIndex &lt; array.length ?</span><br><span class=\"line\">        &#123;<span class=\"attr\">value</span>: array[nextIndex++], <span class=\"attr\">done</span>: <span class=\"literal\">false</span>&#125; :</span><br><span class=\"line\">        &#123;<span class=\"attr\">value</span>: <span class=\"literal\">undefined</span>, <span class=\"attr\">done</span>: <span class=\"literal\">true</span>&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> it = makeIterator([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(it.next());<span class=\"comment\">//&#123; value: 'a', done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(it.next());<span class=\"comment\">//&#123; value: 'b', done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(it.next());<span class=\"comment\">//&#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>③ Iterator接口返回的遍历器，原生具备next方法。</p>\n<blockquote>\n<p>  有三类数据结构原生具备Iterator接口：数组、类似数组的对象、Set和Map结构</p>\n</blockquote>\n<p>能调用遍历器接口的</p>\n<ol>\n<li>for…of</li>\n<li>Array.from()</li>\n<li>Map(), Set(), WeakMap(), WeakSet()（比如new Map([[‘a’,1],[‘b’,2]])）</li>\n<li>Promise.all()</li>\n<li>Promise.race()<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map[<span class=\"built_in\">Symbol</span>.iterator] === map.entries)<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr[<span class=\"built_in\">Symbol</span>.iterator] === arr.values)<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set[<span class=\"built_in\">Symbol</span>.iterator] === set.values)<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>其他数据结构（主要是对象）如果需要Iterator接口,都需要自己部署。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> students = &#123;&#125;</span><br><span class=\"line\">students[<span class=\"built_in\">Symbol</span>.iterator] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">let</span> index = <span class=\"number\">1</span>;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">  next() &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> &#123;<span class=\"attr\">done</span>: index&gt;<span class=\"number\">10</span>, <span class=\"attr\">value</span>: index++&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">of</span> students) &#123;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">&#125;<span class=\"comment\">//</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h1 id=\"es6\"><a href=\"#es6\" class=\"headerlink\" title=\"es6\"></a>es6</h1><h2 id=\"字符串的扩展\"><a href=\"#字符串的扩展\" class=\"headerlink\" title=\"字符串的扩展\"></a>字符串的扩展</h2><h3 id=\"includes-startsWith-endsWith\"><a href=\"#includes-startsWith-endsWith\" class=\"headerlink\" title=\"includes(), startsWith(), endsWith()\"></a>includes(), startsWith(), endsWith()</h3><p>JavaScript 只有indexOf方法，可以用来确定一个字符串是否包含在另一个字符串中。ES6 又提供了三种新方法。</p>\n<p>includes()：返回布尔值，表示是否找到了参数字符串。             第二参数数字 表示起始位置<br>startsWith()：返回布尔值，表示参数字符串是否在原字符串的头部。 第二参数数字 表示起始位置<br>endsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部。   第二参数数字 表示截止位置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"string\">'Hello world!'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">s.startsWith(<span class=\"string\">'world'</span>, <span class=\"number\">6</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">s.endsWith(<span class=\"string\">'Hello'</span>, <span class=\"number\">5</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">s.includes(<span class=\"string\">'Hello'</span>, <span class=\"number\">6</span>); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"repeat\"><a href=\"#repeat\" class=\"headerlink\" title=\"repeat()\"></a>repeat()</h3><p>repeat方法返回一个新字符串，表示将原字符串重复n次。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'x'</span>.repeat(<span class=\"number\">3</span>); <span class=\"comment\">// \"xxx\"</span></span><br><span class=\"line\"><span class=\"string\">'hello'</span>.repeat(<span class=\"number\">2</span>); <span class=\"comment\">// \"hellohello\"</span></span><br><span class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"number\">0</span>); <span class=\"comment\">// \"\"</span></span><br></pre></td></tr></table></figure>\n<p>正小数,向下取整<br>0- -1小数 为 -0  视为 0</p>\n<p>参数字符串,NaN 会优先转为数字,转不了的话 为0</p>\n<h2 id=\"padStart-，padEnd\"><a href=\"#padStart-，padEnd\" class=\"headerlink\" title=\"padStart()，padEnd()\"></a>padStart()，padEnd()</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'x'</span>.padStart(<span class=\"number\">5</span>, <span class=\"string\">'ab'</span>) <span class=\"comment\">// 'ababx'</span></span><br><span class=\"line\"><span class=\"string\">'x'</span>.padStart(<span class=\"number\">4</span>, <span class=\"string\">'ab'</span>) <span class=\"comment\">// 'abax'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'x'</span>.padEnd(<span class=\"number\">5</span>, <span class=\"string\">'ab'</span>) <span class=\"comment\">// 'xabab'</span></span><br><span class=\"line\"><span class=\"string\">'x'</span>.padEnd(<span class=\"number\">4</span>, <span class=\"string\">'ab'</span>) <span class=\"comment\">// 'xaba'</span></span><br></pre></td></tr></table></figure>\n<p>如果用来补全的字符串与原字符串，两长度之和超过了指定的最小长度，则会截去超出位数的补全字符串。</p>\n<p>如果省略第二个参数，默认使用空格补全长度。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'abc'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'0123456789'</span>)</span><br><span class=\"line\"><span class=\"comment\">// '0123456abc'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'x'</span>.padStart(<span class=\"number\">4</span>) <span class=\"comment\">// '   x'</span></span><br><span class=\"line\"><span class=\"string\">'x'</span>.padEnd(<span class=\"number\">4</span>) <span class=\"comment\">// 'x   '</span></span><br></pre></td></tr></table></figure></p>\n<p>padStart的常见用途是为数值补全指定位数。下面代码生成 10 位的数值字符串。</p>\n<p>另一个用途是提示字符串格式<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'1'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'0'</span>) <span class=\"comment\">// \"0000000001\"</span></span><br><span class=\"line\"><span class=\"string\">'12'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'0'</span>) <span class=\"comment\">// \"0000000012\"</span></span><br><span class=\"line\"><span class=\"string\">'123456'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'0'</span>) <span class=\"comment\">// \"0000123456\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'12'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'YYYY-MM-DD'</span>) <span class=\"comment\">// \"YYYY-MM-12\"</span></span><br><span class=\"line\"><span class=\"string\">'09-12'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'YYYY-MM-DD'</span>) <span class=\"comment\">// \"YYYY-09-12\"</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"matchAll\"><a href=\"#matchAll\" class=\"headerlink\" title=\"matchAll()\"></a>matchAll()</h2><p>matchAll方法返回一个正则表达式在当前字符串的所有匹配，详见《正则的扩展》的一章</p>\n<h2 id=\"模板字符串-变量名\"><a href=\"#模板字符串-变量名\" class=\"headerlink\" title=\"模板字符串 ${变量名}\"></a>模板字符串 <code>${变量名}</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">'xiaojw'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b =<span class=\"string\">`我是<span class=\"subst\">$&#123;a&#125;</span>哟!`</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`可以直接换行</span></span><br><span class=\"line\"><span class=\"string\">哟!`</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"正则的扩展\"><a href=\"#正则的扩展\" class=\"headerlink\" title=\"正则的扩展\"></a>正则的扩展</h2><h3 id=\"1-RegExp-构造函数\"><a href=\"#1-RegExp-构造函数\" class=\"headerlink\" title=\"1.RegExp 构造函数\"></a>1.RegExp 构造函数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 允许</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> regex = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'xyz'</span>, <span class=\"string\">'i'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> regex = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/xyz/i</span>);</span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> regex = <span class=\"regexp\">/xyz/i</span>;</span><br><span class=\"line\"><span class=\"comment\">// es5不允许 es6允许</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> regex = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/xyz/</span>, <span class=\"string\">'i'</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-字符串的正则方法\"><a href=\"#2-字符串的正则方法\" class=\"headerlink\" title=\"2.字符串的正则方法\"></a>2.字符串的正则方法</h3><p>字符串对象共有 4 个方法，可以使用正则表达式：match()、replace()、search()和split()。</p>\n<h3 id=\"3-u修饰符\"><a href=\"#3-u修饰符\" class=\"headerlink\" title=\"3.u修饰符\"></a>3.u修饰符</h3><p>ES6 对正则表达式添加了u修饰符，含义为“Unicode 模式”，用来正确处理大于\\uFFFF的 Unicode 字符。也就是说，会正确处理四个字节的 UTF-16 编码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 点字符</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'𠮷'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">/^.$/.test(s); <span class=\"comment\">// false</span></span><br><span class=\"line\">/^.$/u.test(s); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// 如果不添加u修饰符，正则表达式就会认为字符串为两个字符，从而匹配失败。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.Unicode 字符表示法</span></span><br><span class=\"line\">/\\u&#123;<span class=\"number\">61</span>&#125;/.test(<span class=\"string\">'a'</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\">/\\u&#123;<span class=\"number\">61</span>&#125;/u.test(<span class=\"string\">'a'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">/\\u&#123;<span class=\"number\">20</span>BB7&#125;/u.test(<span class=\"string\">'𠮷'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.量词</span></span><br><span class=\"line\">/a&#123;<span class=\"number\">2</span>&#125;/.test(<span class=\"string\">'aa'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">/a&#123;<span class=\"number\">2</span>&#125;/u.test(<span class=\"string\">'aa'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">/𠮷&#123;<span class=\"number\">2</span>&#125;/.test(<span class=\"string\">'𠮷𠮷'</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\">/𠮷&#123;<span class=\"number\">2</span>&#125;/u.test(<span class=\"string\">'𠮷𠮷'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4.预定义模式</span></span><br><span class=\"line\">/^\\S$/.test(<span class=\"string\">'𠮷'</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\">/^\\S$/u.test(<span class=\"string\">'𠮷'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回字符串长度的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">codePointLength</span>(<span class=\"params\">text</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = text.match(<span class=\"regexp\">/[\\s\\S]/gu</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result ? result.length : <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'𠮷𠮷'</span>;</span><br><span class=\"line\">s.length; <span class=\"comment\">// 4</span></span><br><span class=\"line\">codePointLength(s) <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 5.i 修饰符</span></span><br><span class=\"line\">/[a-z]/i.test(<span class=\"string\">'\\u212A'</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\">/[a-z]/iu.test(<span class=\"string\">'\\u212A'</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-RegExp-prototype-unicode-属性\"><a href=\"#4-RegExp-prototype-unicode-属性\" class=\"headerlink\" title=\"4.RegExp.prototype.unicode 属性\"></a>4.RegExp.prototype.unicode 属性</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> r1 = <span class=\"regexp\">/hello/</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> r2 = <span class=\"regexp\">/hello/u</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">r1.unicode; <span class=\"comment\">// false</span></span><br><span class=\"line\">r2.unicode; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-y-修饰符\"><a href=\"#5-y-修饰符\" class=\"headerlink\" title=\"5.y 修饰符\"></a>5.y 修饰符</h3><p>y修饰符与g修饰符类似,全局搜索<br>但与g不同的地方是需要严格从上一次匹配的位置进行下一次匹配 且y修饰符号隐含了头部匹配的标志^。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'aaa_aa_a'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> r1 = <span class=\"regexp\">/a+/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> r2 = <span class=\"regexp\">/a+/y</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">r1.exec(s) <span class=\"comment\">// [\"aaa\"]</span></span><br><span class=\"line\">r2.exec(s) <span class=\"comment\">// [\"aaa\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\">r1.exec(s) <span class=\"comment\">// [\"aa\"]  剩余字符 _aa_a</span></span><br><span class=\"line\">r2.exec(s) <span class=\"comment\">// null    剩余字符 _aa_a   _匹配不上a</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"6-RegExp-prototype-sticky-属性\"><a href=\"#6-RegExp-prototype-sticky-属性\" class=\"headerlink\" title=\"6.RegExp.prototype.sticky 属性\"></a>6.RegExp.prototype.sticky 属性</h3><p>与y修饰符相匹配，ES6 的正则实例对象多了sticky属性，表示是否设置了y修饰符。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> r = <span class=\"regexp\">/hello\\d/y</span>;</span><br><span class=\"line\">r.sticky <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"7-RegExp-prototype-flags\"><a href=\"#7-RegExp-prototype-flags\" class=\"headerlink\" title=\"7.RegExp.prototype.flags\"></a>7.RegExp.prototype.flags</h3><p>ES6 为正则表达式新增了flags属性，会返回正则表达式的修饰符。</p>\n<h3 id=\"8-s-修饰符：dotAll-模式\"><a href=\"#8-s-修饰符：dotAll-模式\" class=\"headerlink\" title=\"8.s 修饰符：dotAll 模式\"></a>8.s 修饰符：dotAll 模式</h3><p>这被称为dotAll模式，即点（dot）代表一切字符。但是有两个例外。一个是四个字节的 UTF-16 字符，这个可以用u修饰符解决；另一个是行终止符（line terminator character）。</p>\n<p>1.U+000A 换行符（\\n）<br>2.U+000D 回车符（\\r）<br>3.U+2028 行分隔符（line separator）<br>4.U+2029 段分隔符（paragraph separator</p>\n<p>所以，正则表达式还引入了一个dotAll属性，返回一个布尔值，表示该正则表达式是否处在dotAll模式。</p>\n<h3 id=\"9-后行断言\"><a href=\"#9-后行断言\" class=\"headerlink\" title=\"9.后行断言\"></a>9.后行断言</h3><p>(pattern) ：  匹配 pattern 并获取这一匹配，所获取的匹配可以从产生的 Matches 集合得到。<br>(?:pattern) ：匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。<br>(?!pattern) ：匹配 !pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。<br>(?=pattern) ：正向预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</p>\n<p>(pattern)匹配pattern并捕获该匹配的子表达式.可以使用 $0…$9属性从结果”匹配”集合中检索捕获的匹配.若要匹配括号字符(),请使用””或者””或者””.</p>\n<p>(?:pattern)匹配pattern但不捕获该匹配的子表达式,即它是一个非捕获匹配,不存储供以后使用的匹配.这对于用”或”字符(|)组合模式部件的情况很有用.<br>  例如,与”industry|industries”相比,”industr(?:y|ies)”是一个更加经济的表达式.</p>\n<p>let RegExp = /industr(y|ies)/      // 存储<br>let RegExp1 = /industr(?:y|ies)/   // ?:不存储<br>let result1 = ‘industry’.match(RegExp)<br>let result2 = ‘industries’.match(RegExp)</p>\n<p>let result3 = ‘industry’.match(RegExp1)<br>let result4 = ‘industries’.match(RegExp1)</p>\n<p>(?=pattern)执行正向预测先行搜索的子表达式,该表达式匹配处于匹配 pattern 的字符串的起始点的字符串.它是一个非捕获匹配,即不能捕获供以后使用的匹配.<br>  例如,”Windows (?=95| 98| NT| 2000)”与”Windows 2000”中的”Windows”匹配,但不与”Windows 3.1”中的”Windows”匹配.<br>        预测先行不占用字符,即发生匹配后,下一匹配的搜索紧随上一匹配之后,而不是在组成预测先行的字符后.</p>\n<p>(?!pattern)执行反向预测先行搜索的子表达式,该表达式匹配不处于匹配 pattern 的字符串的起始点的搜索字符串.它是一个非捕获匹配,即不能捕获供以后使用的匹配.<br>  例如,”Windows (?!95| 98| NT| 2000)”与”Windows 3.1”中的”Windows”匹配,但不与”Windows 2000”中的”Windows”匹配.<br>        预测先行不占用字符,即发生匹配后,下一匹配的搜索紧随上一匹配之后,而不是在组成预测先行的字符后.</p>\n<hr>\n<p>作者：warmsmellofcolitas<br>来源：CSDN<br>原文：<a href=\"https://blog.csdn.net/warmsmellofcolitas/article/details/79403706\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/warmsmellofcolitas/article/details/79403706</a><br>版权声明：本文为博主原创文章，转载请附上博文链接！</p>\n<h3 id=\"10-Unicode-属性类\"><a href=\"#10-Unicode-属性类\" class=\"headerlink\" title=\"10.Unicode 属性类\"></a>10.Unicode 属性类</h3><p>ES2018 引入了一种新的类的写法\\p{…}和\\P{…}，允许正则表达式匹配符合 Unicode 某种属性的所有字符。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> regexGreekSymbol = <span class=\"regexp\">/\\p&#123;Script=Greek&#125;/u</span>;</span><br><span class=\"line\">regexGreekSymbol.test(<span class=\"string\">'π'</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，\\p{Script=Greek}指定匹配一个希腊文字母，所以匹配π成功</p>\n<p>Unicode 属性类要指定属性名和属性值<br>对于某些属性，可以只写属性名，或者只写属性值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/\\p&#123;UnicodePropertyName=UnicodePropertyValue&#125;/</span><br><span class=\"line\">/\\p&#123;UnicodePropertyName&#125;/</span><br><span class=\"line\">/\\p&#123;UnicodePropertyValue&#125;/</span><br></pre></td></tr></table></figure></p>\n<p>\\P{…}是\\p{…}的反向匹配，即匹配不满足条件的字符。<br>注意，这两种类只对 Unicode 有效，所以使用的时候一定要加上u修饰符。如果不加u修饰符，正则表达式使用\\p和\\P会报错，ECMAScript 预留了这两个类。<br>由于 Unicode 的各种属性非常多，所以这种新的类的表达能力非常强<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> regex = <span class=\"regexp\">/^\\p&#123;Decimal_Number&#125;+$/u</span>;</span><br><span class=\"line\">regex.test(<span class=\"string\">'𝟏𝟐𝟑𝟜𝟝𝟞𝟩𝟪𝟫𝟬𝟭𝟮𝟯𝟺𝟻𝟼'</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，属性类指定匹配所有十进制字符，可以看到各种字型的十进制字符都会匹配成功。</p>\n<p>\\p{Number}甚至能匹配罗马数字。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 匹配所有数字</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> regex = <span class=\"regexp\">/^\\p&#123;Number&#125;+$/u</span>;</span><br><span class=\"line\">regex.test(<span class=\"string\">'²³¹¼½¾'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">regex.test(<span class=\"string\">'㉛㉜㉝'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">regex.test(<span class=\"string\">'ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫ'</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n<p>例子<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 匹配所有空格</span></span><br><span class=\"line\">/\\p&#123;White_Space&#125;/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 匹配各种文字的所有字母，等同于 Unicode 版的 \\w</span></span><br><span class=\"line\">/[\\p&#123;Alphabetic&#125;\\p&#123;Mark&#125;\\p&#123;Decimal_Number&#125;\\p&#123;Connector_Punctuation&#125;\\p&#123;Join_Control&#125;]/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 匹配各种文字的所有非字母的字符，等同于 Unicode 版的 \\W</span></span><br><span class=\"line\">/[^\\p&#123;Alphabetic&#125;\\p&#123;Mark&#125;\\p&#123;Decimal_Number&#125;\\p&#123;Connector_Punctuation&#125;\\p&#123;Join_Control&#125;]/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 匹配 Emoji</span></span><br><span class=\"line\">/\\p&#123;Emoji_Modifier_Base&#125;\\p&#123;Emoji_Modifier&#125;?|\\p&#123;Emoji_Presentation&#125;|\\p&#123;Emoji&#125;\\uFE0F/gu</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 匹配所有的箭头字符</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> regexArrows = <span class=\"regexp\">/^\\p&#123;Block=Arrows&#125;+$/u</span>;</span><br><span class=\"line\">regexArrows.test(<span class=\"string\">'←↑→↓↔↕↖↗↘↙⇏⇐⇑⇒⇓⇔⇕⇖⇗⇘⇙⇧⇩'</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"11-具名组匹配\"><a href=\"#11-具名组匹配\" class=\"headerlink\" title=\"11.具名组匹配\"></a>11.具名组匹配</h3><p>正则表达式使用圆括号进行组匹配。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> RE_DATE = <span class=\"regexp\">/(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)/</span>;</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，正则表达式里面有三组圆括号。使用exec方法，就可以将这三组匹配结果提取出来<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> RE_DATE = <span class=\"regexp\">/(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)/</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> matchObj = RE_DATE.exec(<span class=\"string\">'1999-12-31'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> year = matchObj[<span class=\"number\">1</span>]; <span class=\"comment\">// 1999</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> month = matchObj[<span class=\"number\">2</span>]; <span class=\"comment\">// 12</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> day = matchObj[<span class=\"number\">3</span>]; <span class=\"comment\">// 31</span></span><br></pre></td></tr></table></figure></p>\n<p>组匹配的一个问题是，每一组的匹配含义不容易看出来，而且只能用数字序号（比如matchObj[1]）引用，要是组的顺序变了，引用的时候就必须修改序号。</p>\n<p>ES2018 引入了具名组匹配（Named Capture Groups），允许为每一个组匹配指定一个名字，既便于阅读代码，又便于引用。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> RE_DATE = <span class=\"regexp\">/(?&lt;year&gt;\\d&#123;4&#125;)-(?&lt;month&gt;\\d&#123;2&#125;)-(?&lt;day&gt;\\d&#123;2&#125;)/</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> matchObj = RE_DATE.exec(<span class=\"string\">'1999-12-31'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> year = matchObj.groups.year; <span class=\"comment\">// 1999</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> month = matchObj.groups.month; <span class=\"comment\">// 12</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> day = matchObj.groups.day; <span class=\"comment\">// 31</span></span><br><span class=\"line\"><span class=\"comment\">// 数字序号（matchObj[1]）依然有效</span></span><br></pre></td></tr></table></figure></p>\n<p>没有找到匹配,属性值就是undefined</p>\n<h4 id=\"解构赋值和替换\"><a href=\"#解构赋值和替换\" class=\"headerlink\" title=\"解构赋值和替换\"></a>解构赋值和替换</h4><p>有了具名组匹配以后，可以使用解构赋值直接从匹配结果上为变量赋值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">groups</span>: &#123;one, two&#125;&#125; = <span class=\"regexp\">/^(?&lt;one&gt;.*):(?&lt;two&gt;.*)$/u</span>.exec(<span class=\"string\">'foo:bar'</span>);</span><br><span class=\"line\">one  <span class=\"comment\">// foo</span></span><br><span class=\"line\">two  <span class=\"comment\">// bar</span></span><br></pre></td></tr></table></figure></p>\n<p>字符串替换时，使用$&lt;组名&gt;引用具名组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> re = <span class=\"regexp\">/(?&lt;year&gt;\\d&#123;4&#125;)-(?&lt;month&gt;\\d&#123;2&#125;)-(?&lt;day&gt;\\d&#123;2&#125;)/u</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'2015-01-02'</span>.replace(re, <span class=\"string\">'$&lt;day&gt;/$&lt;month&gt;/$&lt;year&gt;'</span>)</span><br><span class=\"line\"><span class=\"comment\">// '02/01/2015'</span></span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，replace方法的第二个参数是一个字符串，而不是正则表达式。</p>\n<p>replace方法的第二个参数也可以是函数，该函数的参数序列如下。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'2015-01-02'</span>.replace(re, (</span><br><span class=\"line\">   matched, <span class=\"comment\">// 整个匹配结果 2015-01-02</span></span><br><span class=\"line\">   capture1, <span class=\"comment\">// 第一个组匹配 2015</span></span><br><span class=\"line\">   capture2, <span class=\"comment\">// 第二个组匹配 01</span></span><br><span class=\"line\">   capture3, <span class=\"comment\">// 第三个组匹配 02</span></span><br><span class=\"line\">   position, <span class=\"comment\">// 匹配开始的位置 0</span></span><br><span class=\"line\">   S, <span class=\"comment\">// 原字符串 2015-01-02</span></span><br><span class=\"line\">   groups <span class=\"comment\">// 具名组构成的一个对象 &#123;year, month, day&#125;</span></span><br><span class=\"line\"> ) =&gt; &#123;</span><br><span class=\"line\"> <span class=\"keyword\">let</span> &#123;day, month, year&#125; = groups;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;day&#125;</span>/<span class=\"subst\">$&#123;month&#125;</span>/<span class=\"subst\">$&#123;year&#125;</span>`</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>具名组匹配在原来的基础上，新增了最后一个函数参数：具名组构成的一个对象。函数内部可以直接对这个对象进行解构赋值。</p>\n<h4 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h4><p>如果要在正则表达式内部引用某个“具名组匹配”，可以使用\\k&lt;组名&gt;的写法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> RE_TWICE = <span class=\"regexp\">/^(?&lt;word&gt;[a-z]+)!\\k&lt;word&gt;$/</span>;</span><br><span class=\"line\">RE_TWICE.test(<span class=\"string\">'abc!abc'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">RE_TWICE.test(<span class=\"string\">'abc!ab'</span>); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>数字引用（\\1）依然有效<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> RE_TWICE = <span class=\"regexp\">/^(?&lt;word&gt;[a-z]+)!\\1$/</span>;</span><br><span class=\"line\">RE_TWICE.test(<span class=\"string\">'abc!abc'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">RE_TWICE.test(<span class=\"string\">'abc!ab'</span>); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></p>\n<p>这两种引用语法还可以同时使用。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> RE_TWICE = <span class=\"regexp\">/^(?&lt;word&gt;[a-z]+)!\\k&lt;word&gt;!\\1$/</span>;</span><br><span class=\"line\">RE_TWICE.test(<span class=\"string\">'abc!abc!abc'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">RE_TWICE.test(<span class=\"string\">'abc!abc!ab'</span>) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"12-String-prototype-matchAll\"><a href=\"#12-String-prototype-matchAll\" class=\"headerlink\" title=\"12.String.prototype.matchAll\"></a>12.String.prototype.matchAll</h3><p>如果一个正则表达式在字符串里面有多个匹配，现在一般使用g修饰符或y修饰符，在循环里面逐一取出。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> regex = <span class=\"regexp\">/t(e)(st(\\d?))/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> string = <span class=\"string\">'test1test2test3'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> matches = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> match;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (match = regex.exec(string)) &#123;</span><br><span class=\"line\">  matches.push(match);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">matches</span><br><span class=\"line\"><span class=\"comment\">// [</span></span><br><span class=\"line\"><span class=\"comment\">//   [\"test1\", \"e\", \"st1\", \"1\", index: 0, input: \"test1test2test3\"],</span></span><br><span class=\"line\"><span class=\"comment\">//   [\"test2\", \"e\", \"st2\", \"2\", index: 5, input: \"test1test2test3\"],</span></span><br><span class=\"line\"><span class=\"comment\">//   [\"test3\", \"e\", \"st3\", \"3\", index: 10, input: \"test1test2test3\"]</span></span><br><span class=\"line\"><span class=\"comment\">// ]</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，while循环取出每一轮的正则匹配，一共三轮。</p>\n<p>目前有一个提案，增加了String.prototype.matchAll方法，可以一次性取出所有匹配。不过，它返回的是一个遍历器（Iterator），而不是数组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> string = <span class=\"string\">'test1test2test3'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// g 修饰符加不加都可以</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> regex = <span class=\"regexp\">/t(e)(st(\\d?))/g</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> match <span class=\"keyword\">of</span> string.matchAll(regex)) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(match);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// [\"test1\", \"e\", \"st1\", \"1\", index: 0, input: \"test1test2test3\"]</span></span><br><span class=\"line\"><span class=\"comment\">// [\"test2\", \"e\", \"st2\", \"2\", index: 5, input: \"test1test2test3\"]</span></span><br><span class=\"line\"><span class=\"comment\">// [\"test3\", \"e\", \"st3\", \"3\", index: 10, input: \"test1test2test3\"]</span></span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，由于string.matchAll(regex)返回的是遍历器，所以可以用for…of循环取出。相对于返回数组，返回遍历器的好处在于，如果匹配结果是一个很大的数组，那么遍历器比较节省资源。</p>\n<p>遍历器转为数组是非常简单的，使用…运算符和Array.from方法就可以了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 转为数组方法一</span></span><br><span class=\"line\">[...string.matchAll(regex)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 转为数组方法二</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(string.matchAll(regex));</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"注-javascript中for…in和for…of的区别-以下括号中注的解释\"><a href=\"#注-javascript中for…in和for…of的区别-以下括号中注的解释\" class=\"headerlink\" title=\"注:javascript中for…in和for…of的区别,以下括号中注的解释\"></a>注:javascript中for…in和for…of的区别,以下括号中注的解释</h6><p>{<br>for…of循环是ES6引入的新的语法。<br>for…in遍历拿到的x是键（下标）。而for…of遍历拿到的x是值，但在对象中会提示不是一个迭代器报错。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'刘德华'</span>,<span class=\"attr\">age</span>: <span class=\"string\">'18'</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.length);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(x <span class=\"keyword\">of</span> a)&#123;</span><br><span class=\"line\">　　<span class=\"built_in\">console</span>.log(x); <span class=\"comment\">//A,B,C</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(x <span class=\"keyword\">in</span> a)&#123;</span><br><span class=\"line\">　　<span class=\"built_in\">console</span>.log(x+<span class=\"string\">':'</span>+a[x]); <span class=\"comment\">//0:A,1:B,2:C</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*for(x of b)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">　　console.log(x); //报错</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(x <span class=\"keyword\">in</span> b)&#123;</span><br><span class=\"line\">　　<span class=\"built_in\">console</span>.log(x); <span class=\"comment\">//name,age</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>}</p>\n<h2 id=\"函数的扩展\"><a href=\"#函数的扩展\" class=\"headerlink\" title=\"函数的扩展\"></a>函数的扩展</h2><h3 id=\"1-函数参数的默认值\"><a href=\"#1-函数参数的默认值\" class=\"headerlink\" title=\"1.函数参数的默认值\"></a>1.函数参数的默认值</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\">x, y = <span class=\"string\">'World'</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x, y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">log(<span class=\"string\">'Hello'</span>) <span class=\"comment\">// Hello World</span></span><br><span class=\"line\">log(<span class=\"string\">'Hello'</span>, <span class=\"string\">'China'</span>) <span class=\"comment\">// Hello China</span></span><br><span class=\"line\">log(<span class=\"string\">'Hello'</span>, <span class=\"string\">''</span>) <span class=\"comment\">// Hello</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"与解构赋值默认值结合使用\"><a href=\"#与解构赋值默认值结合使用\" class=\"headerlink\" title=\"与解构赋值默认值结合使用\"></a>与解构赋值默认值结合使用</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetch</span>(<span class=\"params\">url, &#123; body = <span class=\"string\">''</span>, method = <span class=\"string\">'GET'</span>, headers = &#123;&#125; &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(method);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fetch(<span class=\"string\">'http://example.com'</span>, &#123;&#125;)</span><br><span class=\"line\"><span class=\"comment\">// \"GET\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">fetch(<span class=\"string\">'http://example.com'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n<p>两个写法的区别<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 写法一</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">m1</span>(<span class=\"params\">&#123;x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写法二</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">m2</span>(<span class=\"params\">&#123;x, y&#125; = &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span> &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数没有参数的情况</span></span><br><span class=\"line\">m1() <span class=\"comment\">// [0, 0]</span></span><br><span class=\"line\">m2() <span class=\"comment\">// [0, 0]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// x 和 y 都有值的情况</span></span><br><span class=\"line\">m1(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span>&#125;) <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\">m2(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span>&#125;) <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// x 有值，y 无值的情况</span></span><br><span class=\"line\">m1(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>&#125;) <span class=\"comment\">// [3, 0]</span></span><br><span class=\"line\">m2(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>&#125;) <span class=\"comment\">// [3, undefined]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// x 和 y 都无值的情况</span></span><br><span class=\"line\">m1(&#123;&#125;) <span class=\"comment\">// [0, 0];</span></span><br><span class=\"line\">m2(&#123;&#125;) <span class=\"comment\">// [undefined, undefined]</span></span><br><span class=\"line\"></span><br><span class=\"line\">m1(&#123;<span class=\"attr\">z</span>: <span class=\"number\">3</span>&#125;) <span class=\"comment\">// [0, 0]</span></span><br><span class=\"line\">m2(&#123;<span class=\"attr\">z</span>: <span class=\"number\">3</span>&#125;) <span class=\"comment\">// [undefined, undefined]</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"函数的-length-属性\"><a href=\"#函数的-length-属性\" class=\"headerlink\" title=\"函数的 length 属性\"></a>函数的 length 属性</h4><p>指定了默认值以后，函数的length属性，将返回没有指定默认值的参数个数。也就是说，指定了默认值后，length属性将失真。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a</span>) </span>&#123;&#125;).length <span class=\"comment\">// 1</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a = <span class=\"number\">5</span></span>) </span>&#123;&#125;).length <span class=\"comment\">// 0</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b, c = <span class=\"number\">5</span></span>) </span>&#123;&#125;).length <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">y = x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> x = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f() <span class=\"comment\">// ReferenceError: x is not defined</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">x = x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo() <span class=\"comment\">// R</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，参数x = x形成一个单独作用域。实际执行的是let x = x，由于暂时性死区的原因，这行代码会报错”x 未定义“。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo = <span class=\"string\">'outer'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\">func = (</span>) =&gt; <span class=\"title\">foo</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> foo = <span class=\"string\">'inner'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(func());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bar(); <span class=\"comment\">// outer</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，函数bar的参数func的默认值是一个匿名函数，返回值为变量foo。函数参数形成的单独作用域里面，并没有定义变量foo，所以foo指向外层的全局变量foo，因此输出outer。</p>\n<h3 id=\"2-rest-参数\"><a href=\"#2-rest-参数\" class=\"headerlink\" title=\"2.rest 参数\"></a>2.rest 参数</h3><p>ES6 引入 rest 参数（形式为…变量名），用于获取函数的多余参数，这样就不需要使用arguments对象了。rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">...values</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> val <span class=\"keyword\">of</span> values) &#123;</span><br><span class=\"line\">    sum += val;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>) <span class=\"comment\">// 10</span></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-尾调用优化\"><a href=\"#3-尾调用优化\" class=\"headerlink\" title=\"3.尾调用优化\"></a>3.尾调用优化</h3><h4 id=\"什么是尾调用\"><a href=\"#什么是尾调用\" class=\"headerlink\" title=\"什么是尾调用\"></a>什么是尾调用</h4><p>尾调用（Tail Call）是函数式编程的一个重要概念，本身非常简单，一句话就能说清楚，就是指某个函数的最后一步是调用另一个函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> g(x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中，函数f的最后一步是调用函数g，这就叫尾调用。</p>\n<p>以下三种情况，都不属于尾调用。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 情况一</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> y = g(x);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 情况二</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> g(x) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 情况三</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">  g(x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，情况一是调用函数g之后，还有赋值操作，所以不属于尾调用，即使语义完全一样。情况二也属于调用后还有操作，即使写在一行内。情况三等同于下面的代码。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">  g(x);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>尾调用不一定出现在函数尾部，只要是最后一步操作即可。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m(x)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> n(x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，函数m和n都属于尾调用，因为它们都是函数f的最后一步操作。</p>\n<h4 id=\"尾调用优化\"><a href=\"#尾调用优化\" class=\"headerlink\" title=\"尾调用优化\"></a>尾调用优化</h4><p>函数调用会在内存形成一个“调用记录”，又称“调用帧”（call frame），保存调用位置和内部变量等信息。如果在函数A的内部调用函数B，那么在A的调用帧上方，还会形成一个B的调用帧。等到B运行结束，将结果返回到A，B的调用帧才会消失。如果函数B内部还调用函数C，那就还有一个C的调用帧，以此类推。所有的调用帧，就形成一个“调用栈”（call stack）</p>\n<p>尾调用由于是函数的最后一步操作，所以不需要保留外层函数的调用帧，因为调用位置、内部变量等信息都不会再用到了，只要直接用内层函数的调用帧，取代外层函数的调用帧就可以了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> m = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> n = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> g(m + n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> g(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">g(<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure></p>\n<p>这就叫做“尾调用优化”（Tail call optimization），即只保留内层函数的调用帧。如果所有函数都是尾调用，那么完全可以做到每次执行时，调用帧只有一项，这将大大节省内存。这就是“尾调用优化”的意义。</p>\n<p>注意，只有不再用到外层函数的内部变量，内层函数的调用帧才会取代外层函数的调用帧，否则就无法进行“尾调用优化”</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addOne</span>(<span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> one = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inner</span>(<span class=\"params\">b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b + one;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> inner(a);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的函数不会进行尾调用优化，因为内层函数inner用到了外层函数addOne的内部变量one。</p>\n<h3 id=\"尾递归\"><a href=\"#尾递归\" class=\"headerlink\" title=\"尾递归\"></a>尾递归</h3><p>函数调用自身，称为递归。如果尾调用自身，就称为尾递归。</p>\n<p>递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）。但对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> n * factorial(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">factorial(<span class=\"number\">5</span>) <span class=\"comment\">// 120</span></span><br></pre></td></tr></table></figure></p>\n<p>上面代码是一个阶乘函数，计算n的阶乘，最多需要保存n个调用记录，复杂度 O(n) 。</p>\n<p>如果改写成尾递归，只保留一个调用记录，复杂度 O(1) 。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">n, total</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> total;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> factorial(n - <span class=\"number\">1</span>, n * total);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">factorial(<span class=\"number\">5</span>, <span class=\"number\">1</span>) <span class=\"comment\">// 120</span></span><br></pre></td></tr></table></figure></p>\n<p>非尾递归的 Fibonacci 数列实现如下。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fibonacci</span> (<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( n &lt;= <span class=\"number\">1</span> ) &#123;<span class=\"keyword\">return</span> <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> Fibonacci(n - <span class=\"number\">1</span>) + Fibonacci(n - <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// f(3) =&gt; f(2)+ f(1) =&gt; f(1)+ f(0) + f(1) =&gt; 3</span></span><br><span class=\"line\">Fibonacci(<span class=\"number\">3</span>) <span class=\"comment\">// 3</span></span><br><span class=\"line\">Fibonacci(<span class=\"number\">10</span>) <span class=\"comment\">// 89</span></span><br><span class=\"line\">Fibonacci(<span class=\"number\">100</span>) <span class=\"comment\">// 堆栈溢出</span></span><br><span class=\"line\">Fibonacci(<span class=\"number\">500</span>) <span class=\"comment\">// 堆栈溢出</span></span><br></pre></td></tr></table></figure></p>\n<p>尾递归优化过的 Fibonacci 数列实现如下。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fibonacci2</span> (<span class=\"params\">n , ac1 = <span class=\"number\">1</span> , ac2 = <span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>( n &lt;= <span class=\"number\">1</span> ) &#123;<span class=\"keyword\">return</span> ac2&#125;;</span><br><span class=\"line\"> <span class=\"comment\">//                  (序号,上一次结果,本次结果)  </span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> Fibonacci2 (n - <span class=\"number\">1</span>, ac2, ac1 + ac2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// f(3,1,1)= f(2,1,2)=f(1,2,3) = 3</span></span><br><span class=\"line\"><span class=\"comment\">// f(4,1,1) = f(3,1,2)=f(2,2,3) =f(1,3,5) = 5</span></span><br><span class=\"line\">Fibonacci2(<span class=\"number\">100</span>) <span class=\"comment\">// 573147844013817200000</span></span><br><span class=\"line\">Fibonacci2(<span class=\"number\">1000</span>) <span class=\"comment\">// 7.0330367711422765e+208</span></span><br><span class=\"line\">Fibonacci2(<span class=\"number\">10000</span>) <span class=\"comment\">// Infinity</span></span><br></pre></td></tr></table></figure></p>\n<p>由此可见，“尾调用优化”对递归操作意义重大，所以一些函数式编程语言将其写入了语言规格。ES6 是如此，第一次明确规定，所有 ECMAScript 的实现，都必须部署“尾调用优化”。这就是说，ES6 中只要使用尾递归，就不会发生栈溢出，相对节省内存。</p>\n<h3 id=\"严格模式\"><a href=\"#严格模式\" class=\"headerlink\" title=\"严格模式\"></a>严格模式</h3><p>ES6 的尾调用优化只在严格模式下开启，正常模式是无效的。</p>\n<p>这是因为在正常模式下，函数内部有两个变量，可以跟踪函数的调用栈。</p>\n<p>func.arguments：返回调用时函数的参数。<br>func.caller：返回调用当前函数的那个函数。<br>尾调用优化发生时，函数的调用栈会改写，因此上面两个变量就会失真。严格模式禁用这两个变量，所以尾调用模式仅在严格模式下生效。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">restricted</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"string\">'use strict'</span>;</span><br><span class=\"line\">  restricted.caller;    // 报错</span><br><span class=\"line\">  restricted.arguments; // 报错</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">restricted();</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"尾递归优化的实现\"><a href=\"#尾递归优化的实现\" class=\"headerlink\" title=\"尾递归优化的实现\"></a>尾递归优化的实现</h3><p>尾递归优化只在严格模式下生效，那么正常模式下，或者那些不支持该功能的环境中，有没有办法也使用尾递归优化呢？回答是可以的，就是自己实现尾递归优化。</p>\n<p>它的原理非常简单。尾递归之所以需要优化，原因是调用栈太多，造成溢出，那么只要减少调用栈，就不会溢出。怎么做可以减少调用栈呢？就是采用“循环”换掉“递归”。</p>\n<p>下面是一个正常的递归函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (y &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum(x + <span class=\"number\">1</span>, y - <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sum(<span class=\"number\">1</span>, <span class=\"number\">100000</span>)</span><br><span class=\"line\"><span class=\"comment\">// Uncaught RangeError: Maximum call stack size exceeded(…)</span></span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，sum是一个递归函数，参数x是需要累加的值，参数y控制递归次数。一旦指定sum递归 100000 次，就会报错，提示超出调用栈的最大次数。</p>\n<p>蹦床函数（trampoline）可以将递归执行转为循环执行。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trampoline</span>(<span class=\"params\">f</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (f &amp;&amp; f <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span>) &#123;</span><br><span class=\"line\">    f = f();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> f;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面就是蹦床函数的一个实现，它接受一个函数f作为参数。只要f执行后返回一个函数，就继续执行。注意，这里是返回一个函数，然后执行该函数，而不是函数里面调用函数，这样就避免了递归执行，从而就消除了调用栈过大的问题。</p>\n<p>然后，要做的就是将原来的递归函数，改写为每一步返回另一个函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (y &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum.bind(<span class=\"literal\">null</span>, x + <span class=\"number\">1</span>, y - <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"git的问题解决方法","date":"2018-11-08T02:10:36.000Z","comments":1,"_content":"# 正常提交文件\n```bash\ngit init (第一次需要)\ngit add . (./表示所有文件  可指定文件夹/文件)\ngit remote add origin git@github.com:xxxxgit.git (第一次需要)(ssh链接上传代码大小没有限制)\ngit commit -m\"xxxx\"\ngit push -u origin master /git push origin master\n```\n# 不正常提交文件\n## git push 不上去,因为远程仓库有修改但本地没有拉取\ngit stash 介绍\n```bash\ngit stash /git stash save \"info\"  // 将文件保存到暂存区\ngit stash list // 查看暂存区列表\ngit stash pop 将暂存区的内容弹出,并应用到当前分支对应的工作目录上.\n```\n--rebase 介绍\n告诉Git把小红的提交移到同步了中央仓库修改后的master分支的顶部\n\n## 解决1\n```bash\ngit pull --rebase origin master // 拉取远程仓库文件并把本地修改的文件置分支顶部\ngit push origin master \n```\nrebase操作过程是把本地提交一次一个地迁移到更新了的中央仓库master分支之上。 这意味着可能要解决在迁移某个提交时出现的合并冲突，而不是解决包含了所有提交的大型合并时所出现的冲突。 这样的方式让你尽可能保持每个提交的聚焦和项目历史的整洁。反过来，简化了哪里引入Bug的分析，如果有必要，回滚修改也可以做到对项目影响最小。\n\n如果小红和小明的功能是不相关的，不大可能在rebase过程中有冲突。如果有，Git在合并有冲突的提交处暂停rebase过程，输出下面的信息并带上相关的指令：\n\n`CONFLICT (content): Merge conflict in <some-file>`\n\n`git status` 命令来查看哪里有问题\n接着小红编辑这些文件。修改完成后，用老套路暂存这些文件，并让git rebase完成剩下的事：\n```bash\ngit add <some-file> \ngit rebase --continue\n\ngit rebase --abort // 回到你执行git pull --rebase命令前的样子：\n``````\n## 解决2\n```bash\ngit stash save \"info\"  // 将本次修改文件提交到暂存区\ngit pull --rebase origin master // 拉取远程仓库文件并把本地修改的文件置分支顶部\ngit stash pop // 放出暂存区修改\ngit push origin master\n```\n// master\ngit stash save \"info\"  // 将本次修改文件提交到暂存区\ngit checkout dev\ngit stash pop // 放出暂存区修改\n# 开发新功能\n```bash\ngit checkout -b marys-feature master\n// 相当于\ngit checkout -b marys-feature\ngit merge master\n```\n这个命令检出一个基于master名为marys-feature的分支，Git的-b选项表示如果分支还不存在则新建分支。 这个新分支上，小红按老套路编辑、暂存和提交修改，按需要提交以实现功能：\n\n`git push -u origin marys-feature`\n\n这条命令push marys-feature分支到中央仓库（origin），-u选项设置本地分支去跟踪远程对应的分支。 设置好跟踪的分支后，小红就可以使用git push命令省去指定推送分支的参数。\n\n```bash\ngit checkout master\ngit pull\ngit pull origin marys-feature\ngit push\n```\n# 合并分支\n```bash\ngit merge --no-ff dev // 不使用fast-forward方式合并，保留分支的commit历史\ngit merge --squash dev // 使用squash方式合并，把多次分支commit历史压缩为一次 之后要提交一次\n```\n","source":"_posts/git的问题解决方法.md","raw":"---\ntitle: git的问题解决方法\ndate: 2018-11-08 10:10:36\ncategories: ['其他']\ntags: 其他\ncomments: true\n---\n# 正常提交文件\n```bash\ngit init (第一次需要)\ngit add . (./表示所有文件  可指定文件夹/文件)\ngit remote add origin git@github.com:xxxxgit.git (第一次需要)(ssh链接上传代码大小没有限制)\ngit commit -m\"xxxx\"\ngit push -u origin master /git push origin master\n```\n# 不正常提交文件\n## git push 不上去,因为远程仓库有修改但本地没有拉取\ngit stash 介绍\n```bash\ngit stash /git stash save \"info\"  // 将文件保存到暂存区\ngit stash list // 查看暂存区列表\ngit stash pop 将暂存区的内容弹出,并应用到当前分支对应的工作目录上.\n```\n--rebase 介绍\n告诉Git把小红的提交移到同步了中央仓库修改后的master分支的顶部\n\n## 解决1\n```bash\ngit pull --rebase origin master // 拉取远程仓库文件并把本地修改的文件置分支顶部\ngit push origin master \n```\nrebase操作过程是把本地提交一次一个地迁移到更新了的中央仓库master分支之上。 这意味着可能要解决在迁移某个提交时出现的合并冲突，而不是解决包含了所有提交的大型合并时所出现的冲突。 这样的方式让你尽可能保持每个提交的聚焦和项目历史的整洁。反过来，简化了哪里引入Bug的分析，如果有必要，回滚修改也可以做到对项目影响最小。\n\n如果小红和小明的功能是不相关的，不大可能在rebase过程中有冲突。如果有，Git在合并有冲突的提交处暂停rebase过程，输出下面的信息并带上相关的指令：\n\n`CONFLICT (content): Merge conflict in <some-file>`\n\n`git status` 命令来查看哪里有问题\n接着小红编辑这些文件。修改完成后，用老套路暂存这些文件，并让git rebase完成剩下的事：\n```bash\ngit add <some-file> \ngit rebase --continue\n\ngit rebase --abort // 回到你执行git pull --rebase命令前的样子：\n``````\n## 解决2\n```bash\ngit stash save \"info\"  // 将本次修改文件提交到暂存区\ngit pull --rebase origin master // 拉取远程仓库文件并把本地修改的文件置分支顶部\ngit stash pop // 放出暂存区修改\ngit push origin master\n```\n// master\ngit stash save \"info\"  // 将本次修改文件提交到暂存区\ngit checkout dev\ngit stash pop // 放出暂存区修改\n# 开发新功能\n```bash\ngit checkout -b marys-feature master\n// 相当于\ngit checkout -b marys-feature\ngit merge master\n```\n这个命令检出一个基于master名为marys-feature的分支，Git的-b选项表示如果分支还不存在则新建分支。 这个新分支上，小红按老套路编辑、暂存和提交修改，按需要提交以实现功能：\n\n`git push -u origin marys-feature`\n\n这条命令push marys-feature分支到中央仓库（origin），-u选项设置本地分支去跟踪远程对应的分支。 设置好跟踪的分支后，小红就可以使用git push命令省去指定推送分支的参数。\n\n```bash\ngit checkout master\ngit pull\ngit pull origin marys-feature\ngit push\n```\n# 合并分支\n```bash\ngit merge --no-ff dev // 不使用fast-forward方式合并，保留分支的commit历史\ngit merge --squash dev // 使用squash方式合并，把多次分支commit历史压缩为一次 之后要提交一次\n```\n","slug":"git的问题解决方法","published":1,"updated":"2018-11-26T01:51:57.634Z","layout":"post","photos":[],"link":"","_id":"cjqojjnmg0001uwkqibtab0vz","content":"<h1 id=\"正常提交文件\"><a href=\"#正常提交文件\" class=\"headerlink\" title=\"正常提交文件\"></a>正常提交文件</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init (第一次需要)</span><br><span class=\"line\">git add . (./表示所有文件  可指定文件夹/文件)</span><br><span class=\"line\">git remote add origin git@github.com:xxxxgit.git (第一次需要)(ssh链接上传代码大小没有限制)</span><br><span class=\"line\">git commit -m<span class=\"string\">\"xxxx\"</span></span><br><span class=\"line\">git push -u origin master /git push origin master</span><br></pre></td></tr></table></figure>\n<h1 id=\"不正常提交文件\"><a href=\"#不正常提交文件\" class=\"headerlink\" title=\"不正常提交文件\"></a>不正常提交文件</h1><h2 id=\"git-push-不上去-因为远程仓库有修改但本地没有拉取\"><a href=\"#git-push-不上去-因为远程仓库有修改但本地没有拉取\" class=\"headerlink\" title=\"git push 不上去,因为远程仓库有修改但本地没有拉取\"></a>git push 不上去,因为远程仓库有修改但本地没有拉取</h2><p>git stash 介绍<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash /git stash save <span class=\"string\">\"info\"</span>  // 将文件保存到暂存区</span><br><span class=\"line\">git stash list // 查看暂存区列表</span><br><span class=\"line\">git stash pop 将暂存区的内容弹出,并应用到当前分支对应的工作目录上.</span><br></pre></td></tr></table></figure></p>\n<p>–rebase 介绍<br>告诉Git把小红的提交移到同步了中央仓库修改后的master分支的顶部</p>\n<h2 id=\"解决1\"><a href=\"#解决1\" class=\"headerlink\" title=\"解决1\"></a>解决1</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull --rebase origin master // 拉取远程仓库文件并把本地修改的文件置分支顶部</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<p>rebase操作过程是把本地提交一次一个地迁移到更新了的中央仓库master分支之上。 这意味着可能要解决在迁移某个提交时出现的合并冲突，而不是解决包含了所有提交的大型合并时所出现的冲突。 这样的方式让你尽可能保持每个提交的聚焦和项目历史的整洁。反过来，简化了哪里引入Bug的分析，如果有必要，回滚修改也可以做到对项目影响最小。</p>\n<p>如果小红和小明的功能是不相关的，不大可能在rebase过程中有冲突。如果有，Git在合并有冲突的提交处暂停rebase过程，输出下面的信息并带上相关的指令：</p>\n<p><code>CONFLICT (content): Merge conflict in &lt;some-file&gt;</code></p>\n<p><code>git status</code> 命令来查看哪里有问题<br>接着小红编辑这些文件。修改完成后，用老套路暂存这些文件，并让git rebase完成剩下的事：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add &lt;some-file&gt; </span><br><span class=\"line\">git rebase --<span class=\"built_in\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">git rebase --abort // 回到你执行git pull --rebase命令前的样子：</span><br><span class=\"line\">```</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"解决2\"><a href=\"#解决2\" class=\"headerlink\" title=\"解决2\"></a>解决2</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash save <span class=\"string\">\"info\"</span>  // 将本次修改文件提交到暂存区</span><br><span class=\"line\">git pull --rebase origin master // 拉取远程仓库文件并把本地修改的文件置分支顶部</span><br><span class=\"line\">git stash pop // 放出暂存区修改</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<p>// master<br>git stash save “info”  // 将本次修改文件提交到暂存区<br>git checkout dev<br>git stash pop // 放出暂存区修改</p>\n<h1 id=\"开发新功能\"><a href=\"#开发新功能\" class=\"headerlink\" title=\"开发新功能\"></a>开发新功能</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b marys-feature master</span><br><span class=\"line\">// 相当于</span><br><span class=\"line\">git checkout -b marys-feature</span><br><span class=\"line\">git merge master</span><br></pre></td></tr></table></figure>\n<p>这个命令检出一个基于master名为marys-feature的分支，Git的-b选项表示如果分支还不存在则新建分支。 这个新分支上，小红按老套路编辑、暂存和提交修改，按需要提交以实现功能：</p>\n<p><code>git push -u origin marys-feature</code></p>\n<p>这条命令push marys-feature分支到中央仓库（origin），-u选项设置本地分支去跟踪远程对应的分支。 设置好跟踪的分支后，小红就可以使用git push命令省去指定推送分支的参数。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br><span class=\"line\">git pull</span><br><span class=\"line\">git pull origin marys-feature</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<h1 id=\"合并分支\"><a href=\"#合并分支\" class=\"headerlink\" title=\"合并分支\"></a>合并分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge --no-ff dev // 不使用fast-forward方式合并，保留分支的commit历史</span><br><span class=\"line\">git merge --squash dev // 使用squash方式合并，把多次分支commit历史压缩为一次 之后要提交一次</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"正常提交文件\"><a href=\"#正常提交文件\" class=\"headerlink\" title=\"正常提交文件\"></a>正常提交文件</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init (第一次需要)</span><br><span class=\"line\">git add . (./表示所有文件  可指定文件夹/文件)</span><br><span class=\"line\">git remote add origin git@github.com:xxxxgit.git (第一次需要)(ssh链接上传代码大小没有限制)</span><br><span class=\"line\">git commit -m<span class=\"string\">\"xxxx\"</span></span><br><span class=\"line\">git push -u origin master /git push origin master</span><br></pre></td></tr></table></figure>\n<h1 id=\"不正常提交文件\"><a href=\"#不正常提交文件\" class=\"headerlink\" title=\"不正常提交文件\"></a>不正常提交文件</h1><h2 id=\"git-push-不上去-因为远程仓库有修改但本地没有拉取\"><a href=\"#git-push-不上去-因为远程仓库有修改但本地没有拉取\" class=\"headerlink\" title=\"git push 不上去,因为远程仓库有修改但本地没有拉取\"></a>git push 不上去,因为远程仓库有修改但本地没有拉取</h2><p>git stash 介绍<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash /git stash save <span class=\"string\">\"info\"</span>  // 将文件保存到暂存区</span><br><span class=\"line\">git stash list // 查看暂存区列表</span><br><span class=\"line\">git stash pop 将暂存区的内容弹出,并应用到当前分支对应的工作目录上.</span><br></pre></td></tr></table></figure></p>\n<p>–rebase 介绍<br>告诉Git把小红的提交移到同步了中央仓库修改后的master分支的顶部</p>\n<h2 id=\"解决1\"><a href=\"#解决1\" class=\"headerlink\" title=\"解决1\"></a>解决1</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull --rebase origin master // 拉取远程仓库文件并把本地修改的文件置分支顶部</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<p>rebase操作过程是把本地提交一次一个地迁移到更新了的中央仓库master分支之上。 这意味着可能要解决在迁移某个提交时出现的合并冲突，而不是解决包含了所有提交的大型合并时所出现的冲突。 这样的方式让你尽可能保持每个提交的聚焦和项目历史的整洁。反过来，简化了哪里引入Bug的分析，如果有必要，回滚修改也可以做到对项目影响最小。</p>\n<p>如果小红和小明的功能是不相关的，不大可能在rebase过程中有冲突。如果有，Git在合并有冲突的提交处暂停rebase过程，输出下面的信息并带上相关的指令：</p>\n<p><code>CONFLICT (content): Merge conflict in &lt;some-file&gt;</code></p>\n<p><code>git status</code> 命令来查看哪里有问题<br>接着小红编辑这些文件。修改完成后，用老套路暂存这些文件，并让git rebase完成剩下的事：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add &lt;some-file&gt; </span><br><span class=\"line\">git rebase --<span class=\"built_in\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">git rebase --abort // 回到你执行git pull --rebase命令前的样子：</span><br><span class=\"line\">```</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"解决2\"><a href=\"#解决2\" class=\"headerlink\" title=\"解决2\"></a>解决2</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash save <span class=\"string\">\"info\"</span>  // 将本次修改文件提交到暂存区</span><br><span class=\"line\">git pull --rebase origin master // 拉取远程仓库文件并把本地修改的文件置分支顶部</span><br><span class=\"line\">git stash pop // 放出暂存区修改</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<p>// master<br>git stash save “info”  // 将本次修改文件提交到暂存区<br>git checkout dev<br>git stash pop // 放出暂存区修改</p>\n<h1 id=\"开发新功能\"><a href=\"#开发新功能\" class=\"headerlink\" title=\"开发新功能\"></a>开发新功能</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b marys-feature master</span><br><span class=\"line\">// 相当于</span><br><span class=\"line\">git checkout -b marys-feature</span><br><span class=\"line\">git merge master</span><br></pre></td></tr></table></figure>\n<p>这个命令检出一个基于master名为marys-feature的分支，Git的-b选项表示如果分支还不存在则新建分支。 这个新分支上，小红按老套路编辑、暂存和提交修改，按需要提交以实现功能：</p>\n<p><code>git push -u origin marys-feature</code></p>\n<p>这条命令push marys-feature分支到中央仓库（origin），-u选项设置本地分支去跟踪远程对应的分支。 设置好跟踪的分支后，小红就可以使用git push命令省去指定推送分支的参数。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br><span class=\"line\">git pull</span><br><span class=\"line\">git pull origin marys-feature</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<h1 id=\"合并分支\"><a href=\"#合并分支\" class=\"headerlink\" title=\"合并分支\"></a>合并分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge --no-ff dev // 不使用fast-forward方式合并，保留分支的commit历史</span><br><span class=\"line\">git merge --squash dev // 使用squash方式合并，把多次分支commit历史压缩为一次 之后要提交一次</span><br></pre></td></tr></table></figure>\n"},{"title":"hexo 常用命令","date":"2018-08-30T02:39:24.000Z","comments":1,"_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\n### 列出已安装依赖(局部/全局)\n\n``` bash\n$ npm ls --depth 0 \n$ npm ls --depth 0 -g \n\n```","source":"_posts/hexo 常用命令.md","raw":"---\ntitle: hexo 常用命令\ndate: 2018-08-30 10:39:24\ncategories: ['其他'] \ntags: 其他\ncomments: true\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\n### 列出已安装依赖(局部/全局)\n\n``` bash\n$ npm ls --depth 0 \n$ npm ls --depth 0 -g \n\n```","slug":"hexo 常用命令","published":1,"updated":"2018-08-31T05:30:55.470Z","layout":"post","photos":[],"link":"","_id":"cjqojjnmm0004uwkqphulhixt","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<h3 id=\"列出已安装依赖-局部-全局\"><a href=\"#列出已安装依赖-局部-全局\" class=\"headerlink\" title=\"列出已安装依赖(局部/全局)\"></a>列出已安装依赖(局部/全局)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm ls --depth 0 </span><br><span class=\"line\">$ npm ls --depth 0 -g</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<h3 id=\"列出已安装依赖-局部-全局\"><a href=\"#列出已安装依赖-局部-全局\" class=\"headerlink\" title=\"列出已安装依赖(局部/全局)\"></a>列出已安装依赖(局部/全局)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm ls --depth 0 </span><br><span class=\"line\">$ npm ls --depth 0 -g</span><br></pre></td></tr></table></figure>"},{"title":"iOS上输入框光标错位问题","date":"2018-09-20T08:26:11.000Z","comments":1,"_content":"## iOS上,fixed 元素内的输入元素,获取焦点时的光标错位问题 [转载来源](http://web.blued.cn/2017/12/15/ios-fixed-input-cursor-position/)\n如果一个输入元素（input, textarea …）的父容器设置了 position: fixed，当这个元素获取焦点时，滚动网页光标便错位\n\n![无法展示图片](http://web.xiaojw.xyz/blog_file/piaoyi.gif)\n\n> 遗憾的是，截至目前，iOS 11.x 上也有这个问题。\n\n### 解决方法一:不使用fixed 布局\n如果一定要使用请看下一种方法\n\n### 解决方法二:动态改变布局方式\n当元素获取焦点时，改变父容器的定位方式：fixed > absolute\n```bash\nfor (let evt of ['focus', 'blur']) {\n  const isFocus = evt === 'focus'\n  const fn = isFocus ? 'add' : 'remove'\n\n  inputDOMNode.addEventListener(evt, () => {\n    parentDOMNode.classList[fn]('input-focus')\n    htmlDOMNode.classList[fn]('no-scroll')\n    bodyDOMNode.classList[fn]('no-scroll')\n\n    isFocus && setScrollTop(0)\n  })\n}\n```\n\n```bash\n.input-focus {\n  position: absolute;\n  ...\n}\n\n.no-scroll {\n  height: 100%;\n  overflow: hidden;\n}\n```\n监听了输入元素 focus 和 blur 事件，为父元素添加或移除某些样式。\n> 当 position: absolute 时，输入框的定位方式需要手动设置（这里采取了顶部对齐）；.no-scroll 是为了禁止 body 的滚动，保证输入框可见。\n\n但是这个方案在部分 Android 设备上，当键盘收起时并不会触发输入元素的 blur 事件，往往还需要用户主动点击页面的其他区域，算是一点小遗憾吧。\n\n所以监听改变前先判断手机是ios还是android android就不监听\n\n### 解决方法三:直接给html, body元素设置样式(推荐)\n```bash\nhtml,\nbody {\n  -webkit-overflow-scroll: touch !important;\n  overflow: auto !important;\n  height: 100% !important;\n}\n```\n`-webkit-overflow-scrolling`控制元素在移动设备上是否使用滚动回弹效果。\n```bash\n-webkit-overflow-scrolling: touch; /* 当手指从触摸屏上移开，会保持一段时间的滚动 */\noverflow: auto; /* 由浏览器定夺，如果内容被修剪，就会显示滚动条 */\n```\n当输入元素获取焦点时，键盘弹起，输入元素被顶到了键盘的上方，此时用户的手指会从触摸屏上移开，输入元素会保持一段时间的滚动，从而光标的位置可以被正确计算。\n> !important 在这里是为了防止这些属性会因为浏览器优先级过高而发生变化。有点小遗憾的是，!important 侵入性有些高。\n\n### 解决方法四:IOS系统修复\n慢慢等,说不定下一次更新也没有修复\n","source":"_posts/iOS上输入框光标错位问题.md","raw":"---\ntitle: iOS上输入框光标错位问题\ndate: 2018-09-20 16:26:11\ncategories: ['前端'] \ntags: 前端\ncomments: true\n---\n## iOS上,fixed 元素内的输入元素,获取焦点时的光标错位问题 [转载来源](http://web.blued.cn/2017/12/15/ios-fixed-input-cursor-position/)\n如果一个输入元素（input, textarea …）的父容器设置了 position: fixed，当这个元素获取焦点时，滚动网页光标便错位\n\n![无法展示图片](http://web.xiaojw.xyz/blog_file/piaoyi.gif)\n\n> 遗憾的是，截至目前，iOS 11.x 上也有这个问题。\n\n### 解决方法一:不使用fixed 布局\n如果一定要使用请看下一种方法\n\n### 解决方法二:动态改变布局方式\n当元素获取焦点时，改变父容器的定位方式：fixed > absolute\n```bash\nfor (let evt of ['focus', 'blur']) {\n  const isFocus = evt === 'focus'\n  const fn = isFocus ? 'add' : 'remove'\n\n  inputDOMNode.addEventListener(evt, () => {\n    parentDOMNode.classList[fn]('input-focus')\n    htmlDOMNode.classList[fn]('no-scroll')\n    bodyDOMNode.classList[fn]('no-scroll')\n\n    isFocus && setScrollTop(0)\n  })\n}\n```\n\n```bash\n.input-focus {\n  position: absolute;\n  ...\n}\n\n.no-scroll {\n  height: 100%;\n  overflow: hidden;\n}\n```\n监听了输入元素 focus 和 blur 事件，为父元素添加或移除某些样式。\n> 当 position: absolute 时，输入框的定位方式需要手动设置（这里采取了顶部对齐）；.no-scroll 是为了禁止 body 的滚动，保证输入框可见。\n\n但是这个方案在部分 Android 设备上，当键盘收起时并不会触发输入元素的 blur 事件，往往还需要用户主动点击页面的其他区域，算是一点小遗憾吧。\n\n所以监听改变前先判断手机是ios还是android android就不监听\n\n### 解决方法三:直接给html, body元素设置样式(推荐)\n```bash\nhtml,\nbody {\n  -webkit-overflow-scroll: touch !important;\n  overflow: auto !important;\n  height: 100% !important;\n}\n```\n`-webkit-overflow-scrolling`控制元素在移动设备上是否使用滚动回弹效果。\n```bash\n-webkit-overflow-scrolling: touch; /* 当手指从触摸屏上移开，会保持一段时间的滚动 */\noverflow: auto; /* 由浏览器定夺，如果内容被修剪，就会显示滚动条 */\n```\n当输入元素获取焦点时，键盘弹起，输入元素被顶到了键盘的上方，此时用户的手指会从触摸屏上移开，输入元素会保持一段时间的滚动，从而光标的位置可以被正确计算。\n> !important 在这里是为了防止这些属性会因为浏览器优先级过高而发生变化。有点小遗憾的是，!important 侵入性有些高。\n\n### 解决方法四:IOS系统修复\n慢慢等,说不定下一次更新也没有修复\n","slug":"iOS上输入框光标错位问题","published":1,"updated":"2019-01-09T01:56:17.236Z","layout":"post","photos":[],"link":"","_id":"cjqojjnmq0005uwkqewlswcoj","content":"<h2 id=\"iOS上-fixed-元素内的输入元素-获取焦点时的光标错位问题-转载来源\"><a href=\"#iOS上-fixed-元素内的输入元素-获取焦点时的光标错位问题-转载来源\" class=\"headerlink\" title=\"iOS上,fixed 元素内的输入元素,获取焦点时的光标错位问题 转载来源\"></a>iOS上,fixed 元素内的输入元素,获取焦点时的光标错位问题 <a href=\"http://web.blued.cn/2017/12/15/ios-fixed-input-cursor-position/\" target=\"_blank\" rel=\"noopener\">转载来源</a></h2><p>如果一个输入元素（input, textarea …）的父容器设置了 position: fixed，当这个元素获取焦点时，滚动网页光标便错位</p>\n<p><img src=\"http://web.xiaojw.xyz/blog_file/piaoyi.gif\" alt=\"无法展示图片\"></p>\n<blockquote>\n<p>遗憾的是，截至目前，iOS 11.x 上也有这个问题。</p>\n</blockquote>\n<h3 id=\"解决方法一-不使用fixed-布局\"><a href=\"#解决方法一-不使用fixed-布局\" class=\"headerlink\" title=\"解决方法一:不使用fixed 布局\"></a>解决方法一:不使用fixed 布局</h3><p>如果一定要使用请看下一种方法</p>\n<h3 id=\"解决方法二-动态改变布局方式\"><a href=\"#解决方法二-动态改变布局方式\" class=\"headerlink\" title=\"解决方法二:动态改变布局方式\"></a>解决方法二:动态改变布局方式</h3><p>当元素获取焦点时，改变父容器的定位方式：fixed &gt; absolute<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"built_in\">let</span> evt of [<span class=\"string\">'focus'</span>, <span class=\"string\">'blur'</span>]) &#123;</span><br><span class=\"line\">  const isFocus = evt === <span class=\"string\">'focus'</span></span><br><span class=\"line\">  const fn = isFocus ? <span class=\"string\">'add'</span> : <span class=\"string\">'remove'</span></span><br><span class=\"line\"></span><br><span class=\"line\">  inputDOMNode.addEventListener(evt, () =&gt; &#123;</span><br><span class=\"line\">    parentDOMNode.classList[fn](<span class=\"string\">'input-focus'</span>)</span><br><span class=\"line\">    htmlDOMNode.classList[fn](<span class=\"string\">'no-scroll'</span>)</span><br><span class=\"line\">    bodyDOMNode.classList[fn](<span class=\"string\">'no-scroll'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    isFocus &amp;&amp; setScrollTop(0)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.input-focus &#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.no-scroll &#123;</span><br><span class=\"line\">  height: 100%;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>监听了输入元素 focus 和 blur 事件，为父元素添加或移除某些样式。</p>\n<blockquote>\n<p>当 position: absolute 时，输入框的定位方式需要手动设置（这里采取了顶部对齐）；.no-scroll 是为了禁止 body 的滚动，保证输入框可见。</p>\n</blockquote>\n<p>但是这个方案在部分 Android 设备上，当键盘收起时并不会触发输入元素的 blur 事件，往往还需要用户主动点击页面的其他区域，算是一点小遗憾吧。</p>\n<p>所以监听改变前先判断手机是ios还是android android就不监听</p>\n<h3 id=\"解决方法三-直接给html-body元素设置样式-推荐\"><a href=\"#解决方法三-直接给html-body元素设置样式-推荐\" class=\"headerlink\" title=\"解决方法三:直接给html, body元素设置样式(推荐)\"></a>解决方法三:直接给html, body元素设置样式(推荐)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html,</span><br><span class=\"line\">body &#123;</span><br><span class=\"line\">  -webkit-overflow-scroll: touch !important;</span><br><span class=\"line\">  overflow: auto !important;</span><br><span class=\"line\">  height: 100% !important;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>-webkit-overflow-scrolling</code>控制元素在移动设备上是否使用滚动回弹效果。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-webkit-overflow-scrolling: touch; /* 当手指从触摸屏上移开，会保持一段时间的滚动 */</span><br><span class=\"line\">overflow: auto; /* 由浏览器定夺，如果内容被修剪，就会显示滚动条 */</span><br></pre></td></tr></table></figure></p>\n<p>当输入元素获取焦点时，键盘弹起，输入元素被顶到了键盘的上方，此时用户的手指会从触摸屏上移开，输入元素会保持一段时间的滚动，从而光标的位置可以被正确计算。</p>\n<blockquote>\n<p>!important 在这里是为了防止这些属性会因为浏览器优先级过高而发生变化。有点小遗憾的是，!important 侵入性有些高。</p>\n</blockquote>\n<h3 id=\"解决方法四-IOS系统修复\"><a href=\"#解决方法四-IOS系统修复\" class=\"headerlink\" title=\"解决方法四:IOS系统修复\"></a>解决方法四:IOS系统修复</h3><p>慢慢等,说不定下一次更新也没有修复</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"iOS上-fixed-元素内的输入元素-获取焦点时的光标错位问题-转载来源\"><a href=\"#iOS上-fixed-元素内的输入元素-获取焦点时的光标错位问题-转载来源\" class=\"headerlink\" title=\"iOS上,fixed 元素内的输入元素,获取焦点时的光标错位问题 转载来源\"></a>iOS上,fixed 元素内的输入元素,获取焦点时的光标错位问题 <a href=\"http://web.blued.cn/2017/12/15/ios-fixed-input-cursor-position/\" target=\"_blank\" rel=\"noopener\">转载来源</a></h2><p>如果一个输入元素（input, textarea …）的父容器设置了 position: fixed，当这个元素获取焦点时，滚动网页光标便错位</p>\n<p><img src=\"http://web.xiaojw.xyz/blog_file/piaoyi.gif\" alt=\"无法展示图片\"></p>\n<blockquote>\n<p>遗憾的是，截至目前，iOS 11.x 上也有这个问题。</p>\n</blockquote>\n<h3 id=\"解决方法一-不使用fixed-布局\"><a href=\"#解决方法一-不使用fixed-布局\" class=\"headerlink\" title=\"解决方法一:不使用fixed 布局\"></a>解决方法一:不使用fixed 布局</h3><p>如果一定要使用请看下一种方法</p>\n<h3 id=\"解决方法二-动态改变布局方式\"><a href=\"#解决方法二-动态改变布局方式\" class=\"headerlink\" title=\"解决方法二:动态改变布局方式\"></a>解决方法二:动态改变布局方式</h3><p>当元素获取焦点时，改变父容器的定位方式：fixed &gt; absolute<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"built_in\">let</span> evt of [<span class=\"string\">'focus'</span>, <span class=\"string\">'blur'</span>]) &#123;</span><br><span class=\"line\">  const isFocus = evt === <span class=\"string\">'focus'</span></span><br><span class=\"line\">  const fn = isFocus ? <span class=\"string\">'add'</span> : <span class=\"string\">'remove'</span></span><br><span class=\"line\"></span><br><span class=\"line\">  inputDOMNode.addEventListener(evt, () =&gt; &#123;</span><br><span class=\"line\">    parentDOMNode.classList[fn](<span class=\"string\">'input-focus'</span>)</span><br><span class=\"line\">    htmlDOMNode.classList[fn](<span class=\"string\">'no-scroll'</span>)</span><br><span class=\"line\">    bodyDOMNode.classList[fn](<span class=\"string\">'no-scroll'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    isFocus &amp;&amp; setScrollTop(0)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.input-focus &#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.no-scroll &#123;</span><br><span class=\"line\">  height: 100%;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>监听了输入元素 focus 和 blur 事件，为父元素添加或移除某些样式。</p>\n<blockquote>\n<p>当 position: absolute 时，输入框的定位方式需要手动设置（这里采取了顶部对齐）；.no-scroll 是为了禁止 body 的滚动，保证输入框可见。</p>\n</blockquote>\n<p>但是这个方案在部分 Android 设备上，当键盘收起时并不会触发输入元素的 blur 事件，往往还需要用户主动点击页面的其他区域，算是一点小遗憾吧。</p>\n<p>所以监听改变前先判断手机是ios还是android android就不监听</p>\n<h3 id=\"解决方法三-直接给html-body元素设置样式-推荐\"><a href=\"#解决方法三-直接给html-body元素设置样式-推荐\" class=\"headerlink\" title=\"解决方法三:直接给html, body元素设置样式(推荐)\"></a>解决方法三:直接给html, body元素设置样式(推荐)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html,</span><br><span class=\"line\">body &#123;</span><br><span class=\"line\">  -webkit-overflow-scroll: touch !important;</span><br><span class=\"line\">  overflow: auto !important;</span><br><span class=\"line\">  height: 100% !important;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>-webkit-overflow-scrolling</code>控制元素在移动设备上是否使用滚动回弹效果。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-webkit-overflow-scrolling: touch; /* 当手指从触摸屏上移开，会保持一段时间的滚动 */</span><br><span class=\"line\">overflow: auto; /* 由浏览器定夺，如果内容被修剪，就会显示滚动条 */</span><br></pre></td></tr></table></figure></p>\n<p>当输入元素获取焦点时，键盘弹起，输入元素被顶到了键盘的上方，此时用户的手指会从触摸屏上移开，输入元素会保持一段时间的滚动，从而光标的位置可以被正确计算。</p>\n<blockquote>\n<p>!important 在这里是为了防止这些属性会因为浏览器优先级过高而发生变化。有点小遗憾的是，!important 侵入性有些高。</p>\n</blockquote>\n<h3 id=\"解决方法四-IOS系统修复\"><a href=\"#解决方法四-IOS系统修复\" class=\"headerlink\" title=\"解决方法四:IOS系统修复\"></a>解决方法四:IOS系统修复</h3><p>慢慢等,说不定下一次更新也没有修复</p>\n"},{"title":"vue-element-控制字段排序与显示小组件","date":"2019-01-04T07:32:38.000Z","_content":"## 效果\n![无法展示图片](http://web.xiaojw.xyz/blog_file/table.png)\n\n## 代码\ntable-column.vue\n```vue\n<template>\n    <div>\n        <el-table-column v-if=\"selection\" type=\"selection\" width=\"50\" fixed=\"left\"></el-table-column>\n        <el-table-column\n                v-for=\"(item,index) in list\" v-if=\"item.show\"\n                :prop=\"item.prop\" :label=\"item.label\" :min-width=\"item.width\" :fixed=\"index===0\">\n            <template scope=\"scope\">\n                <div v-if=\"item.prop==='rz'\" :style=\"{minWidth:item.width}\">\n                </div>\n                <div v-else :style=\"{minWidth:item.width}\">{{scope.row[item.prop]}}</div>\n            </template>\n        </el-table-column>\n    </div>\n</template>\n<script>\n    export default {\n        props: {\n            list: Array,\n            selection: Boolean\n        }\n    }\n</script>\n\n\n```\ncommon.js\n\n```javascript\nlet data = []\nswitch (this.$route.path) {\n    case '/order/inquiry':\n      data = [\n        {\n          list: [\n            {prop: 'name', label: '姓名', width: '100', show: true},\n            {prop: 'phone', label: '手机号', width: '150', show: true}\n          ],\n          title: '全部'\n        },\n        {\n              list: [\n                {prop: 'name', label: '姓名', width: '100', show: true},\n                {prop: 'status', label: '状态', width: '150', show: true}\n              ],\n              title: '未处理'\n            }\n      ]\n      break;\n    }\nthis.$emit('getShowContentListChange', data);\n```\n字段显示编辑组件\norder-setting.vue\n\n使用插件 vuedraggable\n```vue\n<template>\n  <div class=\"order-setting\">\n    <div class=\"inner-order-setting\"\n         v-if=\"$route.path.includes('order')&&!$route.path.includes('detail')\">\n      <span style=\"color: #999;font-size: 16px;\">显示字段</span>\n      <i class=\"icon fa fa-cog\" style=\"color: #999;font-size: 20px\" @click=\"dialog=true\"></i>\n    </div>\n    <el-dialog size=\"tiny\" title=\"显示字段\" :visible.sync=\"dialog\">\n      <div class=\"dialog-order-setting\">\n        <el-row type=\"flex\" justify=\"space-around\">\n          <el-col :span=\"14\">\n            <div class=\"main-title\">基础信息</div>\n            <hr class=\"long-one m-b-10\">\n            <el-checkbox\n              :indeterminate=\"isIndeterminate\"\n              v-model=\"checkAll\"\n              @change=\"handleCheckAllChange\">全选\n            </el-checkbox>\n            <div v-for=\"(outerItem,index) in showContentListArr\">\n              <hr class=\"one m-t-20 m-b-20\" v-if=\"index>=1\">\n              <!--:label=\"`${item.index}-${item.prop}`\"-->\n              <div>{{outerItem.title}}</div>\n              <el-checkbox\n                @change=\"handleCheckedChange\"\n                v-for=\"(item,index) in outerItem.list\"\n                v-model=\"item.show\"\n                :key=\"index\">{{item.label}}\n              </el-checkbox>\n            </div>\n\n          </el-col>\n          <el-col :span=\"10\">\n            <span class=\"main-title\" style=\"color: red;\">编辑顺序</span>\n            <hr class=\"long-one m-b-10\">\n            <el-radio-group v-model=\"active\" @change=\"activeChange\">\n              <el-radio :label=\"index\" v-for=\"(outerItem,index) in contentList\">{{outerItem.title}}\n              </el-radio>\n            </el-radio-group>\n            <draggable\n              v-model=\"showContentList\"\n              class=\"co-draggable\"\n              :options=\"{group:'people'}\"\n              @end=\"onSortStart($event,showContentList)\">\n              <transition-group>\n                <div v-for=\"(item,index) in showContentList\" :key=\"index.toString()\" v-if=\"item.show\">\n                  {{item.label}}\n                  <i @click=\"delTap(index)\" class=\"el-icon-close\"></i>\n                </div>\n              </transition-group>\n            </draggable>\n\n          </el-col>\n        </el-row>\n      </div>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button type=\"primary\" @click=\"save\">保存</el-button>\n        <el-button type=\"primary\" @click=\"reset\">重置</el-button>\n        <el-button type=\"primary\" @click=\"dialog=false\">取消</el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n<script>\n  import draggable from \"vuedraggable\";\n  import {mapGetters, mapMutations} from \"vuex\";\n\n  export default {\n    components: {\n      draggable\n    },\n    props: {\n      contentList: {\n        type: [Array, Object],\n        default() {\n          return [];\n        }\n      }\n    },\n    data() {\n      return {\n        dialog: false,\n        showContentList: [],\n        showContentListArr: [],\n        checkAll: false,\n        isIndeterminate: true,\n        active: 0,\n      };\n    },\n    methods: {\n      onSortStart(to, arr) {\n        this.showContentListArr[this.active].list = arr\n      },\n      save() {\n        let obj = Object.assign({}, this.getShowContentList, {\n          [this.$route.path]: this.showContentListArr\n        });\n        this.dialog = false;\n        this.setShowContentList(obj);\n        // 刷新页面 this.$router.go(0) 最好是转跳到一个刷新组件  router.replace({path: '/refresh', query: {path}})  在用组件里执行 router.replace({path: this.$route.query.path})\n      },\n      reset() {\n        this.clearShowContentList();\n        this.$router.go(0)\n      },\n      changeShowContent() {\n        if (this.$route.path.includes(\"order\")) {\n          this.showContentListArr = this.getShowContentList && this.getShowContentList[this.$route.path] ? this.getShowContentList[this.$route.path] : this.contentList\n          this.showContentList = this.showContentListArr[this.active].list\n          // console.log(this.showContentListArr)\n          this.$emit(\"onSubmit\", this.showContentListArr);\n        }\n      },\n      activeChange(active) {\n        this.showContentList = this.showContentListArr[active].list\n        // console.log(this.showContentList)\n      },\n      handleCheckAllChange(val) {\n        if (val) {\n          for (let i = 0; i < this.showContentListArr.length; i++) {\n            this.showContentListArr[i].list.forEach((item) => {\n              item.show = false\n            })\n          }\n        } else {\n          this.showContentListArr = this.contentList\n        }\n        this.showContentList = this.showContentListArr[this.active].list\n        this.isIndeterminate = true;\n      },\n      handleCheckedChange(value) {\n        let isCheckAll = false\n        let num = 0, total = 0\n        for (let i = 0; i < this.showContentListArr.length; i++) {\n          for (let n = 0; n < this.showContentListArr[i].list.length; n++) {\n            let item = this.showContentListArr[i].list[n]\n            if (item.show) {\n              isCheckAll = true\n              num++\n            }\n            total++\n          }\n        }\n        this.checkAll = isCheckAll;\n        this.isIndeterminate = num > 0 && num < total;\n      },\n      delTap(index) {\n        this.showContentList[index].show = false;\n      },\n      ...mapMutations({\n        setShowContentList: \"setShowContentList\",\n        clearShowContentList: \"clearShowContentList\",\n      })\n    },\n    computed: {\n      ...mapGetters([\"getShowContentList\"])\n    },\n    created() {\n        this.changeShowContent();\n    },\n    watch: {\n      contentList() {\n        this.changeShowContent();\n      }\n    }\n  };\n</script>\n<style>\n  .dialog-order-setting .el-checkbox {\n    margin-left: 0;\n    margin-right: 30px;\n    width: 100px;\n  }\n\n  .dialog-order-setting .el-radio {\n    width: 100px;\n    margin: 0 30px 10px 0;\n  }\n\n  .co-draggable div {\n    padding: 6px 20px;\n    cursor: all-scroll;\n    border: 1px solid #e6e6e6;\n    margin-bottom: 8px;\n    border-radius: 4px;\n    color: #363b42;\n  }\n\n  .co-draggable div i {\n    float: right;\n    color: #266298;\n    font-size: 18px;\n    vertical-align: middle;\n    cursor: pointer;\n  }\n</style>\n\n```\n\nvuex getting.js\n```javascript\n\nconst getters = {\n    getShowContentList: state => state.showContentList\n}\n\nexport default getters\n\n\n```\nvuex mutations.js\n\n使用插件 Lockr\n```javascript\nimport Lockr from 'lockr'\n\nconst mutations = {\n     setShowContentList(state, showContentList) {\n            if (showContentList) {\n                state.showContentList = showContentList;\n                Lockr.set('showContentList', showContentList)\n            }\n        },\n        clearShowContentList(state) {\n            state.showContentList = null;\n            Lockr.rm('showContentList')\n        },\n}\nexport default mutations\n\n\n```\n\nvuex state.js\n```javascript\nimport Lockr from 'lockr'\n\nconst state = {\n    showContentList: Lockr.get('showContentList') || []\n}\nexport default state\n```\n\n使用的地方\n```vue\n<template>\n    <div>\n        <el-table :data=\"tableData\" style=\"width: 100%\" stripe>\n            <table-column :selection=\"true\" :list=\"showContentList[0].list\"></table-column>\n            <el-table-column label=\"操作\" width=\"80\" fixed=\"right\">\n                <template scope=\"scope\">\n                </template>\n            </el-table-column>\n        </el-table>\n    </div>\n</template>\n<script>\nimport tableColumn from 'common/table-column'\n\nexport default {\n   props: ['showContentList'],  \n   data(){\n       return {\n           tableData:[]\n       }\n   }\n}\n</script>\n\n```\n\n\n","source":"_posts/vue-element-控制字段排序与显示小组件.md","raw":"---\ntitle: vue-element-控制字段排序与显示小组件\ndate: 2019-01-04 15:32:38\ncategories: ['前端'] \ntags: 前端\n\n---\n## 效果\n![无法展示图片](http://web.xiaojw.xyz/blog_file/table.png)\n\n## 代码\ntable-column.vue\n```vue\n<template>\n    <div>\n        <el-table-column v-if=\"selection\" type=\"selection\" width=\"50\" fixed=\"left\"></el-table-column>\n        <el-table-column\n                v-for=\"(item,index) in list\" v-if=\"item.show\"\n                :prop=\"item.prop\" :label=\"item.label\" :min-width=\"item.width\" :fixed=\"index===0\">\n            <template scope=\"scope\">\n                <div v-if=\"item.prop==='rz'\" :style=\"{minWidth:item.width}\">\n                </div>\n                <div v-else :style=\"{minWidth:item.width}\">{{scope.row[item.prop]}}</div>\n            </template>\n        </el-table-column>\n    </div>\n</template>\n<script>\n    export default {\n        props: {\n            list: Array,\n            selection: Boolean\n        }\n    }\n</script>\n\n\n```\ncommon.js\n\n```javascript\nlet data = []\nswitch (this.$route.path) {\n    case '/order/inquiry':\n      data = [\n        {\n          list: [\n            {prop: 'name', label: '姓名', width: '100', show: true},\n            {prop: 'phone', label: '手机号', width: '150', show: true}\n          ],\n          title: '全部'\n        },\n        {\n              list: [\n                {prop: 'name', label: '姓名', width: '100', show: true},\n                {prop: 'status', label: '状态', width: '150', show: true}\n              ],\n              title: '未处理'\n            }\n      ]\n      break;\n    }\nthis.$emit('getShowContentListChange', data);\n```\n字段显示编辑组件\norder-setting.vue\n\n使用插件 vuedraggable\n```vue\n<template>\n  <div class=\"order-setting\">\n    <div class=\"inner-order-setting\"\n         v-if=\"$route.path.includes('order')&&!$route.path.includes('detail')\">\n      <span style=\"color: #999;font-size: 16px;\">显示字段</span>\n      <i class=\"icon fa fa-cog\" style=\"color: #999;font-size: 20px\" @click=\"dialog=true\"></i>\n    </div>\n    <el-dialog size=\"tiny\" title=\"显示字段\" :visible.sync=\"dialog\">\n      <div class=\"dialog-order-setting\">\n        <el-row type=\"flex\" justify=\"space-around\">\n          <el-col :span=\"14\">\n            <div class=\"main-title\">基础信息</div>\n            <hr class=\"long-one m-b-10\">\n            <el-checkbox\n              :indeterminate=\"isIndeterminate\"\n              v-model=\"checkAll\"\n              @change=\"handleCheckAllChange\">全选\n            </el-checkbox>\n            <div v-for=\"(outerItem,index) in showContentListArr\">\n              <hr class=\"one m-t-20 m-b-20\" v-if=\"index>=1\">\n              <!--:label=\"`${item.index}-${item.prop}`\"-->\n              <div>{{outerItem.title}}</div>\n              <el-checkbox\n                @change=\"handleCheckedChange\"\n                v-for=\"(item,index) in outerItem.list\"\n                v-model=\"item.show\"\n                :key=\"index\">{{item.label}}\n              </el-checkbox>\n            </div>\n\n          </el-col>\n          <el-col :span=\"10\">\n            <span class=\"main-title\" style=\"color: red;\">编辑顺序</span>\n            <hr class=\"long-one m-b-10\">\n            <el-radio-group v-model=\"active\" @change=\"activeChange\">\n              <el-radio :label=\"index\" v-for=\"(outerItem,index) in contentList\">{{outerItem.title}}\n              </el-radio>\n            </el-radio-group>\n            <draggable\n              v-model=\"showContentList\"\n              class=\"co-draggable\"\n              :options=\"{group:'people'}\"\n              @end=\"onSortStart($event,showContentList)\">\n              <transition-group>\n                <div v-for=\"(item,index) in showContentList\" :key=\"index.toString()\" v-if=\"item.show\">\n                  {{item.label}}\n                  <i @click=\"delTap(index)\" class=\"el-icon-close\"></i>\n                </div>\n              </transition-group>\n            </draggable>\n\n          </el-col>\n        </el-row>\n      </div>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button type=\"primary\" @click=\"save\">保存</el-button>\n        <el-button type=\"primary\" @click=\"reset\">重置</el-button>\n        <el-button type=\"primary\" @click=\"dialog=false\">取消</el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n<script>\n  import draggable from \"vuedraggable\";\n  import {mapGetters, mapMutations} from \"vuex\";\n\n  export default {\n    components: {\n      draggable\n    },\n    props: {\n      contentList: {\n        type: [Array, Object],\n        default() {\n          return [];\n        }\n      }\n    },\n    data() {\n      return {\n        dialog: false,\n        showContentList: [],\n        showContentListArr: [],\n        checkAll: false,\n        isIndeterminate: true,\n        active: 0,\n      };\n    },\n    methods: {\n      onSortStart(to, arr) {\n        this.showContentListArr[this.active].list = arr\n      },\n      save() {\n        let obj = Object.assign({}, this.getShowContentList, {\n          [this.$route.path]: this.showContentListArr\n        });\n        this.dialog = false;\n        this.setShowContentList(obj);\n        // 刷新页面 this.$router.go(0) 最好是转跳到一个刷新组件  router.replace({path: '/refresh', query: {path}})  在用组件里执行 router.replace({path: this.$route.query.path})\n      },\n      reset() {\n        this.clearShowContentList();\n        this.$router.go(0)\n      },\n      changeShowContent() {\n        if (this.$route.path.includes(\"order\")) {\n          this.showContentListArr = this.getShowContentList && this.getShowContentList[this.$route.path] ? this.getShowContentList[this.$route.path] : this.contentList\n          this.showContentList = this.showContentListArr[this.active].list\n          // console.log(this.showContentListArr)\n          this.$emit(\"onSubmit\", this.showContentListArr);\n        }\n      },\n      activeChange(active) {\n        this.showContentList = this.showContentListArr[active].list\n        // console.log(this.showContentList)\n      },\n      handleCheckAllChange(val) {\n        if (val) {\n          for (let i = 0; i < this.showContentListArr.length; i++) {\n            this.showContentListArr[i].list.forEach((item) => {\n              item.show = false\n            })\n          }\n        } else {\n          this.showContentListArr = this.contentList\n        }\n        this.showContentList = this.showContentListArr[this.active].list\n        this.isIndeterminate = true;\n      },\n      handleCheckedChange(value) {\n        let isCheckAll = false\n        let num = 0, total = 0\n        for (let i = 0; i < this.showContentListArr.length; i++) {\n          for (let n = 0; n < this.showContentListArr[i].list.length; n++) {\n            let item = this.showContentListArr[i].list[n]\n            if (item.show) {\n              isCheckAll = true\n              num++\n            }\n            total++\n          }\n        }\n        this.checkAll = isCheckAll;\n        this.isIndeterminate = num > 0 && num < total;\n      },\n      delTap(index) {\n        this.showContentList[index].show = false;\n      },\n      ...mapMutations({\n        setShowContentList: \"setShowContentList\",\n        clearShowContentList: \"clearShowContentList\",\n      })\n    },\n    computed: {\n      ...mapGetters([\"getShowContentList\"])\n    },\n    created() {\n        this.changeShowContent();\n    },\n    watch: {\n      contentList() {\n        this.changeShowContent();\n      }\n    }\n  };\n</script>\n<style>\n  .dialog-order-setting .el-checkbox {\n    margin-left: 0;\n    margin-right: 30px;\n    width: 100px;\n  }\n\n  .dialog-order-setting .el-radio {\n    width: 100px;\n    margin: 0 30px 10px 0;\n  }\n\n  .co-draggable div {\n    padding: 6px 20px;\n    cursor: all-scroll;\n    border: 1px solid #e6e6e6;\n    margin-bottom: 8px;\n    border-radius: 4px;\n    color: #363b42;\n  }\n\n  .co-draggable div i {\n    float: right;\n    color: #266298;\n    font-size: 18px;\n    vertical-align: middle;\n    cursor: pointer;\n  }\n</style>\n\n```\n\nvuex getting.js\n```javascript\n\nconst getters = {\n    getShowContentList: state => state.showContentList\n}\n\nexport default getters\n\n\n```\nvuex mutations.js\n\n使用插件 Lockr\n```javascript\nimport Lockr from 'lockr'\n\nconst mutations = {\n     setShowContentList(state, showContentList) {\n            if (showContentList) {\n                state.showContentList = showContentList;\n                Lockr.set('showContentList', showContentList)\n            }\n        },\n        clearShowContentList(state) {\n            state.showContentList = null;\n            Lockr.rm('showContentList')\n        },\n}\nexport default mutations\n\n\n```\n\nvuex state.js\n```javascript\nimport Lockr from 'lockr'\n\nconst state = {\n    showContentList: Lockr.get('showContentList') || []\n}\nexport default state\n```\n\n使用的地方\n```vue\n<template>\n    <div>\n        <el-table :data=\"tableData\" style=\"width: 100%\" stripe>\n            <table-column :selection=\"true\" :list=\"showContentList[0].list\"></table-column>\n            <el-table-column label=\"操作\" width=\"80\" fixed=\"right\">\n                <template scope=\"scope\">\n                </template>\n            </el-table-column>\n        </el-table>\n    </div>\n</template>\n<script>\nimport tableColumn from 'common/table-column'\n\nexport default {\n   props: ['showContentList'],  \n   data(){\n       return {\n           tableData:[]\n       }\n   }\n}\n</script>\n\n```\n\n\n","slug":"vue-element-控制字段排序与显示小组件","published":1,"updated":"2019-01-09T02:00:41.595Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqojjnmu0006uwkq23pki5wb","content":"<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p><img src=\"http://web.xiaojw.xyz/blog_file/table.png\" alt=\"无法展示图片\"></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>table-column.vue<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;el-table-column v-if=&quot;selection&quot; type=&quot;selection&quot; width=&quot;50&quot; fixed=&quot;left&quot;&gt;&lt;/el-table-column&gt;</span><br><span class=\"line\">        &lt;el-table-column</span><br><span class=\"line\">                v-for=&quot;(item,index) in list&quot; v-if=&quot;item.show&quot;</span><br><span class=\"line\">                :prop=&quot;item.prop&quot; :label=&quot;item.label&quot; :min-width=&quot;item.width&quot; :fixed=&quot;index===0&quot;&gt;</span><br><span class=\"line\">            &lt;template scope=&quot;scope&quot;&gt;</span><br><span class=\"line\">                &lt;div v-if=&quot;item.prop===&apos;rz&apos;&quot; :style=&quot;&#123;minWidth:item.width&#125;&quot;&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">                &lt;div v-else :style=&quot;&#123;minWidth:item.width&#125;&quot;&gt;&#123;&#123;scope.row[item.prop]&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">            &lt;/template&gt;</span><br><span class=\"line\">        &lt;/el-table-column&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    export default &#123;</span><br><span class=\"line\">        props: &#123;</span><br><span class=\"line\">            list: Array,</span><br><span class=\"line\">            selection: Boolean</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>common.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> data = []</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (<span class=\"keyword\">this</span>.$route.path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'/order/inquiry'</span>:</span><br><span class=\"line\">      data = [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          list: [</span><br><span class=\"line\">            &#123;<span class=\"attr\">prop</span>: <span class=\"string\">'name'</span>, <span class=\"attr\">label</span>: <span class=\"string\">'姓名'</span>, <span class=\"attr\">width</span>: <span class=\"string\">'100'</span>, <span class=\"attr\">show</span>: <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"attr\">prop</span>: <span class=\"string\">'phone'</span>, <span class=\"attr\">label</span>: <span class=\"string\">'手机号'</span>, <span class=\"attr\">width</span>: <span class=\"string\">'150'</span>, <span class=\"attr\">show</span>: <span class=\"literal\">true</span>&#125;</span><br><span class=\"line\">          ],</span><br><span class=\"line\">          title: <span class=\"string\">'全部'</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">              list: [</span><br><span class=\"line\">                &#123;<span class=\"attr\">prop</span>: <span class=\"string\">'name'</span>, <span class=\"attr\">label</span>: <span class=\"string\">'姓名'</span>, <span class=\"attr\">width</span>: <span class=\"string\">'100'</span>, <span class=\"attr\">show</span>: <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">                &#123;<span class=\"attr\">prop</span>: <span class=\"string\">'status'</span>, <span class=\"attr\">label</span>: <span class=\"string\">'状态'</span>, <span class=\"attr\">width</span>: <span class=\"string\">'150'</span>, <span class=\"attr\">show</span>: <span class=\"literal\">true</span>&#125;</span><br><span class=\"line\">              ],</span><br><span class=\"line\">              title: <span class=\"string\">'未处理'</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">this</span>.$emit(<span class=\"string\">'getShowContentListChange'</span>, data);</span><br></pre></td></tr></table></figure>\n<p>字段显示编辑组件<br>order-setting.vue</p>\n<p>使用插件 vuedraggable<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;order-setting&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;inner-order-setting&quot;</span><br><span class=\"line\">         v-if=&quot;$route.path.includes(&apos;order&apos;)&amp;&amp;!$route.path.includes(&apos;detail&apos;)&quot;&gt;</span><br><span class=\"line\">      &lt;span style=&quot;color: #999;font-size: 16px;&quot;&gt;显示字段&lt;/span&gt;</span><br><span class=\"line\">      &lt;i class=&quot;icon fa fa-cog&quot; style=&quot;color: #999;font-size: 20px&quot; @click=&quot;dialog=true&quot;&gt;&lt;/i&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;el-dialog size=&quot;tiny&quot; title=&quot;显示字段&quot; :visible.sync=&quot;dialog&quot;&gt;</span><br><span class=\"line\">      &lt;div class=&quot;dialog-order-setting&quot;&gt;</span><br><span class=\"line\">        &lt;el-row type=&quot;flex&quot; justify=&quot;space-around&quot;&gt;</span><br><span class=\"line\">          &lt;el-col :span=&quot;14&quot;&gt;</span><br><span class=\"line\">            &lt;div class=&quot;main-title&quot;&gt;基础信息&lt;/div&gt;</span><br><span class=\"line\">            &lt;hr class=&quot;long-one m-b-10&quot;&gt;</span><br><span class=\"line\">            &lt;el-checkbox</span><br><span class=\"line\">              :indeterminate=&quot;isIndeterminate&quot;</span><br><span class=\"line\">              v-model=&quot;checkAll&quot;</span><br><span class=\"line\">              @change=&quot;handleCheckAllChange&quot;&gt;全选</span><br><span class=\"line\">            &lt;/el-checkbox&gt;</span><br><span class=\"line\">            &lt;div v-for=&quot;(outerItem,index) in showContentListArr&quot;&gt;</span><br><span class=\"line\">              &lt;hr class=&quot;one m-t-20 m-b-20&quot; v-if=&quot;index&gt;=1&quot;&gt;</span><br><span class=\"line\">              &lt;!--:label=&quot;`$&#123;item.index&#125;-$&#123;item.prop&#125;`&quot;--&gt;</span><br><span class=\"line\">              &lt;div&gt;&#123;&#123;outerItem.title&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">              &lt;el-checkbox</span><br><span class=\"line\">                @change=&quot;handleCheckedChange&quot;</span><br><span class=\"line\">                v-for=&quot;(item,index) in outerItem.list&quot;</span><br><span class=\"line\">                v-model=&quot;item.show&quot;</span><br><span class=\"line\">                :key=&quot;index&quot;&gt;&#123;&#123;item.label&#125;&#125;</span><br><span class=\"line\">              &lt;/el-checkbox&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;/el-col&gt;</span><br><span class=\"line\">          &lt;el-col :span=&quot;10&quot;&gt;</span><br><span class=\"line\">            &lt;span class=&quot;main-title&quot; style=&quot;color: red;&quot;&gt;编辑顺序&lt;/span&gt;</span><br><span class=\"line\">            &lt;hr class=&quot;long-one m-b-10&quot;&gt;</span><br><span class=\"line\">            &lt;el-radio-group v-model=&quot;active&quot; @change=&quot;activeChange&quot;&gt;</span><br><span class=\"line\">              &lt;el-radio :label=&quot;index&quot; v-for=&quot;(outerItem,index) in contentList&quot;&gt;&#123;&#123;outerItem.title&#125;&#125;</span><br><span class=\"line\">              &lt;/el-radio&gt;</span><br><span class=\"line\">            &lt;/el-radio-group&gt;</span><br><span class=\"line\">            &lt;draggable</span><br><span class=\"line\">              v-model=&quot;showContentList&quot;</span><br><span class=\"line\">              class=&quot;co-draggable&quot;</span><br><span class=\"line\">              :options=&quot;&#123;group:&apos;people&apos;&#125;&quot;</span><br><span class=\"line\">              @end=&quot;onSortStart($event,showContentList)&quot;&gt;</span><br><span class=\"line\">              &lt;transition-group&gt;</span><br><span class=\"line\">                &lt;div v-for=&quot;(item,index) in showContentList&quot; :key=&quot;index.toString()&quot; v-if=&quot;item.show&quot;&gt;</span><br><span class=\"line\">                  &#123;&#123;item.label&#125;&#125;</span><br><span class=\"line\">                  &lt;i @click=&quot;delTap(index)&quot; class=&quot;el-icon-close&quot;&gt;&lt;/i&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">              &lt;/transition-group&gt;</span><br><span class=\"line\">            &lt;/draggable&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;/el-col&gt;</span><br><span class=\"line\">        &lt;/el-row&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;div slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;</span><br><span class=\"line\">        &lt;el-button type=&quot;primary&quot; @click=&quot;save&quot;&gt;保存&lt;/el-button&gt;</span><br><span class=\"line\">        &lt;el-button type=&quot;primary&quot; @click=&quot;reset&quot;&gt;重置&lt;/el-button&gt;</span><br><span class=\"line\">        &lt;el-button type=&quot;primary&quot; @click=&quot;dialog=false&quot;&gt;取消&lt;/el-button&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    &lt;/el-dialog&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  import draggable from &quot;vuedraggable&quot;;</span><br><span class=\"line\">  import &#123;mapGetters, mapMutations&#125; from &quot;vuex&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">      draggable</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    props: &#123;</span><br><span class=\"line\">      contentList: &#123;</span><br><span class=\"line\">        type: [Array, Object],</span><br><span class=\"line\">        default() &#123;</span><br><span class=\"line\">          return [];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        dialog: false,</span><br><span class=\"line\">        showContentList: [],</span><br><span class=\"line\">        showContentListArr: [],</span><br><span class=\"line\">        checkAll: false,</span><br><span class=\"line\">        isIndeterminate: true,</span><br><span class=\"line\">        active: 0,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      onSortStart(to, arr) &#123;</span><br><span class=\"line\">        this.showContentListArr[this.active].list = arr</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      save() &#123;</span><br><span class=\"line\">        let obj = Object.assign(&#123;&#125;, this.getShowContentList, &#123;</span><br><span class=\"line\">          [this.$route.path]: this.showContentListArr</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        this.dialog = false;</span><br><span class=\"line\">        this.setShowContentList(obj);</span><br><span class=\"line\">        // 刷新页面 this.$router.go(0) 最好是转跳到一个刷新组件  router.replace(&#123;path: &apos;/refresh&apos;, query: &#123;path&#125;&#125;)  在用组件里执行 router.replace(&#123;path: this.$route.query.path&#125;)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      reset() &#123;</span><br><span class=\"line\">        this.clearShowContentList();</span><br><span class=\"line\">        this.$router.go(0)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      changeShowContent() &#123;</span><br><span class=\"line\">        if (this.$route.path.includes(&quot;order&quot;)) &#123;</span><br><span class=\"line\">          this.showContentListArr = this.getShowContentList &amp;&amp; this.getShowContentList[this.$route.path] ? this.getShowContentList[this.$route.path] : this.contentList</span><br><span class=\"line\">          this.showContentList = this.showContentListArr[this.active].list</span><br><span class=\"line\">          // console.log(this.showContentListArr)</span><br><span class=\"line\">          this.$emit(&quot;onSubmit&quot;, this.showContentListArr);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      activeChange(active) &#123;</span><br><span class=\"line\">        this.showContentList = this.showContentListArr[active].list</span><br><span class=\"line\">        // console.log(this.showContentList)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      handleCheckAllChange(val) &#123;</span><br><span class=\"line\">        if (val) &#123;</span><br><span class=\"line\">          for (let i = 0; i &lt; this.showContentListArr.length; i++) &#123;</span><br><span class=\"line\">            this.showContentListArr[i].list.forEach((item) =&gt; &#123;</span><br><span class=\"line\">              item.show = false</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          this.showContentListArr = this.contentList</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.showContentList = this.showContentListArr[this.active].list</span><br><span class=\"line\">        this.isIndeterminate = true;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      handleCheckedChange(value) &#123;</span><br><span class=\"line\">        let isCheckAll = false</span><br><span class=\"line\">        let num = 0, total = 0</span><br><span class=\"line\">        for (let i = 0; i &lt; this.showContentListArr.length; i++) &#123;</span><br><span class=\"line\">          for (let n = 0; n &lt; this.showContentListArr[i].list.length; n++) &#123;</span><br><span class=\"line\">            let item = this.showContentListArr[i].list[n]</span><br><span class=\"line\">            if (item.show) &#123;</span><br><span class=\"line\">              isCheckAll = true</span><br><span class=\"line\">              num++</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            total++</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.checkAll = isCheckAll;</span><br><span class=\"line\">        this.isIndeterminate = num &gt; 0 &amp;&amp; num &lt; total;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      delTap(index) &#123;</span><br><span class=\"line\">        this.showContentList[index].show = false;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      ...mapMutations(&#123;</span><br><span class=\"line\">        setShowContentList: &quot;setShowContentList&quot;,</span><br><span class=\"line\">        clearShowContentList: &quot;clearShowContentList&quot;,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    computed: &#123;</span><br><span class=\"line\">      ...mapGetters([&quot;getShowContentList&quot;])</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    created() &#123;</span><br><span class=\"line\">        this.changeShowContent();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    watch: &#123;</span><br><span class=\"line\">      contentList() &#123;</span><br><span class=\"line\">        this.changeShowContent();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  .dialog-order-setting .el-checkbox &#123;</span><br><span class=\"line\">    margin-left: 0;</span><br><span class=\"line\">    margin-right: 30px;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .dialog-order-setting .el-radio &#123;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    margin: 0 30px 10px 0;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .co-draggable div &#123;</span><br><span class=\"line\">    padding: 6px 20px;</span><br><span class=\"line\">    cursor: all-scroll;</span><br><span class=\"line\">    border: 1px solid #e6e6e6;</span><br><span class=\"line\">    margin-bottom: 8px;</span><br><span class=\"line\">    border-radius: 4px;</span><br><span class=\"line\">    color: #363b42;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .co-draggable div i &#123;</span><br><span class=\"line\">    float: right;</span><br><span class=\"line\">    color: #266298;</span><br><span class=\"line\">    font-size: 18px;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\">    cursor: pointer;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>\n<p>vuex getting.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getters = &#123;</span><br><span class=\"line\">    getShowContentList: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.showContentList</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> getters</span><br></pre></td></tr></table></figure></p>\n<p>vuex mutations.js</p>\n<p>使用插件 Lockr<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Lockr <span class=\"keyword\">from</span> <span class=\"string\">'lockr'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">     setShowContentList(state, showContentList) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (showContentList) &#123;</span><br><span class=\"line\">                state.showContentList = showContentList;</span><br><span class=\"line\">                Lockr.set(<span class=\"string\">'showContentList'</span>, showContentList)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        clearShowContentList(state) &#123;</span><br><span class=\"line\">            state.showContentList = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            Lockr.rm(<span class=\"string\">'showContentList'</span>)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> mutations</span><br></pre></td></tr></table></figure></p>\n<p>vuex state.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Lockr <span class=\"keyword\">from</span> <span class=\"string\">'lockr'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> state = &#123;</span><br><span class=\"line\">    showContentList: Lockr.get(<span class=\"string\">'showContentList'</span>) || []</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> state</span><br></pre></td></tr></table></figure></p>\n<p>使用的地方<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;el-table :data=&quot;tableData&quot; style=&quot;width: 100%&quot; stripe&gt;</span><br><span class=\"line\">            &lt;table-column :selection=&quot;true&quot; :list=&quot;showContentList[0].list&quot;&gt;&lt;/table-column&gt;</span><br><span class=\"line\">            &lt;el-table-column label=&quot;操作&quot; width=&quot;80&quot; fixed=&quot;right&quot;&gt;</span><br><span class=\"line\">                &lt;template scope=&quot;scope&quot;&gt;</span><br><span class=\"line\">                &lt;/template&gt;</span><br><span class=\"line\">            &lt;/el-table-column&gt;</span><br><span class=\"line\">        &lt;/el-table&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import tableColumn from &apos;common/table-column&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">   props: [&apos;showContentList&apos;],  </span><br><span class=\"line\">   data()&#123;</span><br><span class=\"line\">       return &#123;</span><br><span class=\"line\">           tableData:[]</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p><img src=\"http://web.xiaojw.xyz/blog_file/table.png\" alt=\"无法展示图片\"></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>table-column.vue<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;el-table-column v-if=&quot;selection&quot; type=&quot;selection&quot; width=&quot;50&quot; fixed=&quot;left&quot;&gt;&lt;/el-table-column&gt;</span><br><span class=\"line\">        &lt;el-table-column</span><br><span class=\"line\">                v-for=&quot;(item,index) in list&quot; v-if=&quot;item.show&quot;</span><br><span class=\"line\">                :prop=&quot;item.prop&quot; :label=&quot;item.label&quot; :min-width=&quot;item.width&quot; :fixed=&quot;index===0&quot;&gt;</span><br><span class=\"line\">            &lt;template scope=&quot;scope&quot;&gt;</span><br><span class=\"line\">                &lt;div v-if=&quot;item.prop===&apos;rz&apos;&quot; :style=&quot;&#123;minWidth:item.width&#125;&quot;&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">                &lt;div v-else :style=&quot;&#123;minWidth:item.width&#125;&quot;&gt;&#123;&#123;scope.row[item.prop]&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">            &lt;/template&gt;</span><br><span class=\"line\">        &lt;/el-table-column&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    export default &#123;</span><br><span class=\"line\">        props: &#123;</span><br><span class=\"line\">            list: Array,</span><br><span class=\"line\">            selection: Boolean</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>common.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> data = []</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (<span class=\"keyword\">this</span>.$route.path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'/order/inquiry'</span>:</span><br><span class=\"line\">      data = [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          list: [</span><br><span class=\"line\">            &#123;<span class=\"attr\">prop</span>: <span class=\"string\">'name'</span>, <span class=\"attr\">label</span>: <span class=\"string\">'姓名'</span>, <span class=\"attr\">width</span>: <span class=\"string\">'100'</span>, <span class=\"attr\">show</span>: <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"attr\">prop</span>: <span class=\"string\">'phone'</span>, <span class=\"attr\">label</span>: <span class=\"string\">'手机号'</span>, <span class=\"attr\">width</span>: <span class=\"string\">'150'</span>, <span class=\"attr\">show</span>: <span class=\"literal\">true</span>&#125;</span><br><span class=\"line\">          ],</span><br><span class=\"line\">          title: <span class=\"string\">'全部'</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">              list: [</span><br><span class=\"line\">                &#123;<span class=\"attr\">prop</span>: <span class=\"string\">'name'</span>, <span class=\"attr\">label</span>: <span class=\"string\">'姓名'</span>, <span class=\"attr\">width</span>: <span class=\"string\">'100'</span>, <span class=\"attr\">show</span>: <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">                &#123;<span class=\"attr\">prop</span>: <span class=\"string\">'status'</span>, <span class=\"attr\">label</span>: <span class=\"string\">'状态'</span>, <span class=\"attr\">width</span>: <span class=\"string\">'150'</span>, <span class=\"attr\">show</span>: <span class=\"literal\">true</span>&#125;</span><br><span class=\"line\">              ],</span><br><span class=\"line\">              title: <span class=\"string\">'未处理'</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">this</span>.$emit(<span class=\"string\">'getShowContentListChange'</span>, data);</span><br></pre></td></tr></table></figure>\n<p>字段显示编辑组件<br>order-setting.vue</p>\n<p>使用插件 vuedraggable<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;order-setting&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;inner-order-setting&quot;</span><br><span class=\"line\">         v-if=&quot;$route.path.includes(&apos;order&apos;)&amp;&amp;!$route.path.includes(&apos;detail&apos;)&quot;&gt;</span><br><span class=\"line\">      &lt;span style=&quot;color: #999;font-size: 16px;&quot;&gt;显示字段&lt;/span&gt;</span><br><span class=\"line\">      &lt;i class=&quot;icon fa fa-cog&quot; style=&quot;color: #999;font-size: 20px&quot; @click=&quot;dialog=true&quot;&gt;&lt;/i&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;el-dialog size=&quot;tiny&quot; title=&quot;显示字段&quot; :visible.sync=&quot;dialog&quot;&gt;</span><br><span class=\"line\">      &lt;div class=&quot;dialog-order-setting&quot;&gt;</span><br><span class=\"line\">        &lt;el-row type=&quot;flex&quot; justify=&quot;space-around&quot;&gt;</span><br><span class=\"line\">          &lt;el-col :span=&quot;14&quot;&gt;</span><br><span class=\"line\">            &lt;div class=&quot;main-title&quot;&gt;基础信息&lt;/div&gt;</span><br><span class=\"line\">            &lt;hr class=&quot;long-one m-b-10&quot;&gt;</span><br><span class=\"line\">            &lt;el-checkbox</span><br><span class=\"line\">              :indeterminate=&quot;isIndeterminate&quot;</span><br><span class=\"line\">              v-model=&quot;checkAll&quot;</span><br><span class=\"line\">              @change=&quot;handleCheckAllChange&quot;&gt;全选</span><br><span class=\"line\">            &lt;/el-checkbox&gt;</span><br><span class=\"line\">            &lt;div v-for=&quot;(outerItem,index) in showContentListArr&quot;&gt;</span><br><span class=\"line\">              &lt;hr class=&quot;one m-t-20 m-b-20&quot; v-if=&quot;index&gt;=1&quot;&gt;</span><br><span class=\"line\">              &lt;!--:label=&quot;`$&#123;item.index&#125;-$&#123;item.prop&#125;`&quot;--&gt;</span><br><span class=\"line\">              &lt;div&gt;&#123;&#123;outerItem.title&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">              &lt;el-checkbox</span><br><span class=\"line\">                @change=&quot;handleCheckedChange&quot;</span><br><span class=\"line\">                v-for=&quot;(item,index) in outerItem.list&quot;</span><br><span class=\"line\">                v-model=&quot;item.show&quot;</span><br><span class=\"line\">                :key=&quot;index&quot;&gt;&#123;&#123;item.label&#125;&#125;</span><br><span class=\"line\">              &lt;/el-checkbox&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;/el-col&gt;</span><br><span class=\"line\">          &lt;el-col :span=&quot;10&quot;&gt;</span><br><span class=\"line\">            &lt;span class=&quot;main-title&quot; style=&quot;color: red;&quot;&gt;编辑顺序&lt;/span&gt;</span><br><span class=\"line\">            &lt;hr class=&quot;long-one m-b-10&quot;&gt;</span><br><span class=\"line\">            &lt;el-radio-group v-model=&quot;active&quot; @change=&quot;activeChange&quot;&gt;</span><br><span class=\"line\">              &lt;el-radio :label=&quot;index&quot; v-for=&quot;(outerItem,index) in contentList&quot;&gt;&#123;&#123;outerItem.title&#125;&#125;</span><br><span class=\"line\">              &lt;/el-radio&gt;</span><br><span class=\"line\">            &lt;/el-radio-group&gt;</span><br><span class=\"line\">            &lt;draggable</span><br><span class=\"line\">              v-model=&quot;showContentList&quot;</span><br><span class=\"line\">              class=&quot;co-draggable&quot;</span><br><span class=\"line\">              :options=&quot;&#123;group:&apos;people&apos;&#125;&quot;</span><br><span class=\"line\">              @end=&quot;onSortStart($event,showContentList)&quot;&gt;</span><br><span class=\"line\">              &lt;transition-group&gt;</span><br><span class=\"line\">                &lt;div v-for=&quot;(item,index) in showContentList&quot; :key=&quot;index.toString()&quot; v-if=&quot;item.show&quot;&gt;</span><br><span class=\"line\">                  &#123;&#123;item.label&#125;&#125;</span><br><span class=\"line\">                  &lt;i @click=&quot;delTap(index)&quot; class=&quot;el-icon-close&quot;&gt;&lt;/i&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">              &lt;/transition-group&gt;</span><br><span class=\"line\">            &lt;/draggable&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;/el-col&gt;</span><br><span class=\"line\">        &lt;/el-row&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;div slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;</span><br><span class=\"line\">        &lt;el-button type=&quot;primary&quot; @click=&quot;save&quot;&gt;保存&lt;/el-button&gt;</span><br><span class=\"line\">        &lt;el-button type=&quot;primary&quot; @click=&quot;reset&quot;&gt;重置&lt;/el-button&gt;</span><br><span class=\"line\">        &lt;el-button type=&quot;primary&quot; @click=&quot;dialog=false&quot;&gt;取消&lt;/el-button&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    &lt;/el-dialog&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  import draggable from &quot;vuedraggable&quot;;</span><br><span class=\"line\">  import &#123;mapGetters, mapMutations&#125; from &quot;vuex&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">      draggable</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    props: &#123;</span><br><span class=\"line\">      contentList: &#123;</span><br><span class=\"line\">        type: [Array, Object],</span><br><span class=\"line\">        default() &#123;</span><br><span class=\"line\">          return [];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        dialog: false,</span><br><span class=\"line\">        showContentList: [],</span><br><span class=\"line\">        showContentListArr: [],</span><br><span class=\"line\">        checkAll: false,</span><br><span class=\"line\">        isIndeterminate: true,</span><br><span class=\"line\">        active: 0,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      onSortStart(to, arr) &#123;</span><br><span class=\"line\">        this.showContentListArr[this.active].list = arr</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      save() &#123;</span><br><span class=\"line\">        let obj = Object.assign(&#123;&#125;, this.getShowContentList, &#123;</span><br><span class=\"line\">          [this.$route.path]: this.showContentListArr</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        this.dialog = false;</span><br><span class=\"line\">        this.setShowContentList(obj);</span><br><span class=\"line\">        // 刷新页面 this.$router.go(0) 最好是转跳到一个刷新组件  router.replace(&#123;path: &apos;/refresh&apos;, query: &#123;path&#125;&#125;)  在用组件里执行 router.replace(&#123;path: this.$route.query.path&#125;)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      reset() &#123;</span><br><span class=\"line\">        this.clearShowContentList();</span><br><span class=\"line\">        this.$router.go(0)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      changeShowContent() &#123;</span><br><span class=\"line\">        if (this.$route.path.includes(&quot;order&quot;)) &#123;</span><br><span class=\"line\">          this.showContentListArr = this.getShowContentList &amp;&amp; this.getShowContentList[this.$route.path] ? this.getShowContentList[this.$route.path] : this.contentList</span><br><span class=\"line\">          this.showContentList = this.showContentListArr[this.active].list</span><br><span class=\"line\">          // console.log(this.showContentListArr)</span><br><span class=\"line\">          this.$emit(&quot;onSubmit&quot;, this.showContentListArr);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      activeChange(active) &#123;</span><br><span class=\"line\">        this.showContentList = this.showContentListArr[active].list</span><br><span class=\"line\">        // console.log(this.showContentList)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      handleCheckAllChange(val) &#123;</span><br><span class=\"line\">        if (val) &#123;</span><br><span class=\"line\">          for (let i = 0; i &lt; this.showContentListArr.length; i++) &#123;</span><br><span class=\"line\">            this.showContentListArr[i].list.forEach((item) =&gt; &#123;</span><br><span class=\"line\">              item.show = false</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          this.showContentListArr = this.contentList</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.showContentList = this.showContentListArr[this.active].list</span><br><span class=\"line\">        this.isIndeterminate = true;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      handleCheckedChange(value) &#123;</span><br><span class=\"line\">        let isCheckAll = false</span><br><span class=\"line\">        let num = 0, total = 0</span><br><span class=\"line\">        for (let i = 0; i &lt; this.showContentListArr.length; i++) &#123;</span><br><span class=\"line\">          for (let n = 0; n &lt; this.showContentListArr[i].list.length; n++) &#123;</span><br><span class=\"line\">            let item = this.showContentListArr[i].list[n]</span><br><span class=\"line\">            if (item.show) &#123;</span><br><span class=\"line\">              isCheckAll = true</span><br><span class=\"line\">              num++</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            total++</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.checkAll = isCheckAll;</span><br><span class=\"line\">        this.isIndeterminate = num &gt; 0 &amp;&amp; num &lt; total;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      delTap(index) &#123;</span><br><span class=\"line\">        this.showContentList[index].show = false;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      ...mapMutations(&#123;</span><br><span class=\"line\">        setShowContentList: &quot;setShowContentList&quot;,</span><br><span class=\"line\">        clearShowContentList: &quot;clearShowContentList&quot;,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    computed: &#123;</span><br><span class=\"line\">      ...mapGetters([&quot;getShowContentList&quot;])</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    created() &#123;</span><br><span class=\"line\">        this.changeShowContent();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    watch: &#123;</span><br><span class=\"line\">      contentList() &#123;</span><br><span class=\"line\">        this.changeShowContent();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  .dialog-order-setting .el-checkbox &#123;</span><br><span class=\"line\">    margin-left: 0;</span><br><span class=\"line\">    margin-right: 30px;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .dialog-order-setting .el-radio &#123;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    margin: 0 30px 10px 0;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .co-draggable div &#123;</span><br><span class=\"line\">    padding: 6px 20px;</span><br><span class=\"line\">    cursor: all-scroll;</span><br><span class=\"line\">    border: 1px solid #e6e6e6;</span><br><span class=\"line\">    margin-bottom: 8px;</span><br><span class=\"line\">    border-radius: 4px;</span><br><span class=\"line\">    color: #363b42;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .co-draggable div i &#123;</span><br><span class=\"line\">    float: right;</span><br><span class=\"line\">    color: #266298;</span><br><span class=\"line\">    font-size: 18px;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\">    cursor: pointer;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>\n<p>vuex getting.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getters = &#123;</span><br><span class=\"line\">    getShowContentList: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.showContentList</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> getters</span><br></pre></td></tr></table></figure></p>\n<p>vuex mutations.js</p>\n<p>使用插件 Lockr<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Lockr <span class=\"keyword\">from</span> <span class=\"string\">'lockr'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">     setShowContentList(state, showContentList) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (showContentList) &#123;</span><br><span class=\"line\">                state.showContentList = showContentList;</span><br><span class=\"line\">                Lockr.set(<span class=\"string\">'showContentList'</span>, showContentList)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        clearShowContentList(state) &#123;</span><br><span class=\"line\">            state.showContentList = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            Lockr.rm(<span class=\"string\">'showContentList'</span>)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> mutations</span><br></pre></td></tr></table></figure></p>\n<p>vuex state.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Lockr <span class=\"keyword\">from</span> <span class=\"string\">'lockr'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> state = &#123;</span><br><span class=\"line\">    showContentList: Lockr.get(<span class=\"string\">'showContentList'</span>) || []</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> state</span><br></pre></td></tr></table></figure></p>\n<p>使用的地方<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;el-table :data=&quot;tableData&quot; style=&quot;width: 100%&quot; stripe&gt;</span><br><span class=\"line\">            &lt;table-column :selection=&quot;true&quot; :list=&quot;showContentList[0].list&quot;&gt;&lt;/table-column&gt;</span><br><span class=\"line\">            &lt;el-table-column label=&quot;操作&quot; width=&quot;80&quot; fixed=&quot;right&quot;&gt;</span><br><span class=\"line\">                &lt;template scope=&quot;scope&quot;&gt;</span><br><span class=\"line\">                &lt;/template&gt;</span><br><span class=\"line\">            &lt;/el-table-column&gt;</span><br><span class=\"line\">        &lt;/el-table&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import tableColumn from &apos;common/table-column&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">   props: [&apos;showContentList&apos;],  </span><br><span class=\"line\">   data()&#123;</span><br><span class=\"line\">       return &#123;</span><br><span class=\"line\">           tableData:[]</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"phpMyAdmin无法登陆解决","date":"2018-08-31T03:53:39.000Z","comments":1,"_content":"\n### 问题\n\nERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: NO)\nERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: YES)\n\n### 解析\n\n通常这种情况是没有设置密码或者密码错误导致的\n\n\n\n### 解决\n首先确定 相关端口打开了 3306 888(默认)\n\n1.关闭mysql\n\n```bash\n/bin/systemctl stop mysql.service\n```\nor\n```bash\n/etc/init.d/mysql stop\n```\n\n2.在mysql关闭的情况下：\n\n```bash\n/bin/systemctl stop mysql.service --skip-grant-tables\n```\nor\n```bash\n/etc/init.d/mysql start --skip-grant-tables\n```\n\n3.连接mysql,进入mysql命令行\n```bash\nmysql -u root -p          ## 出现password：的时候直接回车可以进入。\nmysql> use mysql;         Database changed\nmysql> update user set password=password(\"123456\") where user=\"root\";  # 给root用户设置新密码\nmysql> flush privileges;       # 刷新数据库\nmysql> quitBye                 # 退出mysql                                                       \n```\n4. 改好之后,重启mysql服务就可以了。去掉这句 `--skip-grant-tables`","source":"_posts/phpMyAdmin无法登陆解决.md","raw":"---\ntitle: phpMyAdmin无法登陆解决\ndate: 2018-08-31 11:53:39\ncategories: ['后端'] \ntags: 后端\ncomments: true\n---\n\n### 问题\n\nERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: NO)\nERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: YES)\n\n### 解析\n\n通常这种情况是没有设置密码或者密码错误导致的\n\n\n\n### 解决\n首先确定 相关端口打开了 3306 888(默认)\n\n1.关闭mysql\n\n```bash\n/bin/systemctl stop mysql.service\n```\nor\n```bash\n/etc/init.d/mysql stop\n```\n\n2.在mysql关闭的情况下：\n\n```bash\n/bin/systemctl stop mysql.service --skip-grant-tables\n```\nor\n```bash\n/etc/init.d/mysql start --skip-grant-tables\n```\n\n3.连接mysql,进入mysql命令行\n```bash\nmysql -u root -p          ## 出现password：的时候直接回车可以进入。\nmysql> use mysql;         Database changed\nmysql> update user set password=password(\"123456\") where user=\"root\";  # 给root用户设置新密码\nmysql> flush privileges;       # 刷新数据库\nmysql> quitBye                 # 退出mysql                                                       \n```\n4. 改好之后,重启mysql服务就可以了。去掉这句 `--skip-grant-tables`","slug":"phpMyAdmin无法登陆解决","published":1,"updated":"2018-08-31T05:08:33.735Z","layout":"post","photos":[],"link":"","_id":"cjqojjnn1000auwkq32nayvwm","content":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>ERROR 1045 (28000): Access denied for user ‘root‘@’localhost’ (using password: NO)<br>ERROR 1045 (28000): Access denied for user ‘root‘@’localhost’ (using password: YES)</p>\n<h3 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p>通常这种情况是没有设置密码或者密码错误导致的</p>\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><p>首先确定 相关端口打开了 3306 888(默认)</p>\n<p>1.关闭mysql</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/systemctl stop mysql.service</span><br></pre></td></tr></table></figure>\n<p>or<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/mysql stop</span><br></pre></td></tr></table></figure></p>\n<p>2.在mysql关闭的情况下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/systemctl stop mysql.service --skip-grant-tables</span><br></pre></td></tr></table></figure>\n<p>or<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/mysql start --skip-grant-tables</span><br></pre></td></tr></table></figure></p>\n<p>3.连接mysql,进入mysql命令行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p          <span class=\"comment\">## 出现password：的时候直接回车可以进入。</span></span><br><span class=\"line\">mysql&gt; use mysql;         Database changed</span><br><span class=\"line\">mysql&gt; update user <span class=\"built_in\">set</span> password=password(<span class=\"string\">\"123456\"</span>) <span class=\"built_in\">where</span> user=<span class=\"string\">\"root\"</span>;  <span class=\"comment\"># 给root用户设置新密码</span></span><br><span class=\"line\">mysql&gt; flush privileges;       <span class=\"comment\"># 刷新数据库</span></span><br><span class=\"line\">mysql&gt; quitBye                 <span class=\"comment\"># 退出mysql</span></span><br></pre></td></tr></table></figure></p>\n<ol start=\"4\">\n<li>改好之后,重启mysql服务就可以了。去掉这句 <code>--skip-grant-tables</code></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>ERROR 1045 (28000): Access denied for user ‘root‘@’localhost’ (using password: NO)<br>ERROR 1045 (28000): Access denied for user ‘root‘@’localhost’ (using password: YES)</p>\n<h3 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p>通常这种情况是没有设置密码或者密码错误导致的</p>\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><p>首先确定 相关端口打开了 3306 888(默认)</p>\n<p>1.关闭mysql</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/systemctl stop mysql.service</span><br></pre></td></tr></table></figure>\n<p>or<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/mysql stop</span><br></pre></td></tr></table></figure></p>\n<p>2.在mysql关闭的情况下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/systemctl stop mysql.service --skip-grant-tables</span><br></pre></td></tr></table></figure>\n<p>or<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/mysql start --skip-grant-tables</span><br></pre></td></tr></table></figure></p>\n<p>3.连接mysql,进入mysql命令行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p          <span class=\"comment\">## 出现password：的时候直接回车可以进入。</span></span><br><span class=\"line\">mysql&gt; use mysql;         Database changed</span><br><span class=\"line\">mysql&gt; update user <span class=\"built_in\">set</span> password=password(<span class=\"string\">\"123456\"</span>) <span class=\"built_in\">where</span> user=<span class=\"string\">\"root\"</span>;  <span class=\"comment\"># 给root用户设置新密码</span></span><br><span class=\"line\">mysql&gt; flush privileges;       <span class=\"comment\"># 刷新数据库</span></span><br><span class=\"line\">mysql&gt; quitBye                 <span class=\"comment\"># 退出mysql</span></span><br></pre></td></tr></table></figure></p>\n<ol start=\"4\">\n<li>改好之后,重启mysql服务就可以了。去掉这句 <code>--skip-grant-tables</code></li>\n</ol>\n"},{"title":"七牛云上传文件demo","date":"2018-09-20T08:46:46.000Z","comments":1,"_content":"## 七牛云上传文件demo\n\n这是我前几天写的 因为之前的上传会出现文件的MimeType不对 还有一些错误 所以现在写的有些复杂  (删除七牛云上与本地相同的文件-这一步其实可以没有,但我担心有重复文件导致不上传,所以还是删除吧)\n> 读取本地保存的上一次上传记录\n> 删除七牛云上一次上传记录的文件\n> 删除七牛云上与本地相同的文件\n> 上传文件并指定文件的MimeType\n> 记录上传的文件\n\n\n```bash\nconst fs = require('fs')\nconst qiniu = require('qiniu')\n\n// 授权秘钥\nconst accessKey = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\nconst secretKey = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\n\n// 存储空间名称\nconst bucket = 'xiaojw'\n\n// 要上传的资源目录\nconst staticPath = '../xxx_trunk/xiaojw'\n\n\n// 上传后的文件前缀\nconst prefix = 'xiaojw'\n\n\nconst cdnPrefix = 'https://cdn.xxxxxxxx.com/'\n\n// 创建鉴权对象\nconst mac = new qiniu.auth.digest.Mac(accessKey, secretKey)\n\n// 创建并修改配置对象(Zone_z0=华东 Zone_z1=华北 Zone_z2=华南 Zone_na0=北美)\nconst config = new qiniu.conf.Config()\nconfig.zone = qiniu.zone.Zone_z2\n\n// 创建额外内容对象\nconst putExtra = new qiniu.form_up.PutExtra()\n\n// 创建表单上传对象\nconst formUploader = new qiniu.form_up.FormUploader(config)\n\n// 文件批量操作对象\nconst bucketManager = new qiniu.rs.BucketManager(mac, config);\n\nconst Mime = ['application/javascript', 'text/css', 'image/jpeg', 'image/png', 'text/html']\n\n\n// 文件上传方法\nfunction uploadFile(localFile) {\n  // 配置上传到七牛云的完整路径\n  const key = localFile.replace(staticPath, prefix)\n  // console.log('准备上传文件: ' + key)\n\n  const options = {\n    scope: bucket + \":\" + key\n  }\n  const putPolicy = new qiniu.rs.PutPolicy(options)\n  // 生成上传凭证\n  const uploadToken = putPolicy.uploadToken(mac)\n\n  // 上传文件\n  let index = key.lastIndexOf('.')\n  if (index) {\n    let suffix = key.slice(index + 1)\n    switch (suffix) {\n      case 'js':\n        putExtra.mimeType = Mime[0]\n        break\n      case 'css':\n        putExtra.mimeType = Mime[1]\n        break\n      case 'jpeg':\n      case 'jpg':\n        putExtra.mimeType = Mime[2]\n        break\n      case 'png':\n        putExtra.mimeType = Mime[3]\n        break\n      case 'html':\n        putExtra.mimeType = Mime[4]\n        break\n      default:\n        console.log('未设置的上传类型')\n    }\n  }\n  // console.log(key)\n  if (!key) {\n    console.log('路径出问题')\n    return\n  }\n  formUploader.putFile(uploadToken, key, localFile, putExtra, function (respErr, respBody, respInfo) {\n    if (respErr) {\n      console.log('上传出错:\\t' + cdnPrefix + key)\n      console.log(respErr)\n      // throw respErr\n      return\n    }\n    // console.log('已上传: ', respBody.key)\n    appendFile(`${respBody.key}\\n`)\n    // appendFile(`${key}\\n`)\n  })\n}\n\n// 目录上传方法\nasync function uploadDirectory(dirPath) {\n  fs.readdir(dirPath, function (err, files) {\n    if (err) throw err\n    // 遍历目录下的内容\n    files.forEach(item => {\n      let path = `${dirPath}/${item}`\n      fs.stat(path, function (err, stats) {\n        if (err) throw err\n        // 是目录就接着遍历 否则上传\n        if (stats.isDirectory()) uploadDirectory(path)\n        else {\n          const key = path.replace(staticPath, prefix)\n          // 删除七牛云上与本地相同的文件\n          // console.log(key)\n          // console.log(path)\n          deleteSigleF(key).then(()=>{\n            uploadFile(path)\n          }).catch(()=>{\n            uploadFile(path)\n          })\n        }\n      })\n    })\n  })\n}\n\n// 批量删除文件方法\nfunction deleteFile(deleteOperations) {\n  return new Promise((resolve, reject) => {\n    //每个operations的数量不可以超过1000个，如果总数量超过1000，需要分批发送\n    if (!deleteOperations) {\n      console.log('删除的文件数组不存在')\n      return false\n    }\n    bucketManager.batch(deleteOperations, function (err, respBody, respInfo) {\n      if (err) {\n        console.log(\"文件批量删除出错\");\n        console.log(err);\n        // throw err;\n      } else {\n        // 200 is success, 298 is part success\n        if (parseInt(respInfo.statusCode / 100) == 2) {\n          respBody.forEach(function (item) {\n            if (item.code == 200) {\n              // console.log(item.code + \"\\tsuccess\")\n              console.log(\"删除成功\")\n              // console.log(respBody)\n              resolve(\"删除成功\")\n            } else {\n              // console.log(item.code + \"\\t\" + item.data.error)\n              console.log(\"删除失败\" + item.data.error)\n              reject(\"删除失败\" + item.data.error)\n            }\n          });\n        } else {\n          console.log(respInfo.deleteusCode);\n          console.log(respBody);\n          console.log('错误101--------------------');\n          reject(respBody)\n        }\n      }\n    })\n  })\n}\n\n// 删除单个文件\nfunction deleteSigleF(path) {\n  return new Promise((resolve, reject) => {\n    bucketManager.delete(bucket, path, function (err, respBody, respInfo) {\n      if (err) {\n        // console.log(\"删除失败\" + err + \"\\t 路径:\" + path);\n        console.log(\"删除失败\" + err);\n        reject()\n        //throw err;\n      } else {\n        // console.log(respInfo.statusCode, respBody);\n        console.log(respBody, path)\n        resolve()\n      }\n    })\n  })\n}\n\nasync function readFile(returnType = false) {\n  return new Promise((resolve, reject) => {\n    fs.readFile('./file.txt', {flag: 'r+', encoding: 'utf-8'}, function (err, data) {\n      if (err) {\n        reject(err)\n      } else {\n        let dataArr = data.split('\\n')\n        if (returnType) {\n          resolve(dataArr)\n          return\n        }\n        console.log('\\n上一次上传文件--------------------\\n')\n        console.log(dataArr)\n        let deleteOperations = []\n        dataArr.forEach((item) => {\n          if (item) {\n            deleteOperations.push(qiniu.rs.deleteOp(bucket, item))\n          }\n        })\n        resolve(deleteOperations)\n      }\n    })\n  })\n}\n\nfunction writeFile(content) {\n  fs.writeFile('./file.txt', content, {flag: 'w', encoding: 'utf-8', mode: '0666'}, function (err) {\n    if (err) {\n      console.log(\"文件写入失败\")\n    } else {\n      console.log(\"删除服务器上相同文件,记录文件\" + (content ? '变为' + content + '\\n' : '清空,---------------\\n'));\n    }\n  })\n}\n\nfunction appendFile(content) {\n  fs.writeFile('./file.txt', content, {flag: 'a', encoding: 'utf-8', mode: '0666'}, function (err) {\n    if (err) {\n      console.log(\"已上传但未记录:\\t\" + cdnPrefix + content.replace('\\n', ''))\n    } else {\n      console.log(\"已上传并记录:\\t\" + cdnPrefix + content.replace('\\n', ''));\n    }\n  })\n}\n\nfunction uploadHome() {\n  // 清空文件内容\n  writeFile('')\n  fs.exists(staticPath, function (exists) {\n    if (!exists) {\n      console.log('目录不存在！')\n    } else {\n      console.log('\\n开始上传...')\n      uploadDirectory(staticPath)\n    }\n  })\n}\n\n// 读取本地保存的上一次上传记录\n// 删除七牛云上一次上传记录的文件\n// 删除七牛云上与本地相同的文件\n// 上传文件并指定文件的MimeType\n// 记录上传的文件\n\nasync function exec() {\n  // 读取\n  let deleteOperations = await readFile()\n  // console.log(deleteOperations)\n  // 删除七牛云上一次上传记录的文件\n  console.log('\\n删除上一次上传文件---------------\\n')\n  if (deleteOperations.length) {\n    // let deleteOP = await deleteFile(deleteOperations)\n    // console.log(deleteOP)\n    deleteFile(deleteOperations).then((res) => {\n      // console.log(res)\n      uploadHome()\n    }).catch((err) => {\n      // console.log(err)\n      uploadHome()\n    })\n  } else {\n    uploadHome()\n  }\n}\n\nexec()\n\n```\n运行 `node qiniuUpload.js`","source":"_posts/七牛云上传文件demo.md","raw":"---\ntitle: 七牛云上传文件demo\ndate: 2018-09-20 16:46:46\ncategories: ['前端'] \ntags: 前端\ncomments: true\n---\n## 七牛云上传文件demo\n\n这是我前几天写的 因为之前的上传会出现文件的MimeType不对 还有一些错误 所以现在写的有些复杂  (删除七牛云上与本地相同的文件-这一步其实可以没有,但我担心有重复文件导致不上传,所以还是删除吧)\n> 读取本地保存的上一次上传记录\n> 删除七牛云上一次上传记录的文件\n> 删除七牛云上与本地相同的文件\n> 上传文件并指定文件的MimeType\n> 记录上传的文件\n\n\n```bash\nconst fs = require('fs')\nconst qiniu = require('qiniu')\n\n// 授权秘钥\nconst accessKey = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\nconst secretKey = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\n\n// 存储空间名称\nconst bucket = 'xiaojw'\n\n// 要上传的资源目录\nconst staticPath = '../xxx_trunk/xiaojw'\n\n\n// 上传后的文件前缀\nconst prefix = 'xiaojw'\n\n\nconst cdnPrefix = 'https://cdn.xxxxxxxx.com/'\n\n// 创建鉴权对象\nconst mac = new qiniu.auth.digest.Mac(accessKey, secretKey)\n\n// 创建并修改配置对象(Zone_z0=华东 Zone_z1=华北 Zone_z2=华南 Zone_na0=北美)\nconst config = new qiniu.conf.Config()\nconfig.zone = qiniu.zone.Zone_z2\n\n// 创建额外内容对象\nconst putExtra = new qiniu.form_up.PutExtra()\n\n// 创建表单上传对象\nconst formUploader = new qiniu.form_up.FormUploader(config)\n\n// 文件批量操作对象\nconst bucketManager = new qiniu.rs.BucketManager(mac, config);\n\nconst Mime = ['application/javascript', 'text/css', 'image/jpeg', 'image/png', 'text/html']\n\n\n// 文件上传方法\nfunction uploadFile(localFile) {\n  // 配置上传到七牛云的完整路径\n  const key = localFile.replace(staticPath, prefix)\n  // console.log('准备上传文件: ' + key)\n\n  const options = {\n    scope: bucket + \":\" + key\n  }\n  const putPolicy = new qiniu.rs.PutPolicy(options)\n  // 生成上传凭证\n  const uploadToken = putPolicy.uploadToken(mac)\n\n  // 上传文件\n  let index = key.lastIndexOf('.')\n  if (index) {\n    let suffix = key.slice(index + 1)\n    switch (suffix) {\n      case 'js':\n        putExtra.mimeType = Mime[0]\n        break\n      case 'css':\n        putExtra.mimeType = Mime[1]\n        break\n      case 'jpeg':\n      case 'jpg':\n        putExtra.mimeType = Mime[2]\n        break\n      case 'png':\n        putExtra.mimeType = Mime[3]\n        break\n      case 'html':\n        putExtra.mimeType = Mime[4]\n        break\n      default:\n        console.log('未设置的上传类型')\n    }\n  }\n  // console.log(key)\n  if (!key) {\n    console.log('路径出问题')\n    return\n  }\n  formUploader.putFile(uploadToken, key, localFile, putExtra, function (respErr, respBody, respInfo) {\n    if (respErr) {\n      console.log('上传出错:\\t' + cdnPrefix + key)\n      console.log(respErr)\n      // throw respErr\n      return\n    }\n    // console.log('已上传: ', respBody.key)\n    appendFile(`${respBody.key}\\n`)\n    // appendFile(`${key}\\n`)\n  })\n}\n\n// 目录上传方法\nasync function uploadDirectory(dirPath) {\n  fs.readdir(dirPath, function (err, files) {\n    if (err) throw err\n    // 遍历目录下的内容\n    files.forEach(item => {\n      let path = `${dirPath}/${item}`\n      fs.stat(path, function (err, stats) {\n        if (err) throw err\n        // 是目录就接着遍历 否则上传\n        if (stats.isDirectory()) uploadDirectory(path)\n        else {\n          const key = path.replace(staticPath, prefix)\n          // 删除七牛云上与本地相同的文件\n          // console.log(key)\n          // console.log(path)\n          deleteSigleF(key).then(()=>{\n            uploadFile(path)\n          }).catch(()=>{\n            uploadFile(path)\n          })\n        }\n      })\n    })\n  })\n}\n\n// 批量删除文件方法\nfunction deleteFile(deleteOperations) {\n  return new Promise((resolve, reject) => {\n    //每个operations的数量不可以超过1000个，如果总数量超过1000，需要分批发送\n    if (!deleteOperations) {\n      console.log('删除的文件数组不存在')\n      return false\n    }\n    bucketManager.batch(deleteOperations, function (err, respBody, respInfo) {\n      if (err) {\n        console.log(\"文件批量删除出错\");\n        console.log(err);\n        // throw err;\n      } else {\n        // 200 is success, 298 is part success\n        if (parseInt(respInfo.statusCode / 100) == 2) {\n          respBody.forEach(function (item) {\n            if (item.code == 200) {\n              // console.log(item.code + \"\\tsuccess\")\n              console.log(\"删除成功\")\n              // console.log(respBody)\n              resolve(\"删除成功\")\n            } else {\n              // console.log(item.code + \"\\t\" + item.data.error)\n              console.log(\"删除失败\" + item.data.error)\n              reject(\"删除失败\" + item.data.error)\n            }\n          });\n        } else {\n          console.log(respInfo.deleteusCode);\n          console.log(respBody);\n          console.log('错误101--------------------');\n          reject(respBody)\n        }\n      }\n    })\n  })\n}\n\n// 删除单个文件\nfunction deleteSigleF(path) {\n  return new Promise((resolve, reject) => {\n    bucketManager.delete(bucket, path, function (err, respBody, respInfo) {\n      if (err) {\n        // console.log(\"删除失败\" + err + \"\\t 路径:\" + path);\n        console.log(\"删除失败\" + err);\n        reject()\n        //throw err;\n      } else {\n        // console.log(respInfo.statusCode, respBody);\n        console.log(respBody, path)\n        resolve()\n      }\n    })\n  })\n}\n\nasync function readFile(returnType = false) {\n  return new Promise((resolve, reject) => {\n    fs.readFile('./file.txt', {flag: 'r+', encoding: 'utf-8'}, function (err, data) {\n      if (err) {\n        reject(err)\n      } else {\n        let dataArr = data.split('\\n')\n        if (returnType) {\n          resolve(dataArr)\n          return\n        }\n        console.log('\\n上一次上传文件--------------------\\n')\n        console.log(dataArr)\n        let deleteOperations = []\n        dataArr.forEach((item) => {\n          if (item) {\n            deleteOperations.push(qiniu.rs.deleteOp(bucket, item))\n          }\n        })\n        resolve(deleteOperations)\n      }\n    })\n  })\n}\n\nfunction writeFile(content) {\n  fs.writeFile('./file.txt', content, {flag: 'w', encoding: 'utf-8', mode: '0666'}, function (err) {\n    if (err) {\n      console.log(\"文件写入失败\")\n    } else {\n      console.log(\"删除服务器上相同文件,记录文件\" + (content ? '变为' + content + '\\n' : '清空,---------------\\n'));\n    }\n  })\n}\n\nfunction appendFile(content) {\n  fs.writeFile('./file.txt', content, {flag: 'a', encoding: 'utf-8', mode: '0666'}, function (err) {\n    if (err) {\n      console.log(\"已上传但未记录:\\t\" + cdnPrefix + content.replace('\\n', ''))\n    } else {\n      console.log(\"已上传并记录:\\t\" + cdnPrefix + content.replace('\\n', ''));\n    }\n  })\n}\n\nfunction uploadHome() {\n  // 清空文件内容\n  writeFile('')\n  fs.exists(staticPath, function (exists) {\n    if (!exists) {\n      console.log('目录不存在！')\n    } else {\n      console.log('\\n开始上传...')\n      uploadDirectory(staticPath)\n    }\n  })\n}\n\n// 读取本地保存的上一次上传记录\n// 删除七牛云上一次上传记录的文件\n// 删除七牛云上与本地相同的文件\n// 上传文件并指定文件的MimeType\n// 记录上传的文件\n\nasync function exec() {\n  // 读取\n  let deleteOperations = await readFile()\n  // console.log(deleteOperations)\n  // 删除七牛云上一次上传记录的文件\n  console.log('\\n删除上一次上传文件---------------\\n')\n  if (deleteOperations.length) {\n    // let deleteOP = await deleteFile(deleteOperations)\n    // console.log(deleteOP)\n    deleteFile(deleteOperations).then((res) => {\n      // console.log(res)\n      uploadHome()\n    }).catch((err) => {\n      // console.log(err)\n      uploadHome()\n    })\n  } else {\n    uploadHome()\n  }\n}\n\nexec()\n\n```\n运行 `node qiniuUpload.js`","slug":"七牛云上传文件demo","published":1,"updated":"2018-10-12T02:22:34.374Z","layout":"post","photos":[],"link":"","_id":"cjqojjnn5000cuwkq0xa4zdxd","content":"<h2 id=\"七牛云上传文件demo\"><a href=\"#七牛云上传文件demo\" class=\"headerlink\" title=\"七牛云上传文件demo\"></a>七牛云上传文件demo</h2><p>这是我前几天写的 因为之前的上传会出现文件的MimeType不对 还有一些错误 所以现在写的有些复杂  (删除七牛云上与本地相同的文件-这一步其实可以没有,但我担心有重复文件导致不上传,所以还是删除吧)</p>\n<blockquote>\n<p>读取本地保存的上一次上传记录<br>删除七牛云上一次上传记录的文件<br>删除七牛云上与本地相同的文件<br>上传文件并指定文件的MimeType<br>记录上传的文件</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const fs = require(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\">const qiniu = require(<span class=\"string\">'qiniu'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">// 授权秘钥</span><br><span class=\"line\">const accessKey = <span class=\"string\">'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'</span></span><br><span class=\"line\">const secretKey = <span class=\"string\">'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 存储空间名称</span><br><span class=\"line\">const bucket = <span class=\"string\">'xiaojw'</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 要上传的资源目录</span><br><span class=\"line\">const staticPath = <span class=\"string\">'../xxx_trunk/xiaojw'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 上传后的文件前缀</span><br><span class=\"line\">const prefix = <span class=\"string\">'xiaojw'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">const cdnPrefix = <span class=\"string\">'https://cdn.xxxxxxxx.com/'</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 创建鉴权对象</span><br><span class=\"line\">const mac = new qiniu.auth.digest.Mac(accessKey, secretKey)</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建并修改配置对象(Zone_z0=华东 Zone_z1=华北 Zone_z2=华南 Zone_na0=北美)</span><br><span class=\"line\">const config = new qiniu.conf.Config()</span><br><span class=\"line\">config.zone = qiniu.zone.Zone_z2</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建额外内容对象</span><br><span class=\"line\">const putExtra = new qiniu.form_up.PutExtra()</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建表单上传对象</span><br><span class=\"line\">const formUploader = new qiniu.form_up.FormUploader(config)</span><br><span class=\"line\"></span><br><span class=\"line\">// 文件批量操作对象</span><br><span class=\"line\">const bucketManager = new qiniu.rs.BucketManager(mac, config);</span><br><span class=\"line\"></span><br><span class=\"line\">const Mime = [<span class=\"string\">'application/javascript'</span>, <span class=\"string\">'text/css'</span>, <span class=\"string\">'image/jpeg'</span>, <span class=\"string\">'image/png'</span>, <span class=\"string\">'text/html'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 文件上传方法</span><br><span class=\"line\"><span class=\"keyword\">function</span> uploadFile(localFile) &#123;</span><br><span class=\"line\">  // 配置上传到七牛云的完整路径</span><br><span class=\"line\">  const key = localFile.replace(staticPath, prefix)</span><br><span class=\"line\">  // console.log(<span class=\"string\">'准备上传文件: '</span> + key)</span><br><span class=\"line\"></span><br><span class=\"line\">  const options = &#123;</span><br><span class=\"line\">    scope: bucket + <span class=\"string\">\":\"</span> + key</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  const putPolicy = new qiniu.rs.PutPolicy(options)</span><br><span class=\"line\">  // 生成上传凭证</span><br><span class=\"line\">  const uploadToken = putPolicy.uploadToken(mac)</span><br><span class=\"line\"></span><br><span class=\"line\">  // 上传文件</span><br><span class=\"line\">  <span class=\"built_in\">let</span> index = key.lastIndexOf(<span class=\"string\">'.'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (index) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> suffix = key.slice(index + 1)</span><br><span class=\"line\">    switch (suffix) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'js'</span>:</span><br><span class=\"line\">        putExtra.mimeType = Mime[0]</span><br><span class=\"line\">        <span class=\"built_in\">break</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'css'</span>:</span><br><span class=\"line\">        putExtra.mimeType = Mime[1]</span><br><span class=\"line\">        <span class=\"built_in\">break</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'jpeg'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'jpg'</span>:</span><br><span class=\"line\">        putExtra.mimeType = Mime[2]</span><br><span class=\"line\">        <span class=\"built_in\">break</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'png'</span>:</span><br><span class=\"line\">        putExtra.mimeType = Mime[3]</span><br><span class=\"line\">        <span class=\"built_in\">break</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'html'</span>:</span><br><span class=\"line\">        putExtra.mimeType = Mime[4]</span><br><span class=\"line\">        <span class=\"built_in\">break</span></span><br><span class=\"line\">      default:</span><br><span class=\"line\">        console.log(<span class=\"string\">'未设置的上传类型'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // console.log(key)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!key) &#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">'路径出问题'</span>)</span><br><span class=\"line\">    <span class=\"built_in\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  formUploader.putFile(uploadToken, key, localFile, putExtra, <span class=\"keyword\">function</span> (respErr, respBody, respInfo) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (respErr) &#123;</span><br><span class=\"line\">      console.log(<span class=\"string\">'上传出错:\\t'</span> + cdnPrefix + key)</span><br><span class=\"line\">      console.log(respErr)</span><br><span class=\"line\">      // throw respErr</span><br><span class=\"line\">      <span class=\"built_in\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // console.log(<span class=\"string\">'已上传: '</span>, respBody.key)</span><br><span class=\"line\">    appendFile(`<span class=\"variable\">$&#123;respBody.key&#125;</span>\\n`)</span><br><span class=\"line\">    // appendFile(`<span class=\"variable\">$&#123;key&#125;</span>\\n`)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 目录上传方法</span><br><span class=\"line\">async <span class=\"keyword\">function</span> uploadDirectory(dirPath) &#123;</span><br><span class=\"line\">  fs.readdir(dirPath, <span class=\"keyword\">function</span> (err, files) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) throw err</span><br><span class=\"line\">    // 遍历目录下的内容</span><br><span class=\"line\">    files.forEach(item =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">let</span> path = `<span class=\"variable\">$&#123;dirPath&#125;</span>/<span class=\"variable\">$&#123;item&#125;</span>`</span><br><span class=\"line\">      fs.stat(path, <span class=\"keyword\">function</span> (err, stats) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) throw err</span><br><span class=\"line\">        // 是目录就接着遍历 否则上传</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stats.isDirectory()) uploadDirectory(path)</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          const key = path.replace(staticPath, prefix)</span><br><span class=\"line\">          // 删除七牛云上与本地相同的文件</span><br><span class=\"line\">          // console.log(key)</span><br><span class=\"line\">          // console.log(path)</span><br><span class=\"line\">          deleteSigleF(key).<span class=\"keyword\">then</span>(()=&gt;&#123;</span><br><span class=\"line\">            uploadFile(path)</span><br><span class=\"line\">          &#125;).catch(()=&gt;&#123;</span><br><span class=\"line\">            uploadFile(path)</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 批量删除文件方法</span><br><span class=\"line\"><span class=\"keyword\">function</span> deleteFile(deleteOperations) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">    //每个operations的数量不可以超过1000个，如果总数量超过1000，需要分批发送</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!deleteOperations) &#123;</span><br><span class=\"line\">      console.log(<span class=\"string\">'删除的文件数组不存在'</span>)</span><br><span class=\"line\">      <span class=\"built_in\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bucketManager.batch(deleteOperations, <span class=\"keyword\">function</span> (err, respBody, respInfo) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">\"文件批量删除出错\"</span>);</span><br><span class=\"line\">        console.log(err);</span><br><span class=\"line\">        // throw err;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        // 200 is success, 298 is part success</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (parseInt(respInfo.statusCode / 100) == 2) &#123;</span><br><span class=\"line\">          respBody.forEach(<span class=\"keyword\">function</span> (item) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (item.code == 200) &#123;</span><br><span class=\"line\">              // console.log(item.code + <span class=\"string\">\"\\tsuccess\"</span>)</span><br><span class=\"line\">              console.log(<span class=\"string\">\"删除成功\"</span>)</span><br><span class=\"line\">              // console.log(respBody)</span><br><span class=\"line\">              resolve(<span class=\"string\">\"删除成功\"</span>)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              // console.log(item.code + <span class=\"string\">\"\\t\"</span> + item.data.error)</span><br><span class=\"line\">              console.log(<span class=\"string\">\"删除失败\"</span> + item.data.error)</span><br><span class=\"line\">              reject(<span class=\"string\">\"删除失败\"</span> + item.data.error)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          console.log(respInfo.deleteusCode);</span><br><span class=\"line\">          console.log(respBody);</span><br><span class=\"line\">          console.log(<span class=\"string\">'错误101--------------------'</span>);</span><br><span class=\"line\">          reject(respBody)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 删除单个文件</span><br><span class=\"line\"><span class=\"keyword\">function</span> deleteSigleF(path) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">    bucketManager.delete(bucket, path, <span class=\"keyword\">function</span> (err, respBody, respInfo) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        // console.log(<span class=\"string\">\"删除失败\"</span> + err + <span class=\"string\">\"\\t 路径:\"</span> + path);</span><br><span class=\"line\">        console.log(<span class=\"string\">\"删除失败\"</span> + err);</span><br><span class=\"line\">        reject()</span><br><span class=\"line\">        //throw err;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        // console.log(respInfo.statusCode, respBody);</span><br><span class=\"line\">        console.log(respBody, path)</span><br><span class=\"line\">        resolve()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">async <span class=\"keyword\">function</span> readFile(returnType = <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">    fs.readFile(<span class=\"string\">'./file.txt'</span>, &#123;flag: <span class=\"string\">'r+'</span>, encoding: <span class=\"string\">'utf-8'</span>&#125;, <span class=\"keyword\">function</span> (err, data) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        reject(err)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">let</span> dataArr = data.split(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (returnType) &#123;</span><br><span class=\"line\">          resolve(dataArr)</span><br><span class=\"line\">          <span class=\"built_in\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        console.log(<span class=\"string\">'\\n上一次上传文件--------------------\\n'</span>)</span><br><span class=\"line\">        console.log(dataArr)</span><br><span class=\"line\">        <span class=\"built_in\">let</span> deleteOperations = []</span><br><span class=\"line\">        dataArr.forEach((item) =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (item) &#123;</span><br><span class=\"line\">            deleteOperations.push(qiniu.rs.deleteOp(bucket, item))</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        resolve(deleteOperations)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> writeFile(content) &#123;</span><br><span class=\"line\">  fs.writeFile(<span class=\"string\">'./file.txt'</span>, content, &#123;flag: <span class=\"string\">'w'</span>, encoding: <span class=\"string\">'utf-8'</span>, mode: <span class=\"string\">'0666'</span>&#125;, <span class=\"keyword\">function</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      console.log(<span class=\"string\">\"文件写入失败\"</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      console.log(<span class=\"string\">\"删除服务器上相同文件,记录文件\"</span> + (content ? <span class=\"string\">'变为'</span> + content + <span class=\"string\">'\\n'</span> : <span class=\"string\">'清空,---------------\\n'</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> appendFile(content) &#123;</span><br><span class=\"line\">  fs.writeFile(<span class=\"string\">'./file.txt'</span>, content, &#123;flag: <span class=\"string\">'a'</span>, encoding: <span class=\"string\">'utf-8'</span>, mode: <span class=\"string\">'0666'</span>&#125;, <span class=\"keyword\">function</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      console.log(<span class=\"string\">\"已上传但未记录:\\t\"</span> + cdnPrefix + content.replace(<span class=\"string\">'\\n'</span>, <span class=\"string\">''</span>))</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      console.log(<span class=\"string\">\"已上传并记录:\\t\"</span> + cdnPrefix + content.replace(<span class=\"string\">'\\n'</span>, <span class=\"string\">''</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">uploadHome</span></span>() &#123;</span><br><span class=\"line\">  // 清空文件内容</span><br><span class=\"line\">  writeFile(<span class=\"string\">''</span>)</span><br><span class=\"line\">  fs.exists(staticPath, <span class=\"keyword\">function</span> (exists) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!exists) &#123;</span><br><span class=\"line\">      console.log(<span class=\"string\">'目录不存在！'</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      console.log(<span class=\"string\">'\\n开始上传...'</span>)</span><br><span class=\"line\">      uploadDirectory(staticPath)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 读取本地保存的上一次上传记录</span><br><span class=\"line\">// 删除七牛云上一次上传记录的文件</span><br><span class=\"line\">// 删除七牛云上与本地相同的文件</span><br><span class=\"line\">// 上传文件并指定文件的MimeType</span><br><span class=\"line\">// 记录上传的文件</span><br><span class=\"line\"></span><br><span class=\"line\">async <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">exec</span></span>() &#123;</span><br><span class=\"line\">  // 读取</span><br><span class=\"line\">  <span class=\"built_in\">let</span> deleteOperations = await readFile()</span><br><span class=\"line\">  // console.log(deleteOperations)</span><br><span class=\"line\">  // 删除七牛云上一次上传记录的文件</span><br><span class=\"line\">  console.log(<span class=\"string\">'\\n删除上一次上传文件---------------\\n'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (deleteOperations.length) &#123;</span><br><span class=\"line\">    // <span class=\"built_in\">let</span> deleteOP = await deleteFile(deleteOperations)</span><br><span class=\"line\">    // console.log(deleteOP)</span><br><span class=\"line\">    deleteFile(deleteOperations).<span class=\"keyword\">then</span>((res) =&gt; &#123;</span><br><span class=\"line\">      // console.log(res)</span><br><span class=\"line\">      uploadHome()</span><br><span class=\"line\">    &#125;).catch((err) =&gt; &#123;</span><br><span class=\"line\">      // console.log(err)</span><br><span class=\"line\">      uploadHome()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    uploadHome()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exec</span>()</span><br></pre></td></tr></table></figure>\n<p>运行 <code>node qiniuUpload.js</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"七牛云上传文件demo\"><a href=\"#七牛云上传文件demo\" class=\"headerlink\" title=\"七牛云上传文件demo\"></a>七牛云上传文件demo</h2><p>这是我前几天写的 因为之前的上传会出现文件的MimeType不对 还有一些错误 所以现在写的有些复杂  (删除七牛云上与本地相同的文件-这一步其实可以没有,但我担心有重复文件导致不上传,所以还是删除吧)</p>\n<blockquote>\n<p>读取本地保存的上一次上传记录<br>删除七牛云上一次上传记录的文件<br>删除七牛云上与本地相同的文件<br>上传文件并指定文件的MimeType<br>记录上传的文件</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const fs = require(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\">const qiniu = require(<span class=\"string\">'qiniu'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">// 授权秘钥</span><br><span class=\"line\">const accessKey = <span class=\"string\">'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'</span></span><br><span class=\"line\">const secretKey = <span class=\"string\">'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 存储空间名称</span><br><span class=\"line\">const bucket = <span class=\"string\">'xiaojw'</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 要上传的资源目录</span><br><span class=\"line\">const staticPath = <span class=\"string\">'../xxx_trunk/xiaojw'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 上传后的文件前缀</span><br><span class=\"line\">const prefix = <span class=\"string\">'xiaojw'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">const cdnPrefix = <span class=\"string\">'https://cdn.xxxxxxxx.com/'</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 创建鉴权对象</span><br><span class=\"line\">const mac = new qiniu.auth.digest.Mac(accessKey, secretKey)</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建并修改配置对象(Zone_z0=华东 Zone_z1=华北 Zone_z2=华南 Zone_na0=北美)</span><br><span class=\"line\">const config = new qiniu.conf.Config()</span><br><span class=\"line\">config.zone = qiniu.zone.Zone_z2</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建额外内容对象</span><br><span class=\"line\">const putExtra = new qiniu.form_up.PutExtra()</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建表单上传对象</span><br><span class=\"line\">const formUploader = new qiniu.form_up.FormUploader(config)</span><br><span class=\"line\"></span><br><span class=\"line\">// 文件批量操作对象</span><br><span class=\"line\">const bucketManager = new qiniu.rs.BucketManager(mac, config);</span><br><span class=\"line\"></span><br><span class=\"line\">const Mime = [<span class=\"string\">'application/javascript'</span>, <span class=\"string\">'text/css'</span>, <span class=\"string\">'image/jpeg'</span>, <span class=\"string\">'image/png'</span>, <span class=\"string\">'text/html'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 文件上传方法</span><br><span class=\"line\"><span class=\"keyword\">function</span> uploadFile(localFile) &#123;</span><br><span class=\"line\">  // 配置上传到七牛云的完整路径</span><br><span class=\"line\">  const key = localFile.replace(staticPath, prefix)</span><br><span class=\"line\">  // console.log(<span class=\"string\">'准备上传文件: '</span> + key)</span><br><span class=\"line\"></span><br><span class=\"line\">  const options = &#123;</span><br><span class=\"line\">    scope: bucket + <span class=\"string\">\":\"</span> + key</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  const putPolicy = new qiniu.rs.PutPolicy(options)</span><br><span class=\"line\">  // 生成上传凭证</span><br><span class=\"line\">  const uploadToken = putPolicy.uploadToken(mac)</span><br><span class=\"line\"></span><br><span class=\"line\">  // 上传文件</span><br><span class=\"line\">  <span class=\"built_in\">let</span> index = key.lastIndexOf(<span class=\"string\">'.'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (index) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> suffix = key.slice(index + 1)</span><br><span class=\"line\">    switch (suffix) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'js'</span>:</span><br><span class=\"line\">        putExtra.mimeType = Mime[0]</span><br><span class=\"line\">        <span class=\"built_in\">break</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'css'</span>:</span><br><span class=\"line\">        putExtra.mimeType = Mime[1]</span><br><span class=\"line\">        <span class=\"built_in\">break</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'jpeg'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'jpg'</span>:</span><br><span class=\"line\">        putExtra.mimeType = Mime[2]</span><br><span class=\"line\">        <span class=\"built_in\">break</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'png'</span>:</span><br><span class=\"line\">        putExtra.mimeType = Mime[3]</span><br><span class=\"line\">        <span class=\"built_in\">break</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'html'</span>:</span><br><span class=\"line\">        putExtra.mimeType = Mime[4]</span><br><span class=\"line\">        <span class=\"built_in\">break</span></span><br><span class=\"line\">      default:</span><br><span class=\"line\">        console.log(<span class=\"string\">'未设置的上传类型'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // console.log(key)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!key) &#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">'路径出问题'</span>)</span><br><span class=\"line\">    <span class=\"built_in\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  formUploader.putFile(uploadToken, key, localFile, putExtra, <span class=\"keyword\">function</span> (respErr, respBody, respInfo) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (respErr) &#123;</span><br><span class=\"line\">      console.log(<span class=\"string\">'上传出错:\\t'</span> + cdnPrefix + key)</span><br><span class=\"line\">      console.log(respErr)</span><br><span class=\"line\">      // throw respErr</span><br><span class=\"line\">      <span class=\"built_in\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // console.log(<span class=\"string\">'已上传: '</span>, respBody.key)</span><br><span class=\"line\">    appendFile(`<span class=\"variable\">$&#123;respBody.key&#125;</span>\\n`)</span><br><span class=\"line\">    // appendFile(`<span class=\"variable\">$&#123;key&#125;</span>\\n`)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 目录上传方法</span><br><span class=\"line\">async <span class=\"keyword\">function</span> uploadDirectory(dirPath) &#123;</span><br><span class=\"line\">  fs.readdir(dirPath, <span class=\"keyword\">function</span> (err, files) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) throw err</span><br><span class=\"line\">    // 遍历目录下的内容</span><br><span class=\"line\">    files.forEach(item =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">let</span> path = `<span class=\"variable\">$&#123;dirPath&#125;</span>/<span class=\"variable\">$&#123;item&#125;</span>`</span><br><span class=\"line\">      fs.stat(path, <span class=\"keyword\">function</span> (err, stats) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) throw err</span><br><span class=\"line\">        // 是目录就接着遍历 否则上传</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stats.isDirectory()) uploadDirectory(path)</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          const key = path.replace(staticPath, prefix)</span><br><span class=\"line\">          // 删除七牛云上与本地相同的文件</span><br><span class=\"line\">          // console.log(key)</span><br><span class=\"line\">          // console.log(path)</span><br><span class=\"line\">          deleteSigleF(key).<span class=\"keyword\">then</span>(()=&gt;&#123;</span><br><span class=\"line\">            uploadFile(path)</span><br><span class=\"line\">          &#125;).catch(()=&gt;&#123;</span><br><span class=\"line\">            uploadFile(path)</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 批量删除文件方法</span><br><span class=\"line\"><span class=\"keyword\">function</span> deleteFile(deleteOperations) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">    //每个operations的数量不可以超过1000个，如果总数量超过1000，需要分批发送</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!deleteOperations) &#123;</span><br><span class=\"line\">      console.log(<span class=\"string\">'删除的文件数组不存在'</span>)</span><br><span class=\"line\">      <span class=\"built_in\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bucketManager.batch(deleteOperations, <span class=\"keyword\">function</span> (err, respBody, respInfo) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">\"文件批量删除出错\"</span>);</span><br><span class=\"line\">        console.log(err);</span><br><span class=\"line\">        // throw err;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        // 200 is success, 298 is part success</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (parseInt(respInfo.statusCode / 100) == 2) &#123;</span><br><span class=\"line\">          respBody.forEach(<span class=\"keyword\">function</span> (item) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (item.code == 200) &#123;</span><br><span class=\"line\">              // console.log(item.code + <span class=\"string\">\"\\tsuccess\"</span>)</span><br><span class=\"line\">              console.log(<span class=\"string\">\"删除成功\"</span>)</span><br><span class=\"line\">              // console.log(respBody)</span><br><span class=\"line\">              resolve(<span class=\"string\">\"删除成功\"</span>)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              // console.log(item.code + <span class=\"string\">\"\\t\"</span> + item.data.error)</span><br><span class=\"line\">              console.log(<span class=\"string\">\"删除失败\"</span> + item.data.error)</span><br><span class=\"line\">              reject(<span class=\"string\">\"删除失败\"</span> + item.data.error)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          console.log(respInfo.deleteusCode);</span><br><span class=\"line\">          console.log(respBody);</span><br><span class=\"line\">          console.log(<span class=\"string\">'错误101--------------------'</span>);</span><br><span class=\"line\">          reject(respBody)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 删除单个文件</span><br><span class=\"line\"><span class=\"keyword\">function</span> deleteSigleF(path) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">    bucketManager.delete(bucket, path, <span class=\"keyword\">function</span> (err, respBody, respInfo) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        // console.log(<span class=\"string\">\"删除失败\"</span> + err + <span class=\"string\">\"\\t 路径:\"</span> + path);</span><br><span class=\"line\">        console.log(<span class=\"string\">\"删除失败\"</span> + err);</span><br><span class=\"line\">        reject()</span><br><span class=\"line\">        //throw err;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        // console.log(respInfo.statusCode, respBody);</span><br><span class=\"line\">        console.log(respBody, path)</span><br><span class=\"line\">        resolve()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">async <span class=\"keyword\">function</span> readFile(returnType = <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">    fs.readFile(<span class=\"string\">'./file.txt'</span>, &#123;flag: <span class=\"string\">'r+'</span>, encoding: <span class=\"string\">'utf-8'</span>&#125;, <span class=\"keyword\">function</span> (err, data) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        reject(err)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">let</span> dataArr = data.split(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (returnType) &#123;</span><br><span class=\"line\">          resolve(dataArr)</span><br><span class=\"line\">          <span class=\"built_in\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        console.log(<span class=\"string\">'\\n上一次上传文件--------------------\\n'</span>)</span><br><span class=\"line\">        console.log(dataArr)</span><br><span class=\"line\">        <span class=\"built_in\">let</span> deleteOperations = []</span><br><span class=\"line\">        dataArr.forEach((item) =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (item) &#123;</span><br><span class=\"line\">            deleteOperations.push(qiniu.rs.deleteOp(bucket, item))</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        resolve(deleteOperations)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> writeFile(content) &#123;</span><br><span class=\"line\">  fs.writeFile(<span class=\"string\">'./file.txt'</span>, content, &#123;flag: <span class=\"string\">'w'</span>, encoding: <span class=\"string\">'utf-8'</span>, mode: <span class=\"string\">'0666'</span>&#125;, <span class=\"keyword\">function</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      console.log(<span class=\"string\">\"文件写入失败\"</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      console.log(<span class=\"string\">\"删除服务器上相同文件,记录文件\"</span> + (content ? <span class=\"string\">'变为'</span> + content + <span class=\"string\">'\\n'</span> : <span class=\"string\">'清空,---------------\\n'</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> appendFile(content) &#123;</span><br><span class=\"line\">  fs.writeFile(<span class=\"string\">'./file.txt'</span>, content, &#123;flag: <span class=\"string\">'a'</span>, encoding: <span class=\"string\">'utf-8'</span>, mode: <span class=\"string\">'0666'</span>&#125;, <span class=\"keyword\">function</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      console.log(<span class=\"string\">\"已上传但未记录:\\t\"</span> + cdnPrefix + content.replace(<span class=\"string\">'\\n'</span>, <span class=\"string\">''</span>))</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      console.log(<span class=\"string\">\"已上传并记录:\\t\"</span> + cdnPrefix + content.replace(<span class=\"string\">'\\n'</span>, <span class=\"string\">''</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">uploadHome</span></span>() &#123;</span><br><span class=\"line\">  // 清空文件内容</span><br><span class=\"line\">  writeFile(<span class=\"string\">''</span>)</span><br><span class=\"line\">  fs.exists(staticPath, <span class=\"keyword\">function</span> (exists) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!exists) &#123;</span><br><span class=\"line\">      console.log(<span class=\"string\">'目录不存在！'</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      console.log(<span class=\"string\">'\\n开始上传...'</span>)</span><br><span class=\"line\">      uploadDirectory(staticPath)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 读取本地保存的上一次上传记录</span><br><span class=\"line\">// 删除七牛云上一次上传记录的文件</span><br><span class=\"line\">// 删除七牛云上与本地相同的文件</span><br><span class=\"line\">// 上传文件并指定文件的MimeType</span><br><span class=\"line\">// 记录上传的文件</span><br><span class=\"line\"></span><br><span class=\"line\">async <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">exec</span></span>() &#123;</span><br><span class=\"line\">  // 读取</span><br><span class=\"line\">  <span class=\"built_in\">let</span> deleteOperations = await readFile()</span><br><span class=\"line\">  // console.log(deleteOperations)</span><br><span class=\"line\">  // 删除七牛云上一次上传记录的文件</span><br><span class=\"line\">  console.log(<span class=\"string\">'\\n删除上一次上传文件---------------\\n'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (deleteOperations.length) &#123;</span><br><span class=\"line\">    // <span class=\"built_in\">let</span> deleteOP = await deleteFile(deleteOperations)</span><br><span class=\"line\">    // console.log(deleteOP)</span><br><span class=\"line\">    deleteFile(deleteOperations).<span class=\"keyword\">then</span>((res) =&gt; &#123;</span><br><span class=\"line\">      // console.log(res)</span><br><span class=\"line\">      uploadHome()</span><br><span class=\"line\">    &#125;).catch((err) =&gt; &#123;</span><br><span class=\"line\">      // console.log(err)</span><br><span class=\"line\">      uploadHome()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    uploadHome()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exec</span>()</span><br></pre></td></tr></table></figure>\n<p>运行 <code>node qiniuUpload.js</code></p>\n"},{"title":"使用canvas画环形进度条","date":"2018-08-30T11:07:06.000Z","comments":1,"_content":"\n### 效果展示\n\n![无法展示图片](http://web.xiaojw.xyz/blog_file/canvas.png)\n\n\n### html\n\n```bash\n\n<canvas id=\"myCanvas\" width=\"300\" height=\"150\" style=\"border:1px solid #d3d3d3;\">\n\tYour browser does not support the HTML5 canvas tag.\n</canvas>\n\t\n```\n\n### js\n\n```bash\n\nlet canvas = document.getElementById('myCanvas')\nlet ctx = canvas.getContext('2d')\n// 绘制 灰色层 底层\nctx.beginPath()\nctx.arc(100, 75, 50, 0, 2 * Math.PI)\nctx.lineWidth = 10\nctx.strokeStyle = \"#eee\";\nctx.stroke()\n// 绘制 蓝色层 进度层\nctx.beginPath()\nctx.arc(100, 75, 50, -Math.PI / 2, 0)\nctx.lineWidth = 10\nctx.strokeStyle = \"#489cff\";\nctx.stroke()\n// 绘制文字层\nctx.font = \"20px Verdana\";\n/* 渐变\nlet gradient = ctx.createLinearGradient(0, 0, canvas.width, 0);\ngradient.addColorStop(0, \"magenta\");\ngradient.addColorStop(0.5, \"blue\");\ngradient.addColorStop(1, \"red\");\nctx.fillStyle = gradient;\n*/\nctx.fillStyle = \"#666\";\nctx.fillText(\"25%\", 80, 84)\n\n```\n","source":"_posts/使用canvas画环形进度条.md","raw":"---\ntitle: 使用canvas画环形进度条\ndate: 2018-08-30 19:07:06\ncategories: ['前端'] \ntags: 前端\ncomments: true\n---\n\n### 效果展示\n\n![无法展示图片](http://web.xiaojw.xyz/blog_file/canvas.png)\n\n\n### html\n\n```bash\n\n<canvas id=\"myCanvas\" width=\"300\" height=\"150\" style=\"border:1px solid #d3d3d3;\">\n\tYour browser does not support the HTML5 canvas tag.\n</canvas>\n\t\n```\n\n### js\n\n```bash\n\nlet canvas = document.getElementById('myCanvas')\nlet ctx = canvas.getContext('2d')\n// 绘制 灰色层 底层\nctx.beginPath()\nctx.arc(100, 75, 50, 0, 2 * Math.PI)\nctx.lineWidth = 10\nctx.strokeStyle = \"#eee\";\nctx.stroke()\n// 绘制 蓝色层 进度层\nctx.beginPath()\nctx.arc(100, 75, 50, -Math.PI / 2, 0)\nctx.lineWidth = 10\nctx.strokeStyle = \"#489cff\";\nctx.stroke()\n// 绘制文字层\nctx.font = \"20px Verdana\";\n/* 渐变\nlet gradient = ctx.createLinearGradient(0, 0, canvas.width, 0);\ngradient.addColorStop(0, \"magenta\");\ngradient.addColorStop(0.5, \"blue\");\ngradient.addColorStop(1, \"red\");\nctx.fillStyle = gradient;\n*/\nctx.fillStyle = \"#666\";\nctx.fillText(\"25%\", 80, 84)\n\n```\n","slug":"使用canvas画环形进度条","published":1,"updated":"2019-01-09T01:59:48.789Z","layout":"post","photos":[],"link":"","_id":"cjqojjnnh000huwkq9cyty62p","content":"<h3 id=\"效果展示\"><a href=\"#效果展示\" class=\"headerlink\" title=\"效果展示\"></a>效果展示</h3><p><img src=\"http://web.xiaojw.xyz/blog_file/canvas.png\" alt=\"无法展示图片\"></p>\n<h3 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;canvas id=<span class=\"string\">\"myCanvas\"</span> width=<span class=\"string\">\"300\"</span> height=<span class=\"string\">\"150\"</span> style=<span class=\"string\">\"border:1px solid #d3d3d3;\"</span>&gt;</span><br><span class=\"line\">\tYour browser does not support the HTML5 canvas tag.</span><br><span class=\"line\">&lt;/canvas&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">let</span> canvas = document.getElementById(<span class=\"string\">'myCanvas'</span>)</span><br><span class=\"line\"><span class=\"built_in\">let</span> ctx = canvas.getContext(<span class=\"string\">'2d'</span>)</span><br><span class=\"line\">// 绘制 灰色层 底层</span><br><span class=\"line\">ctx.beginPath()</span><br><span class=\"line\">ctx.arc(100, 75, 50, 0, 2 * Math.PI)</span><br><span class=\"line\">ctx.lineWidth = 10</span><br><span class=\"line\">ctx.strokeStyle = <span class=\"string\">\"#eee\"</span>;</span><br><span class=\"line\">ctx.stroke()</span><br><span class=\"line\">// 绘制 蓝色层 进度层</span><br><span class=\"line\">ctx.beginPath()</span><br><span class=\"line\">ctx.arc(100, 75, 50, -Math.PI / 2, 0)</span><br><span class=\"line\">ctx.lineWidth = 10</span><br><span class=\"line\">ctx.strokeStyle = <span class=\"string\">\"#489cff\"</span>;</span><br><span class=\"line\">ctx.stroke()</span><br><span class=\"line\">// 绘制文字层</span><br><span class=\"line\">ctx.font = <span class=\"string\">\"20px Verdana\"</span>;</span><br><span class=\"line\">/* 渐变</span><br><span class=\"line\"><span class=\"built_in\">let</span> gradient = ctx.createLinearGradient(0, 0, canvas.width, 0);</span><br><span class=\"line\">gradient.addColorStop(0, <span class=\"string\">\"magenta\"</span>);</span><br><span class=\"line\">gradient.addColorStop(0.5, <span class=\"string\">\"blue\"</span>);</span><br><span class=\"line\">gradient.addColorStop(1, <span class=\"string\">\"red\"</span>);</span><br><span class=\"line\">ctx.fillStyle = gradient;</span><br><span class=\"line\">*/</span><br><span class=\"line\">ctx.fillStyle = <span class=\"string\">\"#666\"</span>;</span><br><span class=\"line\">ctx.fillText(<span class=\"string\">\"25%\"</span>, 80, 84)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"效果展示\"><a href=\"#效果展示\" class=\"headerlink\" title=\"效果展示\"></a>效果展示</h3><p><img src=\"http://web.xiaojw.xyz/blog_file/canvas.png\" alt=\"无法展示图片\"></p>\n<h3 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;canvas id=<span class=\"string\">\"myCanvas\"</span> width=<span class=\"string\">\"300\"</span> height=<span class=\"string\">\"150\"</span> style=<span class=\"string\">\"border:1px solid #d3d3d3;\"</span>&gt;</span><br><span class=\"line\">\tYour browser does not support the HTML5 canvas tag.</span><br><span class=\"line\">&lt;/canvas&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">let</span> canvas = document.getElementById(<span class=\"string\">'myCanvas'</span>)</span><br><span class=\"line\"><span class=\"built_in\">let</span> ctx = canvas.getContext(<span class=\"string\">'2d'</span>)</span><br><span class=\"line\">// 绘制 灰色层 底层</span><br><span class=\"line\">ctx.beginPath()</span><br><span class=\"line\">ctx.arc(100, 75, 50, 0, 2 * Math.PI)</span><br><span class=\"line\">ctx.lineWidth = 10</span><br><span class=\"line\">ctx.strokeStyle = <span class=\"string\">\"#eee\"</span>;</span><br><span class=\"line\">ctx.stroke()</span><br><span class=\"line\">// 绘制 蓝色层 进度层</span><br><span class=\"line\">ctx.beginPath()</span><br><span class=\"line\">ctx.arc(100, 75, 50, -Math.PI / 2, 0)</span><br><span class=\"line\">ctx.lineWidth = 10</span><br><span class=\"line\">ctx.strokeStyle = <span class=\"string\">\"#489cff\"</span>;</span><br><span class=\"line\">ctx.stroke()</span><br><span class=\"line\">// 绘制文字层</span><br><span class=\"line\">ctx.font = <span class=\"string\">\"20px Verdana\"</span>;</span><br><span class=\"line\">/* 渐变</span><br><span class=\"line\"><span class=\"built_in\">let</span> gradient = ctx.createLinearGradient(0, 0, canvas.width, 0);</span><br><span class=\"line\">gradient.addColorStop(0, <span class=\"string\">\"magenta\"</span>);</span><br><span class=\"line\">gradient.addColorStop(0.5, <span class=\"string\">\"blue\"</span>);</span><br><span class=\"line\">gradient.addColorStop(1, <span class=\"string\">\"red\"</span>);</span><br><span class=\"line\">ctx.fillStyle = gradient;</span><br><span class=\"line\">*/</span><br><span class=\"line\">ctx.fillStyle = <span class=\"string\">\"#666\"</span>;</span><br><span class=\"line\">ctx.fillText(<span class=\"string\">\"25%\"</span>, 80, 84)</span><br></pre></td></tr></table></figure>\n"},{"title":"关于vue中修改UI库样式的坑","date":"2018-09-19T03:57:01.000Z","comments":1,"_content":"\n## 一、怎么修改样式都不生效，在浏览器上改就能生效\n\n### 原因一: style标签加了scoped属性`<style scoped>`,去掉即可\n```bash\n<style>\n</style>\n```\n### 原因二: 那就是选择器没选中咯,检查检查\n\n\n## 二、修改样式后影响了其他组件的样式\n\n### 原因:直接在UI组件上加的样式\n\n### 解决:在外层再套一层标签 加上限制,便不会影响全局了\n例:\n```bash\n---------------------\ntemplate\n---------------------\n\n<div class=\"elinput\">\n\t<el-input v-model=\"form.VerificationCode\" placeholder=\"输入验证码\"\n\t   auto-complete=\"ture\"></el-input>\n</div>\n\n---------------------\nstyle\n---------------------\n.elinput .el-input{\n// 写样式\n}\n```\n","source":"_posts/关于vue中修改UI库样式的坑.md","raw":"---\ntitle: 关于vue中修改UI库样式的坑\ndate: 2018-09-19 11:57:01\ncategories: ['前端'] \ntags: 前端\ncomments: true\n---\n\n## 一、怎么修改样式都不生效，在浏览器上改就能生效\n\n### 原因一: style标签加了scoped属性`<style scoped>`,去掉即可\n```bash\n<style>\n</style>\n```\n### 原因二: 那就是选择器没选中咯,检查检查\n\n\n## 二、修改样式后影响了其他组件的样式\n\n### 原因:直接在UI组件上加的样式\n\n### 解决:在外层再套一层标签 加上限制,便不会影响全局了\n例:\n```bash\n---------------------\ntemplate\n---------------------\n\n<div class=\"elinput\">\n\t<el-input v-model=\"form.VerificationCode\" placeholder=\"输入验证码\"\n\t   auto-complete=\"ture\"></el-input>\n</div>\n\n---------------------\nstyle\n---------------------\n.elinput .el-input{\n// 写样式\n}\n```\n","slug":"关于vue中修改UI库样式的坑","published":1,"updated":"2018-09-19T04:15:18.889Z","layout":"post","photos":[],"link":"","_id":"cjqojjnnk000kuwkqz2ejfjxj","content":"<h2 id=\"一、怎么修改样式都不生效，在浏览器上改就能生效\"><a href=\"#一、怎么修改样式都不生效，在浏览器上改就能生效\" class=\"headerlink\" title=\"一、怎么修改样式都不生效，在浏览器上改就能生效\"></a>一、怎么修改样式都不生效，在浏览器上改就能生效</h2><h3 id=\"原因一-style标签加了scoped属性-lt-style-scoped-gt-去掉即可\"><a href=\"#原因一-style标签加了scoped属性-lt-style-scoped-gt-去掉即可\" class=\"headerlink\" title=\"原因一: style标签加了scoped属性&lt;style scoped&gt;,去掉即可\"></a>原因一: style标签加了scoped属性<code>&lt;style scoped&gt;</code>,去掉即可</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"原因二-那就是选择器没选中咯-检查检查\"><a href=\"#原因二-那就是选择器没选中咯-检查检查\" class=\"headerlink\" title=\"原因二: 那就是选择器没选中咯,检查检查\"></a>原因二: 那就是选择器没选中咯,检查检查</h3><h2 id=\"二、修改样式后影响了其他组件的样式\"><a href=\"#二、修改样式后影响了其他组件的样式\" class=\"headerlink\" title=\"二、修改样式后影响了其他组件的样式\"></a>二、修改样式后影响了其他组件的样式</h2><h3 id=\"原因-直接在UI组件上加的样式\"><a href=\"#原因-直接在UI组件上加的样式\" class=\"headerlink\" title=\"原因:直接在UI组件上加的样式\"></a>原因:直接在UI组件上加的样式</h3><h3 id=\"解决-在外层再套一层标签-加上限制-便不会影响全局了\"><a href=\"#解决-在外层再套一层标签-加上限制-便不会影响全局了\" class=\"headerlink\" title=\"解决:在外层再套一层标签 加上限制,便不会影响全局了\"></a>解决:在外层再套一层标签 加上限制,便不会影响全局了</h3><p>例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---------------------</span><br><span class=\"line\">template</span><br><span class=\"line\">---------------------</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div class=<span class=\"string\">\"elinput\"</span>&gt;</span><br><span class=\"line\">\t&lt;el-input v-model=<span class=\"string\">\"form.VerificationCode\"</span> placeholder=<span class=\"string\">\"输入验证码\"</span></span><br><span class=\"line\">\t   auto-complete=<span class=\"string\">\"ture\"</span>&gt;&lt;/el-input&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">---------------------</span><br><span class=\"line\">style</span><br><span class=\"line\">---------------------</span><br><span class=\"line\">.elinput .el-input&#123;</span><br><span class=\"line\">// 写样式</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、怎么修改样式都不生效，在浏览器上改就能生效\"><a href=\"#一、怎么修改样式都不生效，在浏览器上改就能生效\" class=\"headerlink\" title=\"一、怎么修改样式都不生效，在浏览器上改就能生效\"></a>一、怎么修改样式都不生效，在浏览器上改就能生效</h2><h3 id=\"原因一-style标签加了scoped属性-lt-style-scoped-gt-去掉即可\"><a href=\"#原因一-style标签加了scoped属性-lt-style-scoped-gt-去掉即可\" class=\"headerlink\" title=\"原因一: style标签加了scoped属性&lt;style scoped&gt;,去掉即可\"></a>原因一: style标签加了scoped属性<code>&lt;style scoped&gt;</code>,去掉即可</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"原因二-那就是选择器没选中咯-检查检查\"><a href=\"#原因二-那就是选择器没选中咯-检查检查\" class=\"headerlink\" title=\"原因二: 那就是选择器没选中咯,检查检查\"></a>原因二: 那就是选择器没选中咯,检查检查</h3><h2 id=\"二、修改样式后影响了其他组件的样式\"><a href=\"#二、修改样式后影响了其他组件的样式\" class=\"headerlink\" title=\"二、修改样式后影响了其他组件的样式\"></a>二、修改样式后影响了其他组件的样式</h2><h3 id=\"原因-直接在UI组件上加的样式\"><a href=\"#原因-直接在UI组件上加的样式\" class=\"headerlink\" title=\"原因:直接在UI组件上加的样式\"></a>原因:直接在UI组件上加的样式</h3><h3 id=\"解决-在外层再套一层标签-加上限制-便不会影响全局了\"><a href=\"#解决-在外层再套一层标签-加上限制-便不会影响全局了\" class=\"headerlink\" title=\"解决:在外层再套一层标签 加上限制,便不会影响全局了\"></a>解决:在外层再套一层标签 加上限制,便不会影响全局了</h3><p>例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---------------------</span><br><span class=\"line\">template</span><br><span class=\"line\">---------------------</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div class=<span class=\"string\">\"elinput\"</span>&gt;</span><br><span class=\"line\">\t&lt;el-input v-model=<span class=\"string\">\"form.VerificationCode\"</span> placeholder=<span class=\"string\">\"输入验证码\"</span></span><br><span class=\"line\">\t   auto-complete=<span class=\"string\">\"ture\"</span>&gt;&lt;/el-input&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">---------------------</span><br><span class=\"line\">style</span><br><span class=\"line\">---------------------</span><br><span class=\"line\">.elinput .el-input&#123;</span><br><span class=\"line\">// 写样式</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"关于列表水平展示的方法","date":"2018-09-07T10:38:22.000Z","comments":1,"_content":"\n### 一、使用`float:left; 或 float:right`\n\n这个方法水平排列起来简单 只需\n```bash\nfloat:left;\n```\n但是会引起一些不必要的问题: 父级盒子没有float部分的高度,因为float脱离了标准文档流\n解决办法可以设置父级的高,清理浮动,清理浮动的方式有很多,推荐使用伪类清理法\n```bash\n<div class ='clearfix'></div>\n\n.clearfix::after {\n\tcontent: \".\";\n\tclear: both;\n\tdisplay: block;\n\toverflow: hidden;\n\tfont-size: 0;\n\theight: 0;\n}\n// 为兼容IE6,IE7，因为ie6,ie7不能用after伪类。加上下面代码\n.clearfix{zoom:1}\n```\n### 二、设置元素为行内块元素\n\n在需要水平排列的地方\n```bash\ndisplay: inline-block;\n```\n问题 两个块中会有间隙\n例\n```bash\n<div>一</div>\n<div>二</div>\n```\n解决一.\n去掉两个中的间隙\n```bash\n<div>一</div><div>二</div>\n```\n解决二\n设置父元素font-size为0或者line-height为0,子元素再对应设置font-size.line-height\n```bash\n<div class=\"outer\">\n\t<div>一</div>\n\t<div>二</div>\n</div>\n---------\nstyle\n---------\n.outer{\n\tfont-size:0;\n\tline-height:0;\n}\n.outer div{\n\tfont-size:18px;\n\tline-height:30px;\n}\n```\n### 三、使用flex布局\n\n在需要水平排列的父布局中\n\n```bash\ndisplay: flex;\n// flex-wrap: wrap; /*超出宽度强制换行*/\n```\n在子布局中\n\n```bash\nflex: 1;\n// 更多参数选择请自行百度 flex\n```","source":"_posts/关于列表水平展示的方法.md","raw":"---\ntitle: 关于列表水平展示的方法\ndate: 2018-09-07 18:38:22\ncategories: ['前端'] \ntags: 前端\ncomments: true\n---\n\n### 一、使用`float:left; 或 float:right`\n\n这个方法水平排列起来简单 只需\n```bash\nfloat:left;\n```\n但是会引起一些不必要的问题: 父级盒子没有float部分的高度,因为float脱离了标准文档流\n解决办法可以设置父级的高,清理浮动,清理浮动的方式有很多,推荐使用伪类清理法\n```bash\n<div class ='clearfix'></div>\n\n.clearfix::after {\n\tcontent: \".\";\n\tclear: both;\n\tdisplay: block;\n\toverflow: hidden;\n\tfont-size: 0;\n\theight: 0;\n}\n// 为兼容IE6,IE7，因为ie6,ie7不能用after伪类。加上下面代码\n.clearfix{zoom:1}\n```\n### 二、设置元素为行内块元素\n\n在需要水平排列的地方\n```bash\ndisplay: inline-block;\n```\n问题 两个块中会有间隙\n例\n```bash\n<div>一</div>\n<div>二</div>\n```\n解决一.\n去掉两个中的间隙\n```bash\n<div>一</div><div>二</div>\n```\n解决二\n设置父元素font-size为0或者line-height为0,子元素再对应设置font-size.line-height\n```bash\n<div class=\"outer\">\n\t<div>一</div>\n\t<div>二</div>\n</div>\n---------\nstyle\n---------\n.outer{\n\tfont-size:0;\n\tline-height:0;\n}\n.outer div{\n\tfont-size:18px;\n\tline-height:30px;\n}\n```\n### 三、使用flex布局\n\n在需要水平排列的父布局中\n\n```bash\ndisplay: flex;\n// flex-wrap: wrap; /*超出宽度强制换行*/\n```\n在子布局中\n\n```bash\nflex: 1;\n// 更多参数选择请自行百度 flex\n```","slug":"关于列表水平展示的方法","published":1,"updated":"2018-09-20T08:28:56.849Z","layout":"post","photos":[],"link":"","_id":"cjqojjnnv000puwkqzycreuar","content":"<h3 id=\"一、使用float-left-或-float-right\"><a href=\"#一、使用float-left-或-float-right\" class=\"headerlink\" title=\"一、使用float:left; 或 float:right\"></a>一、使用<code>float:left; 或 float:right</code></h3><p>这个方法水平排列起来简单 只需<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">float</span>:left;</span><br></pre></td></tr></table></figure></p>\n<p>但是会引起一些不必要的问题: 父级盒子没有float部分的高度,因为float脱离了标准文档流<br>解决办法可以设置父级的高,清理浮动,清理浮动的方式有很多,推荐使用伪类清理法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class =<span class=\"string\">'clearfix'</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">.clearfix::after &#123;</span><br><span class=\"line\">\tcontent: <span class=\"string\">\".\"</span>;</span><br><span class=\"line\">\tclear: both;</span><br><span class=\"line\">\tdisplay: block;</span><br><span class=\"line\">\toverflow: hidden;</span><br><span class=\"line\">\tfont-size: 0;</span><br><span class=\"line\">\theight: 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 为兼容IE6,IE7，因为ie6,ie7不能用after伪类。加上下面代码</span><br><span class=\"line\">.clearfix&#123;zoom:1&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"二、设置元素为行内块元素\"><a href=\"#二、设置元素为行内块元素\" class=\"headerlink\" title=\"二、设置元素为行内块元素\"></a>二、设置元素为行内块元素</h3><p>在需要水平排列的地方<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display: inline-block;</span><br></pre></td></tr></table></figure></p>\n<p>问题 两个块中会有间隙<br>例<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;一&lt;/div&gt;</span><br><span class=\"line\">&lt;div&gt;二&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>解决一.<br>去掉两个中的间隙<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;一&lt;/div&gt;&lt;div&gt;二&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>解决二<br>设置父元素font-size为0或者line-height为0,子元素再对应设置font-size.line-height<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=<span class=\"string\">\"outer\"</span>&gt;</span><br><span class=\"line\">\t&lt;div&gt;一&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div&gt;二&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">---------</span><br><span class=\"line\">style</span><br><span class=\"line\">---------</span><br><span class=\"line\">.outer&#123;</span><br><span class=\"line\">\tfont-size:0;</span><br><span class=\"line\">\tline-height:0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.outer div&#123;</span><br><span class=\"line\">\tfont-size:18px;</span><br><span class=\"line\">\tline-height:30px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"三、使用flex布局\"><a href=\"#三、使用flex布局\" class=\"headerlink\" title=\"三、使用flex布局\"></a>三、使用flex布局</h3><p>在需要水平排列的父布局中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display: flex;</span><br><span class=\"line\">// flex-wrap: wrap; /*超出宽度强制换行*/</span><br></pre></td></tr></table></figure>\n<p>在子布局中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flex: 1;</span><br><span class=\"line\">// 更多参数选择请自行百度 flex</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、使用float-left-或-float-right\"><a href=\"#一、使用float-left-或-float-right\" class=\"headerlink\" title=\"一、使用float:left; 或 float:right\"></a>一、使用<code>float:left; 或 float:right</code></h3><p>这个方法水平排列起来简单 只需<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">float</span>:left;</span><br></pre></td></tr></table></figure></p>\n<p>但是会引起一些不必要的问题: 父级盒子没有float部分的高度,因为float脱离了标准文档流<br>解决办法可以设置父级的高,清理浮动,清理浮动的方式有很多,推荐使用伪类清理法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class =<span class=\"string\">'clearfix'</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">.clearfix::after &#123;</span><br><span class=\"line\">\tcontent: <span class=\"string\">\".\"</span>;</span><br><span class=\"line\">\tclear: both;</span><br><span class=\"line\">\tdisplay: block;</span><br><span class=\"line\">\toverflow: hidden;</span><br><span class=\"line\">\tfont-size: 0;</span><br><span class=\"line\">\theight: 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 为兼容IE6,IE7，因为ie6,ie7不能用after伪类。加上下面代码</span><br><span class=\"line\">.clearfix&#123;zoom:1&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"二、设置元素为行内块元素\"><a href=\"#二、设置元素为行内块元素\" class=\"headerlink\" title=\"二、设置元素为行内块元素\"></a>二、设置元素为行内块元素</h3><p>在需要水平排列的地方<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display: inline-block;</span><br></pre></td></tr></table></figure></p>\n<p>问题 两个块中会有间隙<br>例<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;一&lt;/div&gt;</span><br><span class=\"line\">&lt;div&gt;二&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>解决一.<br>去掉两个中的间隙<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;一&lt;/div&gt;&lt;div&gt;二&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>解决二<br>设置父元素font-size为0或者line-height为0,子元素再对应设置font-size.line-height<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=<span class=\"string\">\"outer\"</span>&gt;</span><br><span class=\"line\">\t&lt;div&gt;一&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div&gt;二&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">---------</span><br><span class=\"line\">style</span><br><span class=\"line\">---------</span><br><span class=\"line\">.outer&#123;</span><br><span class=\"line\">\tfont-size:0;</span><br><span class=\"line\">\tline-height:0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.outer div&#123;</span><br><span class=\"line\">\tfont-size:18px;</span><br><span class=\"line\">\tline-height:30px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"三、使用flex布局\"><a href=\"#三、使用flex布局\" class=\"headerlink\" title=\"三、使用flex布局\"></a>三、使用flex布局</h3><p>在需要水平排列的父布局中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display: flex;</span><br><span class=\"line\">// flex-wrap: wrap; /*超出宽度强制换行*/</span><br></pre></td></tr></table></figure>\n<p>在子布局中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flex: 1;</span><br><span class=\"line\">// 更多参数选择请自行百度 flex</span><br></pre></td></tr></table></figure>"},{"title":"删除服务器乱码文件/目录","date":"2018-08-30T02:20:58.000Z","comments":1,"_content":"\n## 方法一\n\n### 1.使用 `ls -li` 命令得到乱码文件的 inode 值\n\n``` bash\n$ ls -li\n```\n### 2.使用 `find . -inum 24609 -exec rm {} -rf \\;` 命令删除乱码文件.其中24609替换为乱码文件的inode值. 注意空格 中英文符号\\;等\n\n``` bash\n$ find . -inum 24609 -exec rm {} -rf \\;\n```\n\n\n## 方法二\n\n### 1.使用`rm -rf` 删除上一级目录，当然前提是需要备份你需要备份的数据.\n\n``` bash\n一种思路：\n\n1. 比如/home下文件夹内含有乱码的文件\n\n2. mkdir tmp\n\n3. 将所有的文件首先移动到 mv * tmp/\n\n4.到tmp下 把所有有正常的显示字符的文件移动出来\n\ncd tmp ;\n\nmv [a-zA-Z0-9]* ..\n\n5.现在可以 rm -rf tmp 了\n\n```\n","source":"_posts/删除服务器乱码文件.md","raw":"---\ntitle: 删除服务器乱码文件/目录\ndate: 2018-08-30 10:20:58\ncategories: ['服务器'] \ntags: 服务器\ncomments: true\n---\n\n## 方法一\n\n### 1.使用 `ls -li` 命令得到乱码文件的 inode 值\n\n``` bash\n$ ls -li\n```\n### 2.使用 `find . -inum 24609 -exec rm {} -rf \\;` 命令删除乱码文件.其中24609替换为乱码文件的inode值. 注意空格 中英文符号\\;等\n\n``` bash\n$ find . -inum 24609 -exec rm {} -rf \\;\n```\n\n\n## 方法二\n\n### 1.使用`rm -rf` 删除上一级目录，当然前提是需要备份你需要备份的数据.\n\n``` bash\n一种思路：\n\n1. 比如/home下文件夹内含有乱码的文件\n\n2. mkdir tmp\n\n3. 将所有的文件首先移动到 mv * tmp/\n\n4.到tmp下 把所有有正常的显示字符的文件移动出来\n\ncd tmp ;\n\nmv [a-zA-Z0-9]* ..\n\n5.现在可以 rm -rf tmp 了\n\n```\n","slug":"删除服务器乱码文件","published":1,"updated":"2018-08-30T09:43:42.000Z","layout":"post","photos":[],"link":"","_id":"cjqojjnnx000suwkql2mhqmak","content":"<h2 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2><h3 id=\"1-使用-ls-li-命令得到乱码文件的-inode-值\"><a href=\"#1-使用-ls-li-命令得到乱码文件的-inode-值\" class=\"headerlink\" title=\"1.使用 ls -li 命令得到乱码文件的 inode 值\"></a>1.使用 <code>ls -li</code> 命令得到乱码文件的 inode 值</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls -li</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-使用-find-inum-24609-exec-rm-rf-命令删除乱码文件-其中24609替换为乱码文件的inode值-注意空格-中英文符号-等\"><a href=\"#2-使用-find-inum-24609-exec-rm-rf-命令删除乱码文件-其中24609替换为乱码文件的inode值-注意空格-中英文符号-等\" class=\"headerlink\" title=\"2.使用 find . -inum 24609 -exec rm {} -rf \\; 命令删除乱码文件.其中24609替换为乱码文件的inode值. 注意空格 中英文符号\\;等\"></a>2.使用 <code>find . -inum 24609 -exec rm {} -rf \\;</code> 命令删除乱码文件.其中24609替换为乱码文件的inode值. 注意空格 中英文符号\\;等</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ find . -inum 24609 -<span class=\"built_in\">exec</span> rm &#123;&#125; -rf \\;</span><br></pre></td></tr></table></figure>\n<h2 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2><h3 id=\"1-使用rm-rf-删除上一级目录，当然前提是需要备份你需要备份的数据\"><a href=\"#1-使用rm-rf-删除上一级目录，当然前提是需要备份你需要备份的数据\" class=\"headerlink\" title=\"1.使用rm -rf 删除上一级目录，当然前提是需要备份你需要备份的数据.\"></a>1.使用<code>rm -rf</code> 删除上一级目录，当然前提是需要备份你需要备份的数据.</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一种思路：</span><br><span class=\"line\"></span><br><span class=\"line\">1. 比如/home下文件夹内含有乱码的文件</span><br><span class=\"line\"></span><br><span class=\"line\">2. mkdir tmp</span><br><span class=\"line\"></span><br><span class=\"line\">3. 将所有的文件首先移动到 mv * tmp/</span><br><span class=\"line\"></span><br><span class=\"line\">4.到tmp下 把所有有正常的显示字符的文件移动出来</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> tmp ;</span><br><span class=\"line\"></span><br><span class=\"line\">mv [a-zA-Z0-9]* ..</span><br><span class=\"line\"></span><br><span class=\"line\">5.现在可以 rm -rf tmp 了</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2><h3 id=\"1-使用-ls-li-命令得到乱码文件的-inode-值\"><a href=\"#1-使用-ls-li-命令得到乱码文件的-inode-值\" class=\"headerlink\" title=\"1.使用 ls -li 命令得到乱码文件的 inode 值\"></a>1.使用 <code>ls -li</code> 命令得到乱码文件的 inode 值</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls -li</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-使用-find-inum-24609-exec-rm-rf-命令删除乱码文件-其中24609替换为乱码文件的inode值-注意空格-中英文符号-等\"><a href=\"#2-使用-find-inum-24609-exec-rm-rf-命令删除乱码文件-其中24609替换为乱码文件的inode值-注意空格-中英文符号-等\" class=\"headerlink\" title=\"2.使用 find . -inum 24609 -exec rm {} -rf \\; 命令删除乱码文件.其中24609替换为乱码文件的inode值. 注意空格 中英文符号\\;等\"></a>2.使用 <code>find . -inum 24609 -exec rm {} -rf \\;</code> 命令删除乱码文件.其中24609替换为乱码文件的inode值. 注意空格 中英文符号\\;等</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ find . -inum 24609 -<span class=\"built_in\">exec</span> rm &#123;&#125; -rf \\;</span><br></pre></td></tr></table></figure>\n<h2 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2><h3 id=\"1-使用rm-rf-删除上一级目录，当然前提是需要备份你需要备份的数据\"><a href=\"#1-使用rm-rf-删除上一级目录，当然前提是需要备份你需要备份的数据\" class=\"headerlink\" title=\"1.使用rm -rf 删除上一级目录，当然前提是需要备份你需要备份的数据.\"></a>1.使用<code>rm -rf</code> 删除上一级目录，当然前提是需要备份你需要备份的数据.</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一种思路：</span><br><span class=\"line\"></span><br><span class=\"line\">1. 比如/home下文件夹内含有乱码的文件</span><br><span class=\"line\"></span><br><span class=\"line\">2. mkdir tmp</span><br><span class=\"line\"></span><br><span class=\"line\">3. 将所有的文件首先移动到 mv * tmp/</span><br><span class=\"line\"></span><br><span class=\"line\">4.到tmp下 把所有有正常的显示字符的文件移动出来</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> tmp ;</span><br><span class=\"line\"></span><br><span class=\"line\">mv [a-zA-Z0-9]* ..</span><br><span class=\"line\"></span><br><span class=\"line\">5.现在可以 rm -rf tmp 了</span><br></pre></td></tr></table></figure>\n"},{"title":"动态路由-路由访问权限","date":"2018-08-30T02:42:53.000Z","_content":"\n### 动态路由控制权限 [参考文章](https://blog.csdn.net/qq_34160246/article/details/80322036)\n\n```bash\n\nlogin.vue\n\nlet dR = new Array();\nfor (let i = 0; i < dynamicRouter.length; i++) { //第一层循环遍历动态路由表的每一个路由\n  let aside_list = this.aside_list\n  for (let j = 0; j < aside_list.length; j++) {\n    if (dynamicRouter[i].path === aside_list[j].path && aside_list[j].isShow) {\n      // console.log(dynamicRouter[i])\n      dR.push(dynamicRouter[i]); // 符合条件的路由信息就放进数组里\n      if (!this.xjw) {\n        // this.firstShowPath = dynamicRouter[i]\n        dR.push(dynamicRouter[2]);\n        this.xjw = true\n      }\n    } else if (aside_list[j].path.indexOf('x') && aside_list[j].isShow) {\n      if (!this.first) { // 符合条件的路由的福袋必须访问的路由就放进数组里\n        dR.push(dynamicRouter[0]);\n        dR.push(dynamicRouter[1]);\n        this.first = true\n      }\n    } else if (\n      (aside_list[j].path.indexOf('xx')\n        || aside_list[j].path.indexOf('xxx') || aside_list[j].path.indexOf('xxxx'))\n      && aside_list[j].isShow) {\n      if (!this.second) {\n        dR.push(dynamicRouter[1]);\n        this.second = true\n      }\n    }\n  }\n}\nthis.xjw = null\nthis.first = null\nthis.second = null\n// console.log(dR)\nthis.$router.addRoutes(dR.concat([{ //这里调用addRoutes方法，动态添加符合条件的路由\n  path: '*',\n  redirect: '/404' //所有不匹配路径(*)都重定向到404，为什么写在这里而不放到静态路由表里可以查看“前端路上”的文章\n}]));\n\nthis.$router.push(this.firstShowPath);\n \n\n\nAPP.vue\n\n// 获取登录状态\nif (!isLogin) {\n  return this.$router.push('/login');\n} else {\n  let dR = new Array();\n  for (let i = 0; i < dynamicRouter.length; i++) {\n    let aside_list = this.get_aside_list.aside_list\n    // console.log(dynamicRouter[i])\n    for (let j = 0; j < aside_list.length; j++) {\n      if (dynamicRouter[i].path === aside_list[j].path && aside_list[j].isShow) {\n        // console.log(dynamicRouter[i])\n        dR.push(dynamicRouter[i]); //符合条件的路由信息就放进数组里\n        if (!this.xjw) {\n          dR.push(dynamicRouter[2]);\n          this.xjw = true\n        }\n      } else if (aside_list[j].path.indexOf('x') && aside_list[j].isShow) {\n        if (!this.first) {\n          dR.push(dynamicRouter[0]);\n          dR.push(dynamicRouter[1]);\n          this.first = true\n        }\n      } else if (\n        (aside_list[j].path.indexOf('xx')\n          || aside_list[j].path.indexOf('xxx') || aside_list[j].path.indexOf('xxxx'))\n        && aside_list[j].isShow) {\n        if (!this.second) {\n          dR.push(dynamicRouter[1]);\n          this.second = true\n        }\n      }\n    }\n  }\n  this.xjw = null\n  this.first = null\n  this.second = null\n  // console.log(dR)\n  this.$router.addRoutes(dR);\n  \n```","source":"_posts/动态路由-路由访问权限.md","raw":"---\ntitle: 动态路由-路由访问权限\ndate: 2018-08-30 10:42:53\ncategories: ['前端'] \ntags: 前端\n\n---\n\n### 动态路由控制权限 [参考文章](https://blog.csdn.net/qq_34160246/article/details/80322036)\n\n```bash\n\nlogin.vue\n\nlet dR = new Array();\nfor (let i = 0; i < dynamicRouter.length; i++) { //第一层循环遍历动态路由表的每一个路由\n  let aside_list = this.aside_list\n  for (let j = 0; j < aside_list.length; j++) {\n    if (dynamicRouter[i].path === aside_list[j].path && aside_list[j].isShow) {\n      // console.log(dynamicRouter[i])\n      dR.push(dynamicRouter[i]); // 符合条件的路由信息就放进数组里\n      if (!this.xjw) {\n        // this.firstShowPath = dynamicRouter[i]\n        dR.push(dynamicRouter[2]);\n        this.xjw = true\n      }\n    } else if (aside_list[j].path.indexOf('x') && aside_list[j].isShow) {\n      if (!this.first) { // 符合条件的路由的福袋必须访问的路由就放进数组里\n        dR.push(dynamicRouter[0]);\n        dR.push(dynamicRouter[1]);\n        this.first = true\n      }\n    } else if (\n      (aside_list[j].path.indexOf('xx')\n        || aside_list[j].path.indexOf('xxx') || aside_list[j].path.indexOf('xxxx'))\n      && aside_list[j].isShow) {\n      if (!this.second) {\n        dR.push(dynamicRouter[1]);\n        this.second = true\n      }\n    }\n  }\n}\nthis.xjw = null\nthis.first = null\nthis.second = null\n// console.log(dR)\nthis.$router.addRoutes(dR.concat([{ //这里调用addRoutes方法，动态添加符合条件的路由\n  path: '*',\n  redirect: '/404' //所有不匹配路径(*)都重定向到404，为什么写在这里而不放到静态路由表里可以查看“前端路上”的文章\n}]));\n\nthis.$router.push(this.firstShowPath);\n \n\n\nAPP.vue\n\n// 获取登录状态\nif (!isLogin) {\n  return this.$router.push('/login');\n} else {\n  let dR = new Array();\n  for (let i = 0; i < dynamicRouter.length; i++) {\n    let aside_list = this.get_aside_list.aside_list\n    // console.log(dynamicRouter[i])\n    for (let j = 0; j < aside_list.length; j++) {\n      if (dynamicRouter[i].path === aside_list[j].path && aside_list[j].isShow) {\n        // console.log(dynamicRouter[i])\n        dR.push(dynamicRouter[i]); //符合条件的路由信息就放进数组里\n        if (!this.xjw) {\n          dR.push(dynamicRouter[2]);\n          this.xjw = true\n        }\n      } else if (aside_list[j].path.indexOf('x') && aside_list[j].isShow) {\n        if (!this.first) {\n          dR.push(dynamicRouter[0]);\n          dR.push(dynamicRouter[1]);\n          this.first = true\n        }\n      } else if (\n        (aside_list[j].path.indexOf('xx')\n          || aside_list[j].path.indexOf('xxx') || aside_list[j].path.indexOf('xxxx'))\n        && aside_list[j].isShow) {\n        if (!this.second) {\n          dR.push(dynamicRouter[1]);\n          this.second = true\n        }\n      }\n    }\n  }\n  this.xjw = null\n  this.first = null\n  this.second = null\n  // console.log(dR)\n  this.$router.addRoutes(dR);\n  \n```","slug":"动态路由-路由访问权限","published":1,"updated":"2018-08-30T09:43:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqojjno0000vuwkqc0f7hn5w","content":"<h3 id=\"动态路由控制权限-参考文章\"><a href=\"#动态路由控制权限-参考文章\" class=\"headerlink\" title=\"动态路由控制权限 参考文章\"></a>动态路由控制权限 <a href=\"https://blog.csdn.net/qq_34160246/article/details/80322036\" target=\"_blank\" rel=\"noopener\">参考文章</a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">login.vue</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">let</span> dR = new Array();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"built_in\">let</span> i = 0; i &lt; dynamicRouter.length; i++) &#123; //第一层循环遍历动态路由表的每一个路由</span><br><span class=\"line\">  <span class=\"built_in\">let</span> aside_list = this.aside_list</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"built_in\">let</span> j = 0; j &lt; aside_list.length; j++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dynamicRouter[i].path === aside_list[j].path &amp;&amp; aside_list[j].isShow) &#123;</span><br><span class=\"line\">      // console.log(dynamicRouter[i])</span><br><span class=\"line\">      dR.push(dynamicRouter[i]); // 符合条件的路由信息就放进数组里</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!this.xjw) &#123;</span><br><span class=\"line\">        // this.firstShowPath = dynamicRouter[i]</span><br><span class=\"line\">        dR.push(dynamicRouter[2]);</span><br><span class=\"line\">        this.xjw = <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (aside_list[j].path.indexOf(<span class=\"string\">'x'</span>) &amp;&amp; aside_list[j].isShow) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!this.first) &#123; // 符合条件的路由的福袋必须访问的路由就放进数组里</span><br><span class=\"line\">        dR.push(dynamicRouter[0]);</span><br><span class=\"line\">        dR.push(dynamicRouter[1]);</span><br><span class=\"line\">        this.first = <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      (aside_list[j].path.indexOf(<span class=\"string\">'xx'</span>)</span><br><span class=\"line\">        || aside_list[j].path.indexOf(<span class=\"string\">'xxx'</span>) || aside_list[j].path.indexOf(<span class=\"string\">'xxxx'</span>))</span><br><span class=\"line\">      &amp;&amp; aside_list[j].isShow) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!this.second) &#123;</span><br><span class=\"line\">        dR.push(dynamicRouter[1]);</span><br><span class=\"line\">        this.second = <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">this.xjw = null</span><br><span class=\"line\">this.first = null</span><br><span class=\"line\">this.second = null</span><br><span class=\"line\">// console.log(dR)</span><br><span class=\"line\">this.<span class=\"variable\">$router</span>.addRoutes(dR.concat([&#123; //这里调用addRoutes方法，动态添加符合条件的路由</span><br><span class=\"line\">  path: <span class=\"string\">'*'</span>,</span><br><span class=\"line\">  redirect: <span class=\"string\">'/404'</span> //所有不匹配路径(*)都重定向到404，为什么写在这里而不放到静态路由表里可以查看“前端路上”的文章</span><br><span class=\"line\">&#125;]));</span><br><span class=\"line\"></span><br><span class=\"line\">this.<span class=\"variable\">$router</span>.push(this.firstShowPath);</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">APP.vue</span><br><span class=\"line\"></span><br><span class=\"line\">// 获取登录状态</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!isLogin) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> this.<span class=\"variable\">$router</span>.push(<span class=\"string\">'/login'</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">let</span> dR = new Array();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"built_in\">let</span> i = 0; i &lt; dynamicRouter.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> aside_list = this.get_aside_list.aside_list</span><br><span class=\"line\">    // console.log(dynamicRouter[i])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">let</span> j = 0; j &lt; aside_list.length; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (dynamicRouter[i].path === aside_list[j].path &amp;&amp; aside_list[j].isShow) &#123;</span><br><span class=\"line\">        // console.log(dynamicRouter[i])</span><br><span class=\"line\">        dR.push(dynamicRouter[i]); //符合条件的路由信息就放进数组里</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!this.xjw) &#123;</span><br><span class=\"line\">          dR.push(dynamicRouter[2]);</span><br><span class=\"line\">          this.xjw = <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (aside_list[j].path.indexOf(<span class=\"string\">'x'</span>) &amp;&amp; aside_list[j].isShow) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!this.first) &#123;</span><br><span class=\"line\">          dR.push(dynamicRouter[0]);</span><br><span class=\"line\">          dR.push(dynamicRouter[1]);</span><br><span class=\"line\">          this.first = <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        (aside_list[j].path.indexOf(<span class=\"string\">'xx'</span>)</span><br><span class=\"line\">          || aside_list[j].path.indexOf(<span class=\"string\">'xxx'</span>) || aside_list[j].path.indexOf(<span class=\"string\">'xxxx'</span>))</span><br><span class=\"line\">        &amp;&amp; aside_list[j].isShow) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!this.second) &#123;</span><br><span class=\"line\">          dR.push(dynamicRouter[1]);</span><br><span class=\"line\">          this.second = <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  this.xjw = null</span><br><span class=\"line\">  this.first = null</span><br><span class=\"line\">  this.second = null</span><br><span class=\"line\">  // console.log(dR)</span><br><span class=\"line\">  this.<span class=\"variable\">$router</span>.addRoutes(dR);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"动态路由控制权限-参考文章\"><a href=\"#动态路由控制权限-参考文章\" class=\"headerlink\" title=\"动态路由控制权限 参考文章\"></a>动态路由控制权限 <a href=\"https://blog.csdn.net/qq_34160246/article/details/80322036\" target=\"_blank\" rel=\"noopener\">参考文章</a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">login.vue</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">let</span> dR = new Array();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"built_in\">let</span> i = 0; i &lt; dynamicRouter.length; i++) &#123; //第一层循环遍历动态路由表的每一个路由</span><br><span class=\"line\">  <span class=\"built_in\">let</span> aside_list = this.aside_list</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"built_in\">let</span> j = 0; j &lt; aside_list.length; j++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dynamicRouter[i].path === aside_list[j].path &amp;&amp; aside_list[j].isShow) &#123;</span><br><span class=\"line\">      // console.log(dynamicRouter[i])</span><br><span class=\"line\">      dR.push(dynamicRouter[i]); // 符合条件的路由信息就放进数组里</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!this.xjw) &#123;</span><br><span class=\"line\">        // this.firstShowPath = dynamicRouter[i]</span><br><span class=\"line\">        dR.push(dynamicRouter[2]);</span><br><span class=\"line\">        this.xjw = <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (aside_list[j].path.indexOf(<span class=\"string\">'x'</span>) &amp;&amp; aside_list[j].isShow) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!this.first) &#123; // 符合条件的路由的福袋必须访问的路由就放进数组里</span><br><span class=\"line\">        dR.push(dynamicRouter[0]);</span><br><span class=\"line\">        dR.push(dynamicRouter[1]);</span><br><span class=\"line\">        this.first = <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      (aside_list[j].path.indexOf(<span class=\"string\">'xx'</span>)</span><br><span class=\"line\">        || aside_list[j].path.indexOf(<span class=\"string\">'xxx'</span>) || aside_list[j].path.indexOf(<span class=\"string\">'xxxx'</span>))</span><br><span class=\"line\">      &amp;&amp; aside_list[j].isShow) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!this.second) &#123;</span><br><span class=\"line\">        dR.push(dynamicRouter[1]);</span><br><span class=\"line\">        this.second = <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">this.xjw = null</span><br><span class=\"line\">this.first = null</span><br><span class=\"line\">this.second = null</span><br><span class=\"line\">// console.log(dR)</span><br><span class=\"line\">this.<span class=\"variable\">$router</span>.addRoutes(dR.concat([&#123; //这里调用addRoutes方法，动态添加符合条件的路由</span><br><span class=\"line\">  path: <span class=\"string\">'*'</span>,</span><br><span class=\"line\">  redirect: <span class=\"string\">'/404'</span> //所有不匹配路径(*)都重定向到404，为什么写在这里而不放到静态路由表里可以查看“前端路上”的文章</span><br><span class=\"line\">&#125;]));</span><br><span class=\"line\"></span><br><span class=\"line\">this.<span class=\"variable\">$router</span>.push(this.firstShowPath);</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">APP.vue</span><br><span class=\"line\"></span><br><span class=\"line\">// 获取登录状态</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!isLogin) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> this.<span class=\"variable\">$router</span>.push(<span class=\"string\">'/login'</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">let</span> dR = new Array();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"built_in\">let</span> i = 0; i &lt; dynamicRouter.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> aside_list = this.get_aside_list.aside_list</span><br><span class=\"line\">    // console.log(dynamicRouter[i])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">let</span> j = 0; j &lt; aside_list.length; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (dynamicRouter[i].path === aside_list[j].path &amp;&amp; aside_list[j].isShow) &#123;</span><br><span class=\"line\">        // console.log(dynamicRouter[i])</span><br><span class=\"line\">        dR.push(dynamicRouter[i]); //符合条件的路由信息就放进数组里</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!this.xjw) &#123;</span><br><span class=\"line\">          dR.push(dynamicRouter[2]);</span><br><span class=\"line\">          this.xjw = <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (aside_list[j].path.indexOf(<span class=\"string\">'x'</span>) &amp;&amp; aside_list[j].isShow) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!this.first) &#123;</span><br><span class=\"line\">          dR.push(dynamicRouter[0]);</span><br><span class=\"line\">          dR.push(dynamicRouter[1]);</span><br><span class=\"line\">          this.first = <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        (aside_list[j].path.indexOf(<span class=\"string\">'xx'</span>)</span><br><span class=\"line\">          || aside_list[j].path.indexOf(<span class=\"string\">'xxx'</span>) || aside_list[j].path.indexOf(<span class=\"string\">'xxxx'</span>))</span><br><span class=\"line\">        &amp;&amp; aside_list[j].isShow) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!this.second) &#123;</span><br><span class=\"line\">          dR.push(dynamicRouter[1]);</span><br><span class=\"line\">          this.second = <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  this.xjw = null</span><br><span class=\"line\">  this.first = null</span><br><span class=\"line\">  this.second = null</span><br><span class=\"line\">  // console.log(dR)</span><br><span class=\"line\">  this.<span class=\"variable\">$router</span>.addRoutes(dR);</span><br></pre></td></tr></table></figure>"},{"title":"vue的url去掉难看的井号并解决相关问题","date":"2018-09-19T08:26:10.000Z","comments":1,"_content":"## 一、首先在路由文件配置history模式\n\n```bash\n// 增加 mode: 'history'\nexport default new Router({\n  mode: 'history',\n  routes: [\n    {\n      path: '/',\n      redirect: '/login'\n    }\n  ]\n})\n```\n## 二、使用history后一切都正常,唯有刷新浏览器的时候就不会加载了\n\n因为刷新后 服务器上没有对应的静态页对应\n\n解决 将服务器上路径设置对应的定向\n\n### 后端配置例子\n\n#### Apache\n```bash\n<IfModule mod_rewrite.c>\n  RewriteEngine On\n  RewriteBase /\n  RewriteRule ^index\\.html$ - [L]\n  RewriteCond %{REQUEST_FILENAME} !-f\n  RewriteCond %{REQUEST_FILENAME} !-d\n  RewriteRule . /index.html [L]\n</IfModule>\n```\n除了 mod_rewrite，你也可以使用 [FallbackResource](https://httpd.apache.org/docs/2.2/mod/mod_dir.html#fallbackresource)\n\n#### nginx\n```bash\nlocation / {\n  try_files $uri $uri/ /index.html;\n}\n```\n\n#### 原生 Node.js\n```bash\nconst http = require('http')\nconst fs = require('fs')\nconst httpPort = 80\n\nhttp.createServer((req, res) => {\n  fs.readFile('index.htm', 'utf-8', (err, content) => {\n    if (err) {\n      console.log('We cannot open \"index.htm\" file.')\n    }\n\n    res.writeHead(200, {\n      'Content-Type': 'text/html; charset=utf-8'\n    })\n\n    res.end(content)\n  })\n}).listen(httpPort, () => {\n  console.log('Server listening on: http://localhost:%s', httpPort)\n})\n```\n#### 基于 Node.js 的 Express\n对于 Node.js/Express，请考虑使用[connect-history-api-fallback 中间件](https://github.com/bripkens/connect-history-api-fallback)\n\n```bash\nconst express = require('express');\nconst history = require('connect-history-api-fallback');\nconst app = express();\napp.use(history(\n    {\n        htmlAcceptHeaders: ['text/html', 'application/xhtml+xml']\n    }\n));\napp.use(express.static('dist'));\nconst server = app.listen(3002, function () {\n  const port = server.address().port;\n  console.log(`listening at http://localhost:${port}`);\n});\n```\n\n#### Internet Information Services (IIS)\n1.安装 [IIS UrlRewrite](https://www.iis.net/downloads/microsoft/url-rewrite)\n2.在你的网站根目录中创建一个`web.config`文件，内容如下：\n```bash\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n  <system.webServer>\n    <rewrite>\n      <rules>\n        <rule name=\"Handle History Mode and custom 404/500\" stopProcessing=\"true\">\n          <match url=\"(.*)\" />\n          <conditions logicalGrouping=\"MatchAll\">\n            <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" negate=\"true\" />\n            <add input=\"{REQUEST_FILENAME}\" matchType=\"IsDirectory\" negate=\"true\" />\n          </conditions>\n          <action type=\"Rewrite\" url=\"/\" />\n        </rule>\n      </rules>\n    </rewrite>\n  </system.webServer>\n</configuration>\n```\n\n#### Caddy\n```bash\nrewrite {\n    regexp .*\n    to {path} /\n}\n```\n\n#### Firebase 主机\n在你的`firebase.json`中加入：\n```bash\n{\n  \"hosting\": {\n    \"public\": \"dist\",\n    \"rewrites\": [\n      {\n        \"source\": \"**\",\n        \"destination\": \"/index.html\"\n      }\n    ]\n  }\n}\n```\n## 警告\n因为这么做以后，你的服务器就不再返回 404 错误页面，因为对于所有路径都会返回 `index.html` 文件。为了避免这种情况，你应该在 Vue 应用里面覆盖所有的路由情况，然后在给出一个 404 页面。\n```bash\nconst router = new VueRouter({\n  mode: 'history',\n  routes: [\n    { path: '*', component: NotFoundComponent }\n  ]\n})\n```\n或者，如果你使用 Node.js 服务器，你可以用服务端路由匹配到来的 URL，并在没有匹配到路由的时候返回 404，以实现回退。更多详情请查阅 [Vue 服务端渲染文档](https://ssr.vuejs.org/zh/)。\n\n","source":"_posts/去掉vue的url中难看的井号并解决相关问题.md","raw":"---\ntitle: vue的url去掉难看的井号并解决相关问题\ndate: 2018-09-19 16:26:10\ncategories: ['前端'] \ntags: 前端\ncomments: true\n---\n## 一、首先在路由文件配置history模式\n\n```bash\n// 增加 mode: 'history'\nexport default new Router({\n  mode: 'history',\n  routes: [\n    {\n      path: '/',\n      redirect: '/login'\n    }\n  ]\n})\n```\n## 二、使用history后一切都正常,唯有刷新浏览器的时候就不会加载了\n\n因为刷新后 服务器上没有对应的静态页对应\n\n解决 将服务器上路径设置对应的定向\n\n### 后端配置例子\n\n#### Apache\n```bash\n<IfModule mod_rewrite.c>\n  RewriteEngine On\n  RewriteBase /\n  RewriteRule ^index\\.html$ - [L]\n  RewriteCond %{REQUEST_FILENAME} !-f\n  RewriteCond %{REQUEST_FILENAME} !-d\n  RewriteRule . /index.html [L]\n</IfModule>\n```\n除了 mod_rewrite，你也可以使用 [FallbackResource](https://httpd.apache.org/docs/2.2/mod/mod_dir.html#fallbackresource)\n\n#### nginx\n```bash\nlocation / {\n  try_files $uri $uri/ /index.html;\n}\n```\n\n#### 原生 Node.js\n```bash\nconst http = require('http')\nconst fs = require('fs')\nconst httpPort = 80\n\nhttp.createServer((req, res) => {\n  fs.readFile('index.htm', 'utf-8', (err, content) => {\n    if (err) {\n      console.log('We cannot open \"index.htm\" file.')\n    }\n\n    res.writeHead(200, {\n      'Content-Type': 'text/html; charset=utf-8'\n    })\n\n    res.end(content)\n  })\n}).listen(httpPort, () => {\n  console.log('Server listening on: http://localhost:%s', httpPort)\n})\n```\n#### 基于 Node.js 的 Express\n对于 Node.js/Express，请考虑使用[connect-history-api-fallback 中间件](https://github.com/bripkens/connect-history-api-fallback)\n\n```bash\nconst express = require('express');\nconst history = require('connect-history-api-fallback');\nconst app = express();\napp.use(history(\n    {\n        htmlAcceptHeaders: ['text/html', 'application/xhtml+xml']\n    }\n));\napp.use(express.static('dist'));\nconst server = app.listen(3002, function () {\n  const port = server.address().port;\n  console.log(`listening at http://localhost:${port}`);\n});\n```\n\n#### Internet Information Services (IIS)\n1.安装 [IIS UrlRewrite](https://www.iis.net/downloads/microsoft/url-rewrite)\n2.在你的网站根目录中创建一个`web.config`文件，内容如下：\n```bash\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n  <system.webServer>\n    <rewrite>\n      <rules>\n        <rule name=\"Handle History Mode and custom 404/500\" stopProcessing=\"true\">\n          <match url=\"(.*)\" />\n          <conditions logicalGrouping=\"MatchAll\">\n            <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" negate=\"true\" />\n            <add input=\"{REQUEST_FILENAME}\" matchType=\"IsDirectory\" negate=\"true\" />\n          </conditions>\n          <action type=\"Rewrite\" url=\"/\" />\n        </rule>\n      </rules>\n    </rewrite>\n  </system.webServer>\n</configuration>\n```\n\n#### Caddy\n```bash\nrewrite {\n    regexp .*\n    to {path} /\n}\n```\n\n#### Firebase 主机\n在你的`firebase.json`中加入：\n```bash\n{\n  \"hosting\": {\n    \"public\": \"dist\",\n    \"rewrites\": [\n      {\n        \"source\": \"**\",\n        \"destination\": \"/index.html\"\n      }\n    ]\n  }\n}\n```\n## 警告\n因为这么做以后，你的服务器就不再返回 404 错误页面，因为对于所有路径都会返回 `index.html` 文件。为了避免这种情况，你应该在 Vue 应用里面覆盖所有的路由情况，然后在给出一个 404 页面。\n```bash\nconst router = new VueRouter({\n  mode: 'history',\n  routes: [\n    { path: '*', component: NotFoundComponent }\n  ]\n})\n```\n或者，如果你使用 Node.js 服务器，你可以用服务端路由匹配到来的 URL，并在没有匹配到路由的时候返回 404，以实现回退。更多详情请查阅 [Vue 服务端渲染文档](https://ssr.vuejs.org/zh/)。\n\n","slug":"去掉vue的url中难看的井号并解决相关问题","published":1,"updated":"2018-09-19T09:02:22.756Z","layout":"post","photos":[],"link":"","_id":"cjqojjno20010uwkq11nnjxaj","content":"<h2 id=\"一、首先在路由文件配置history模式\"><a href=\"#一、首先在路由文件配置history模式\" class=\"headerlink\" title=\"一、首先在路由文件配置history模式\"></a>一、首先在路由文件配置history模式</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 增加 mode: <span class=\"string\">'history'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> default new Router(&#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'history'</span>,</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">      redirect: <span class=\"string\">'/login'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、使用history后一切都正常-唯有刷新浏览器的时候就不会加载了\"><a href=\"#二、使用history后一切都正常-唯有刷新浏览器的时候就不会加载了\" class=\"headerlink\" title=\"二、使用history后一切都正常,唯有刷新浏览器的时候就不会加载了\"></a>二、使用history后一切都正常,唯有刷新浏览器的时候就不会加载了</h2><p>因为刷新后 服务器上没有对应的静态页对应</p>\n<p>解决 将服务器上路径设置对应的定向</p>\n<h3 id=\"后端配置例子\"><a href=\"#后端配置例子\" class=\"headerlink\" title=\"后端配置例子\"></a>后端配置例子</h3><h4 id=\"Apache\"><a href=\"#Apache\" class=\"headerlink\" title=\"Apache\"></a>Apache</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;IfModule mod_rewrite.c&gt;</span><br><span class=\"line\">  RewriteEngine On</span><br><span class=\"line\">  RewriteBase /</span><br><span class=\"line\">  RewriteRule ^index\\.html$ - [L]</span><br><span class=\"line\">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class=\"line\">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class=\"line\">  RewriteRule . /index.html [L]</span><br><span class=\"line\">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>\n<p>除了 mod_rewrite，你也可以使用 <a href=\"https://httpd.apache.org/docs/2.2/mod/mod_dir.html#fallbackresource\" target=\"_blank\" rel=\"noopener\">FallbackResource</a></p>\n<h4 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">  try_files <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ /index.html;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"原生-Node-js\"><a href=\"#原生-Node-js\" class=\"headerlink\" title=\"原生 Node.js\"></a>原生 Node.js</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const http = require(<span class=\"string\">'http'</span>)</span><br><span class=\"line\">const fs = require(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\">const httpPort = 80</span><br><span class=\"line\"></span><br><span class=\"line\">http.createServer((req, res) =&gt; &#123;</span><br><span class=\"line\">  fs.readFile(<span class=\"string\">'index.htm'</span>, <span class=\"string\">'utf-8'</span>, (err, content) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      console.log(<span class=\"string\">'We cannot open \"index.htm\" file.'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    res.writeHead(200, &#123;</span><br><span class=\"line\">      <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/html; charset=utf-8'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    res.end(content)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;).listen(httpPort, () =&gt; &#123;</span><br><span class=\"line\">  console.log(<span class=\"string\">'Server listening on: http://localhost:%s'</span>, httpPort)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"基于-Node-js-的-Express\"><a href=\"#基于-Node-js-的-Express\" class=\"headerlink\" title=\"基于 Node.js 的 Express\"></a>基于 Node.js 的 Express</h4><p>对于 Node.js/Express，请考虑使用<a href=\"https://github.com/bripkens/connect-history-api-fallback\" target=\"_blank\" rel=\"noopener\">connect-history-api-fallback 中间件</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const express = require(<span class=\"string\">'express'</span>);</span><br><span class=\"line\">const <span class=\"built_in\">history</span> = require(<span class=\"string\">'connect-history-api-fallback'</span>);</span><br><span class=\"line\">const app = express();</span><br><span class=\"line\">app.use(<span class=\"built_in\">history</span>(</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        htmlAcceptHeaders: [<span class=\"string\">'text/html'</span>, <span class=\"string\">'application/xhtml+xml'</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">));</span><br><span class=\"line\">app.use(express.static(<span class=\"string\">'dist'</span>));</span><br><span class=\"line\">const server = app.listen(3002, <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">  const port = server.address().port;</span><br><span class=\"line\">  console.log(`listening at http://localhost:<span class=\"variable\">$&#123;port&#125;</span>`);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Internet-Information-Services-IIS\"><a href=\"#Internet-Information-Services-IIS\" class=\"headerlink\" title=\"Internet Information Services (IIS)\"></a>Internet Information Services (IIS)</h4><p>1.安装 <a href=\"https://www.iis.net/downloads/microsoft/url-rewrite\" target=\"_blank\" rel=\"noopener\">IIS UrlRewrite</a><br>2.在你的网站根目录中创建一个<code>web.config</code>文件，内容如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">  &lt;system.webServer&gt;</span><br><span class=\"line\">    &lt;rewrite&gt;</span><br><span class=\"line\">      &lt;rules&gt;</span><br><span class=\"line\">        &lt;rule name=<span class=\"string\">\"Handle History Mode and custom 404/500\"</span> stopProcessing=<span class=\"string\">\"true\"</span>&gt;</span><br><span class=\"line\">          &lt;match url=<span class=\"string\">\"(.*)\"</span> /&gt;</span><br><span class=\"line\">          &lt;conditions logicalGrouping=<span class=\"string\">\"MatchAll\"</span>&gt;</span><br><span class=\"line\">            &lt;add input=<span class=\"string\">\"&#123;REQUEST_FILENAME&#125;\"</span> matchType=<span class=\"string\">\"IsFile\"</span> negate=<span class=\"string\">\"true\"</span> /&gt;</span><br><span class=\"line\">            &lt;add input=<span class=\"string\">\"&#123;REQUEST_FILENAME&#125;\"</span> matchType=<span class=\"string\">\"IsDirectory\"</span> negate=<span class=\"string\">\"true\"</span> /&gt;</span><br><span class=\"line\">          &lt;/conditions&gt;</span><br><span class=\"line\">          &lt;action <span class=\"built_in\">type</span>=<span class=\"string\">\"Rewrite\"</span> url=<span class=\"string\">\"/\"</span> /&gt;</span><br><span class=\"line\">        &lt;/rule&gt;</span><br><span class=\"line\">      &lt;/rules&gt;</span><br><span class=\"line\">    &lt;/rewrite&gt;</span><br><span class=\"line\">  &lt;/system.webServer&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Caddy\"><a href=\"#Caddy\" class=\"headerlink\" title=\"Caddy\"></a>Caddy</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rewrite &#123;</span><br><span class=\"line\">    regexp .*</span><br><span class=\"line\">    to &#123;path&#125; /</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Firebase-主机\"><a href=\"#Firebase-主机\" class=\"headerlink\" title=\"Firebase 主机\"></a>Firebase 主机</h4><p>在你的<code>firebase.json</code>中加入：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"hosting\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"public\"</span>: <span class=\"string\">\"dist\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"rewrites\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">\"source\"</span>: <span class=\"string\">\"**\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"destination\"</span>: <span class=\"string\">\"/index.html\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"警告\"><a href=\"#警告\" class=\"headerlink\" title=\"警告\"></a>警告</h2><p>因为这么做以后，你的服务器就不再返回 404 错误页面，因为对于所有路径都会返回 <code>index.html</code> 文件。为了避免这种情况，你应该在 Vue 应用里面覆盖所有的路由情况，然后在给出一个 404 页面。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const router = new VueRouter(&#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'history'</span>,</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123; path: <span class=\"string\">'*'</span>, component: NotFoundComponent &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>或者，如果你使用 Node.js 服务器，你可以用服务端路由匹配到来的 URL，并在没有匹配到路由的时候返回 404，以实现回退。更多详情请查阅 <a href=\"https://ssr.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener\">Vue 服务端渲染文档</a>。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、首先在路由文件配置history模式\"><a href=\"#一、首先在路由文件配置history模式\" class=\"headerlink\" title=\"一、首先在路由文件配置history模式\"></a>一、首先在路由文件配置history模式</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 增加 mode: <span class=\"string\">'history'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> default new Router(&#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'history'</span>,</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">      redirect: <span class=\"string\">'/login'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、使用history后一切都正常-唯有刷新浏览器的时候就不会加载了\"><a href=\"#二、使用history后一切都正常-唯有刷新浏览器的时候就不会加载了\" class=\"headerlink\" title=\"二、使用history后一切都正常,唯有刷新浏览器的时候就不会加载了\"></a>二、使用history后一切都正常,唯有刷新浏览器的时候就不会加载了</h2><p>因为刷新后 服务器上没有对应的静态页对应</p>\n<p>解决 将服务器上路径设置对应的定向</p>\n<h3 id=\"后端配置例子\"><a href=\"#后端配置例子\" class=\"headerlink\" title=\"后端配置例子\"></a>后端配置例子</h3><h4 id=\"Apache\"><a href=\"#Apache\" class=\"headerlink\" title=\"Apache\"></a>Apache</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;IfModule mod_rewrite.c&gt;</span><br><span class=\"line\">  RewriteEngine On</span><br><span class=\"line\">  RewriteBase /</span><br><span class=\"line\">  RewriteRule ^index\\.html$ - [L]</span><br><span class=\"line\">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class=\"line\">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class=\"line\">  RewriteRule . /index.html [L]</span><br><span class=\"line\">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>\n<p>除了 mod_rewrite，你也可以使用 <a href=\"https://httpd.apache.org/docs/2.2/mod/mod_dir.html#fallbackresource\" target=\"_blank\" rel=\"noopener\">FallbackResource</a></p>\n<h4 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">  try_files <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ /index.html;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"原生-Node-js\"><a href=\"#原生-Node-js\" class=\"headerlink\" title=\"原生 Node.js\"></a>原生 Node.js</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const http = require(<span class=\"string\">'http'</span>)</span><br><span class=\"line\">const fs = require(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\">const httpPort = 80</span><br><span class=\"line\"></span><br><span class=\"line\">http.createServer((req, res) =&gt; &#123;</span><br><span class=\"line\">  fs.readFile(<span class=\"string\">'index.htm'</span>, <span class=\"string\">'utf-8'</span>, (err, content) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      console.log(<span class=\"string\">'We cannot open \"index.htm\" file.'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    res.writeHead(200, &#123;</span><br><span class=\"line\">      <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/html; charset=utf-8'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    res.end(content)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;).listen(httpPort, () =&gt; &#123;</span><br><span class=\"line\">  console.log(<span class=\"string\">'Server listening on: http://localhost:%s'</span>, httpPort)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"基于-Node-js-的-Express\"><a href=\"#基于-Node-js-的-Express\" class=\"headerlink\" title=\"基于 Node.js 的 Express\"></a>基于 Node.js 的 Express</h4><p>对于 Node.js/Express，请考虑使用<a href=\"https://github.com/bripkens/connect-history-api-fallback\" target=\"_blank\" rel=\"noopener\">connect-history-api-fallback 中间件</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const express = require(<span class=\"string\">'express'</span>);</span><br><span class=\"line\">const <span class=\"built_in\">history</span> = require(<span class=\"string\">'connect-history-api-fallback'</span>);</span><br><span class=\"line\">const app = express();</span><br><span class=\"line\">app.use(<span class=\"built_in\">history</span>(</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        htmlAcceptHeaders: [<span class=\"string\">'text/html'</span>, <span class=\"string\">'application/xhtml+xml'</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">));</span><br><span class=\"line\">app.use(express.static(<span class=\"string\">'dist'</span>));</span><br><span class=\"line\">const server = app.listen(3002, <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">  const port = server.address().port;</span><br><span class=\"line\">  console.log(`listening at http://localhost:<span class=\"variable\">$&#123;port&#125;</span>`);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Internet-Information-Services-IIS\"><a href=\"#Internet-Information-Services-IIS\" class=\"headerlink\" title=\"Internet Information Services (IIS)\"></a>Internet Information Services (IIS)</h4><p>1.安装 <a href=\"https://www.iis.net/downloads/microsoft/url-rewrite\" target=\"_blank\" rel=\"noopener\">IIS UrlRewrite</a><br>2.在你的网站根目录中创建一个<code>web.config</code>文件，内容如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">  &lt;system.webServer&gt;</span><br><span class=\"line\">    &lt;rewrite&gt;</span><br><span class=\"line\">      &lt;rules&gt;</span><br><span class=\"line\">        &lt;rule name=<span class=\"string\">\"Handle History Mode and custom 404/500\"</span> stopProcessing=<span class=\"string\">\"true\"</span>&gt;</span><br><span class=\"line\">          &lt;match url=<span class=\"string\">\"(.*)\"</span> /&gt;</span><br><span class=\"line\">          &lt;conditions logicalGrouping=<span class=\"string\">\"MatchAll\"</span>&gt;</span><br><span class=\"line\">            &lt;add input=<span class=\"string\">\"&#123;REQUEST_FILENAME&#125;\"</span> matchType=<span class=\"string\">\"IsFile\"</span> negate=<span class=\"string\">\"true\"</span> /&gt;</span><br><span class=\"line\">            &lt;add input=<span class=\"string\">\"&#123;REQUEST_FILENAME&#125;\"</span> matchType=<span class=\"string\">\"IsDirectory\"</span> negate=<span class=\"string\">\"true\"</span> /&gt;</span><br><span class=\"line\">          &lt;/conditions&gt;</span><br><span class=\"line\">          &lt;action <span class=\"built_in\">type</span>=<span class=\"string\">\"Rewrite\"</span> url=<span class=\"string\">\"/\"</span> /&gt;</span><br><span class=\"line\">        &lt;/rule&gt;</span><br><span class=\"line\">      &lt;/rules&gt;</span><br><span class=\"line\">    &lt;/rewrite&gt;</span><br><span class=\"line\">  &lt;/system.webServer&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Caddy\"><a href=\"#Caddy\" class=\"headerlink\" title=\"Caddy\"></a>Caddy</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rewrite &#123;</span><br><span class=\"line\">    regexp .*</span><br><span class=\"line\">    to &#123;path&#125; /</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Firebase-主机\"><a href=\"#Firebase-主机\" class=\"headerlink\" title=\"Firebase 主机\"></a>Firebase 主机</h4><p>在你的<code>firebase.json</code>中加入：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"hosting\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"public\"</span>: <span class=\"string\">\"dist\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"rewrites\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">\"source\"</span>: <span class=\"string\">\"**\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"destination\"</span>: <span class=\"string\">\"/index.html\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"警告\"><a href=\"#警告\" class=\"headerlink\" title=\"警告\"></a>警告</h2><p>因为这么做以后，你的服务器就不再返回 404 错误页面，因为对于所有路径都会返回 <code>index.html</code> 文件。为了避免这种情况，你应该在 Vue 应用里面覆盖所有的路由情况，然后在给出一个 404 页面。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const router = new VueRouter(&#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'history'</span>,</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123; path: <span class=\"string\">'*'</span>, component: NotFoundComponent &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>或者，如果你使用 Node.js 服务器，你可以用服务端路由匹配到来的 URL，并在没有匹配到路由的时候返回 404，以实现回退。更多详情请查阅 <a href=\"https://ssr.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener\">Vue 服务端渲染文档</a>。</p>\n"},{"title":"将数组对象筛选处理合并成一个对象","date":"2018-10-24T02:59:25.000Z","comments":1,"_content":"## 问题\n有时候我们获取的数据是一个数组对象,但是提交数据的时候又要你把数组转为对象其中还要筛选没用的key\n\n### 例:\n```bash\n[\n\t{ name1: '我的', phone1: '122222', ttt1: '迟到了吗' },\n\t{ name2: '我的', phone2: '122222', ttt2: '迟到了吗' },\n\t{ name3: '我的', phone3: '122222', ttt3: '迟到了吗' }\n]\n处理为\n\nconst obj ={ \n\tname1: '我的', phone1: '122222',\n\tname2: '我的', phone2: '122222', \n\tname3: '我的', phone3: '122222' \n}\n  \n```\n\n```bash\n// filter 为筛选 项(即数组中的符合项)\n// map 为 处理每一项中 所需的内容(key)\nconst arr = [\n\t{ name1: '我的', phone1: '122222', ttt1: '迟到了吗' },\n\t{ name2: '我的', phone2: '122222', ttt2: '迟到了吗' },\n\t{ name3: '我的', phone3: '122222', ttt3: '迟到了吗' }\n]\nlet arr1 = arr.map((item, index) => {\n\tlet obj = {}\n\tobj[`name${index + 1}`] = item[`name${index + 1}`]\n\tobj[`phone${index + 1}`] = item[`phone${index + 1}`]\n\treturn obj\n})\n// console.log(arr1)\nlet obj = Object.assign(...arr1)\nconsole.log(obj)\n```","source":"_posts/将数组对象筛选处理合并成一个对象.md","raw":"---\ntitle: 将数组对象筛选处理合并成一个对象\ndate: 2018-10-24 10:59:25\ncategories: ['前端'] \ntags: 前端\ncomments: true\n---\n## 问题\n有时候我们获取的数据是一个数组对象,但是提交数据的时候又要你把数组转为对象其中还要筛选没用的key\n\n### 例:\n```bash\n[\n\t{ name1: '我的', phone1: '122222', ttt1: '迟到了吗' },\n\t{ name2: '我的', phone2: '122222', ttt2: '迟到了吗' },\n\t{ name3: '我的', phone3: '122222', ttt3: '迟到了吗' }\n]\n处理为\n\nconst obj ={ \n\tname1: '我的', phone1: '122222',\n\tname2: '我的', phone2: '122222', \n\tname3: '我的', phone3: '122222' \n}\n  \n```\n\n```bash\n// filter 为筛选 项(即数组中的符合项)\n// map 为 处理每一项中 所需的内容(key)\nconst arr = [\n\t{ name1: '我的', phone1: '122222', ttt1: '迟到了吗' },\n\t{ name2: '我的', phone2: '122222', ttt2: '迟到了吗' },\n\t{ name3: '我的', phone3: '122222', ttt3: '迟到了吗' }\n]\nlet arr1 = arr.map((item, index) => {\n\tlet obj = {}\n\tobj[`name${index + 1}`] = item[`name${index + 1}`]\n\tobj[`phone${index + 1}`] = item[`phone${index + 1}`]\n\treturn obj\n})\n// console.log(arr1)\nlet obj = Object.assign(...arr1)\nconsole.log(obj)\n```","slug":"将数组对象筛选处理合并成一个对象","published":1,"updated":"2018-10-24T07:57:21.883Z","layout":"post","photos":[],"link":"","_id":"cjqojjno50013uwkq52arkhju","content":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>有时候我们获取的数据是一个数组对象,但是提交数据的时候又要你把数组转为对象其中还要筛选没用的key</p>\n<h3 id=\"例\"><a href=\"#例\" class=\"headerlink\" title=\"例:\"></a>例:</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">\t&#123; name1: <span class=\"string\">'我的'</span>, phone1: <span class=\"string\">'122222'</span>, ttt1: <span class=\"string\">'迟到了吗'</span> &#125;,</span><br><span class=\"line\">\t&#123; name2: <span class=\"string\">'我的'</span>, phone2: <span class=\"string\">'122222'</span>, ttt2: <span class=\"string\">'迟到了吗'</span> &#125;,</span><br><span class=\"line\">\t&#123; name3: <span class=\"string\">'我的'</span>, phone3: <span class=\"string\">'122222'</span>, ttt3: <span class=\"string\">'迟到了吗'</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">处理为</span><br><span class=\"line\"></span><br><span class=\"line\">const obj =&#123; </span><br><span class=\"line\">\tname1: <span class=\"string\">'我的'</span>, phone1: <span class=\"string\">'122222'</span>,</span><br><span class=\"line\">\tname2: <span class=\"string\">'我的'</span>, phone2: <span class=\"string\">'122222'</span>, </span><br><span class=\"line\">\tname3: <span class=\"string\">'我的'</span>, phone3: <span class=\"string\">'122222'</span> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// filter 为筛选 项(即数组中的符合项)</span><br><span class=\"line\">// map 为 处理每一项中 所需的内容(key)</span><br><span class=\"line\">const arr = [</span><br><span class=\"line\">\t&#123; name1: <span class=\"string\">'我的'</span>, phone1: <span class=\"string\">'122222'</span>, ttt1: <span class=\"string\">'迟到了吗'</span> &#125;,</span><br><span class=\"line\">\t&#123; name2: <span class=\"string\">'我的'</span>, phone2: <span class=\"string\">'122222'</span>, ttt2: <span class=\"string\">'迟到了吗'</span> &#125;,</span><br><span class=\"line\">\t&#123; name3: <span class=\"string\">'我的'</span>, phone3: <span class=\"string\">'122222'</span>, ttt3: <span class=\"string\">'迟到了吗'</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"built_in\">let</span> arr1 = arr.map((item, index) =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">let</span> obj = &#123;&#125;</span><br><span class=\"line\">\tobj[`name<span class=\"variable\">$&#123;index + 1&#125;</span>`] = item[`name<span class=\"variable\">$&#123;index + 1&#125;</span>`]</span><br><span class=\"line\">\tobj[`phone<span class=\"variable\">$&#123;index + 1&#125;</span>`] = item[`phone<span class=\"variable\">$&#123;index + 1&#125;</span>`]</span><br><span class=\"line\">\t<span class=\"built_in\">return</span> obj</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// console.log(arr1)</span><br><span class=\"line\"><span class=\"built_in\">let</span> obj = Object.assign(...arr1)</span><br><span class=\"line\">console.log(obj)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>有时候我们获取的数据是一个数组对象,但是提交数据的时候又要你把数组转为对象其中还要筛选没用的key</p>\n<h3 id=\"例\"><a href=\"#例\" class=\"headerlink\" title=\"例:\"></a>例:</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">\t&#123; name1: <span class=\"string\">'我的'</span>, phone1: <span class=\"string\">'122222'</span>, ttt1: <span class=\"string\">'迟到了吗'</span> &#125;,</span><br><span class=\"line\">\t&#123; name2: <span class=\"string\">'我的'</span>, phone2: <span class=\"string\">'122222'</span>, ttt2: <span class=\"string\">'迟到了吗'</span> &#125;,</span><br><span class=\"line\">\t&#123; name3: <span class=\"string\">'我的'</span>, phone3: <span class=\"string\">'122222'</span>, ttt3: <span class=\"string\">'迟到了吗'</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">处理为</span><br><span class=\"line\"></span><br><span class=\"line\">const obj =&#123; </span><br><span class=\"line\">\tname1: <span class=\"string\">'我的'</span>, phone1: <span class=\"string\">'122222'</span>,</span><br><span class=\"line\">\tname2: <span class=\"string\">'我的'</span>, phone2: <span class=\"string\">'122222'</span>, </span><br><span class=\"line\">\tname3: <span class=\"string\">'我的'</span>, phone3: <span class=\"string\">'122222'</span> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// filter 为筛选 项(即数组中的符合项)</span><br><span class=\"line\">// map 为 处理每一项中 所需的内容(key)</span><br><span class=\"line\">const arr = [</span><br><span class=\"line\">\t&#123; name1: <span class=\"string\">'我的'</span>, phone1: <span class=\"string\">'122222'</span>, ttt1: <span class=\"string\">'迟到了吗'</span> &#125;,</span><br><span class=\"line\">\t&#123; name2: <span class=\"string\">'我的'</span>, phone2: <span class=\"string\">'122222'</span>, ttt2: <span class=\"string\">'迟到了吗'</span> &#125;,</span><br><span class=\"line\">\t&#123; name3: <span class=\"string\">'我的'</span>, phone3: <span class=\"string\">'122222'</span>, ttt3: <span class=\"string\">'迟到了吗'</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"built_in\">let</span> arr1 = arr.map((item, index) =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">let</span> obj = &#123;&#125;</span><br><span class=\"line\">\tobj[`name<span class=\"variable\">$&#123;index + 1&#125;</span>`] = item[`name<span class=\"variable\">$&#123;index + 1&#125;</span>`]</span><br><span class=\"line\">\tobj[`phone<span class=\"variable\">$&#123;index + 1&#125;</span>`] = item[`phone<span class=\"variable\">$&#123;index + 1&#125;</span>`]</span><br><span class=\"line\">\t<span class=\"built_in\">return</span> obj</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// console.log(arr1)</span><br><span class=\"line\"><span class=\"built_in\">let</span> obj = Object.assign(...arr1)</span><br><span class=\"line\">console.log(obj)</span><br></pre></td></tr></table></figure>"},{"title":"数组与字符串的那些相似方法","date":"2018-09-04T08:22:16.000Z","_content":"\n## 一、字符串方法\n\n### 1、slice() 提取字符串的片断，并在新的字符串中返回被提取的部分。\n```bash\nstringObject.slice(start,end) \n// start\t起始下标  负数时,从尾部开始算起位置: -1 最后,-2 倒数二\n// end \t\t结束下标  省略时,表示到最后,负数时,同上\n\n// e.g.\nvar str=\"Hello happy world!\"\nconsole.log(str.slice(6))\n// happy world!\n\n```\n\n### 2、substr() 从起始索引号提取字符串中指定数目的字符。(不建议使用 ECMAscript没有对该方法进行标准化)\n\n```bash\nstringObject.substr(start,length)\n// start  必须 起始下标,num 负数时,从尾部开始算起位置: -1 最后,-2 倒数二\n// length 可选 长度,num     省略时,表示到最后\n\n// e.g.\nvar str=\"Hello world!\"\nconsole.log(str.substr(3))\n// lo world!\n\n```\n\n### 3、substring() 提取字符串中两个指定的索引号之间的字符。\n\n```bash\nstringObject.substring(start,stop)\n// start 必须 非负整 起始下标,num\n// stop  可选 非负整 比要提取位置+1 省略时,表示到最后\n\n// e.g.\nvar str=\"Hello world!\"\nconsole.log(str.substring(3))\nconsole.log(str.substring(3,7))\n\n// lo world!\n// lo w\n```\n### 4、concat() 连接字符串。\n\n```bash\nstringObject.concat(stringX,stringX,...,stringX)\n\n// e.g.\nvar str1=\"Hello \"\nvar str2=\"world!\"\nconsole.log(str1.concat(str2))\n// Hello world!\n```\n\n### 5、split() 把字符串分割为字符串数组。\n```bash\nstringObject.split(separator,howmany)\n// separator 必需 字符串或正则 切割符号\n// howmany   可选 最大返回长度 省略忽视最大返回长度\n```\n注：如果把空字符串 (\"\") 用作 separator，那么 stringObject 中的每个字符之间都会被分割\n注：String.split()与 Array.join 执行的操作是相反的\n\n### 6、others\n```bash\ncharAt()\t\t返回在指定位置的字符。\nindexOf()\t\t检索字符串。返回位置\nlastIndexOf()\t\t从后向前搜索字符串。返回位置\nmatch()\t\t\t找到一个或多个正则表达式的匹配。\nreplace()\t\t替换与正则表达式匹配的子串。\nsearch()\t\t检索与正则表达式相匹配的值。\nsub()\t\t\t把字符串显示为下标。\nsup()\t\t\t把字符串显示为上标。\ntoLocaleLowerCase()\t把字符串转换为小写。\ntoLocaleUpperCase()\t把字符串转换为大写。\ntoLowerCase()\t\t把字符串转换为小写。\ntoUpperCase()\t\t把字符串转换为大写。\ntoString()\t\t返回字符串。\nvalueOf()\t\t返回某个字符串对象的原始值。\n```\n\n## 二、数组方法\n\n### 1、concat() 连接两个或更多的数组，并返回结果。\n```bash\narrayObject.concat(arrayX,arrayX,......,arrayX)\n\n// e.g.\nvar arr1=['hello'];\nvar arr2=['world!'];\nconsole.log(arr1.concat(arr2))\n// ['Hello','world!']\n```\n### 2、slice() 从某个已有的数组返回选定的元素(不修改原数组)\n\n```bash\narrayObject.slice(start,end)\n// start 必需 起始下标  负数时,从尾部开始算起位置: -1 最后,-2 倒数二\n// end   可选 结束下标  省略时,表示到最后,负数时,同上\n\n// e.g.\nvar arr=['thank','you','very','math'];\nconsole.log(arr.slice(2,3))\nconsole.log(arr)\n\n// ['very']\n// ['thank','you','very','math']\n\n```\n\n### 3、splice() 删除元素，并向数组添加新元素(改变原数组)\n\n```bash\narrayObject.splice(index,howmany,item1,.....,itemX)\n// index \t\t必需 起始下标  负数时,从尾部开始算起位置: -1 最后,-2 倒数二\n// howmany   \t\t可选 删除数量  0:不删\n// item1,.....,itemX   \t可选 增加新项\n\n// e.g.\nvar arr=['thank','you','very','math'];\nconsole.log(arr.splice(1,1,'xjw'))\nconsole.log(arr)\n\n// ['you']\n// ['thank','xjw','very','math']\n\n```\n### 4、others\n\n```bash\njoin() \t   把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。\npop()  \t   删除并返回数组的最后一个元素\npush()     向数组的末尾添加一个或更多元素，并返回新的长度。\nshift()    删除并返回数组的第一个元素\nunshift()  向数组的开头添加一个或更多元素，并返回新的长度。\nreverse()  颠倒数组中元素的顺序。\nsort()     对数组的元素进行排序 注:a-b 正数换位置\ntoString() 把数组转换为字符串，并返回结果。\nvalueOf()  返回数组对象的原始值\n```\n## 三、字符串与数据都有的方法\n1.slice()\n2.concat()\n\n","source":"_posts/数组与字符串的那些相似方法.md","raw":"---\ntitle: 数组与字符串的那些相似方法\ndate: 2018-09-04 16:22:16\ncategories: ['前端'] \ntags: 前端\n\n---\n\n## 一、字符串方法\n\n### 1、slice() 提取字符串的片断，并在新的字符串中返回被提取的部分。\n```bash\nstringObject.slice(start,end) \n// start\t起始下标  负数时,从尾部开始算起位置: -1 最后,-2 倒数二\n// end \t\t结束下标  省略时,表示到最后,负数时,同上\n\n// e.g.\nvar str=\"Hello happy world!\"\nconsole.log(str.slice(6))\n// happy world!\n\n```\n\n### 2、substr() 从起始索引号提取字符串中指定数目的字符。(不建议使用 ECMAscript没有对该方法进行标准化)\n\n```bash\nstringObject.substr(start,length)\n// start  必须 起始下标,num 负数时,从尾部开始算起位置: -1 最后,-2 倒数二\n// length 可选 长度,num     省略时,表示到最后\n\n// e.g.\nvar str=\"Hello world!\"\nconsole.log(str.substr(3))\n// lo world!\n\n```\n\n### 3、substring() 提取字符串中两个指定的索引号之间的字符。\n\n```bash\nstringObject.substring(start,stop)\n// start 必须 非负整 起始下标,num\n// stop  可选 非负整 比要提取位置+1 省略时,表示到最后\n\n// e.g.\nvar str=\"Hello world!\"\nconsole.log(str.substring(3))\nconsole.log(str.substring(3,7))\n\n// lo world!\n// lo w\n```\n### 4、concat() 连接字符串。\n\n```bash\nstringObject.concat(stringX,stringX,...,stringX)\n\n// e.g.\nvar str1=\"Hello \"\nvar str2=\"world!\"\nconsole.log(str1.concat(str2))\n// Hello world!\n```\n\n### 5、split() 把字符串分割为字符串数组。\n```bash\nstringObject.split(separator,howmany)\n// separator 必需 字符串或正则 切割符号\n// howmany   可选 最大返回长度 省略忽视最大返回长度\n```\n注：如果把空字符串 (\"\") 用作 separator，那么 stringObject 中的每个字符之间都会被分割\n注：String.split()与 Array.join 执行的操作是相反的\n\n### 6、others\n```bash\ncharAt()\t\t返回在指定位置的字符。\nindexOf()\t\t检索字符串。返回位置\nlastIndexOf()\t\t从后向前搜索字符串。返回位置\nmatch()\t\t\t找到一个或多个正则表达式的匹配。\nreplace()\t\t替换与正则表达式匹配的子串。\nsearch()\t\t检索与正则表达式相匹配的值。\nsub()\t\t\t把字符串显示为下标。\nsup()\t\t\t把字符串显示为上标。\ntoLocaleLowerCase()\t把字符串转换为小写。\ntoLocaleUpperCase()\t把字符串转换为大写。\ntoLowerCase()\t\t把字符串转换为小写。\ntoUpperCase()\t\t把字符串转换为大写。\ntoString()\t\t返回字符串。\nvalueOf()\t\t返回某个字符串对象的原始值。\n```\n\n## 二、数组方法\n\n### 1、concat() 连接两个或更多的数组，并返回结果。\n```bash\narrayObject.concat(arrayX,arrayX,......,arrayX)\n\n// e.g.\nvar arr1=['hello'];\nvar arr2=['world!'];\nconsole.log(arr1.concat(arr2))\n// ['Hello','world!']\n```\n### 2、slice() 从某个已有的数组返回选定的元素(不修改原数组)\n\n```bash\narrayObject.slice(start,end)\n// start 必需 起始下标  负数时,从尾部开始算起位置: -1 最后,-2 倒数二\n// end   可选 结束下标  省略时,表示到最后,负数时,同上\n\n// e.g.\nvar arr=['thank','you','very','math'];\nconsole.log(arr.slice(2,3))\nconsole.log(arr)\n\n// ['very']\n// ['thank','you','very','math']\n\n```\n\n### 3、splice() 删除元素，并向数组添加新元素(改变原数组)\n\n```bash\narrayObject.splice(index,howmany,item1,.....,itemX)\n// index \t\t必需 起始下标  负数时,从尾部开始算起位置: -1 最后,-2 倒数二\n// howmany   \t\t可选 删除数量  0:不删\n// item1,.....,itemX   \t可选 增加新项\n\n// e.g.\nvar arr=['thank','you','very','math'];\nconsole.log(arr.splice(1,1,'xjw'))\nconsole.log(arr)\n\n// ['you']\n// ['thank','xjw','very','math']\n\n```\n### 4、others\n\n```bash\njoin() \t   把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。\npop()  \t   删除并返回数组的最后一个元素\npush()     向数组的末尾添加一个或更多元素，并返回新的长度。\nshift()    删除并返回数组的第一个元素\nunshift()  向数组的开头添加一个或更多元素，并返回新的长度。\nreverse()  颠倒数组中元素的顺序。\nsort()     对数组的元素进行排序 注:a-b 正数换位置\ntoString() 把数组转换为字符串，并返回结果。\nvalueOf()  返回数组对象的原始值\n```\n## 三、字符串与数据都有的方法\n1.slice()\n2.concat()\n\n","slug":"数组与字符串的那些相似方法","published":1,"updated":"2018-09-04T10:14:08.623Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqojjno70016uwkqx0oh2o6k","content":"<h2 id=\"一、字符串方法\"><a href=\"#一、字符串方法\" class=\"headerlink\" title=\"一、字符串方法\"></a>一、字符串方法</h2><h3 id=\"1、slice-提取字符串的片断，并在新的字符串中返回被提取的部分。\"><a href=\"#1、slice-提取字符串的片断，并在新的字符串中返回被提取的部分。\" class=\"headerlink\" title=\"1、slice() 提取字符串的片断，并在新的字符串中返回被提取的部分。\"></a>1、slice() 提取字符串的片断，并在新的字符串中返回被提取的部分。</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stringObject.slice(start,end) </span><br><span class=\"line\">// start\t起始下标  负数时,从尾部开始算起位置: -1 最后,-2 倒数二</span><br><span class=\"line\">// end \t\t结束下标  省略时,表示到最后,负数时,同上</span><br><span class=\"line\"></span><br><span class=\"line\">// e.g.</span><br><span class=\"line\">var str=<span class=\"string\">\"Hello happy world!\"</span></span><br><span class=\"line\">console.log(str.slice(6))</span><br><span class=\"line\">// happy world!</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、substr-从起始索引号提取字符串中指定数目的字符。-不建议使用-ECMAscript没有对该方法进行标准化\"><a href=\"#2、substr-从起始索引号提取字符串中指定数目的字符。-不建议使用-ECMAscript没有对该方法进行标准化\" class=\"headerlink\" title=\"2、substr() 从起始索引号提取字符串中指定数目的字符。(不建议使用 ECMAscript没有对该方法进行标准化)\"></a>2、substr() 从起始索引号提取字符串中指定数目的字符。(不建议使用 ECMAscript没有对该方法进行标准化)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stringObject.substr(start,length)</span><br><span class=\"line\">// start  必须 起始下标,num 负数时,从尾部开始算起位置: -1 最后,-2 倒数二</span><br><span class=\"line\">// length 可选 长度,num     省略时,表示到最后</span><br><span class=\"line\"></span><br><span class=\"line\">// e.g.</span><br><span class=\"line\">var str=<span class=\"string\">\"Hello world!\"</span></span><br><span class=\"line\">console.log(str.substr(3))</span><br><span class=\"line\">// lo world!</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、substring-提取字符串中两个指定的索引号之间的字符。\"><a href=\"#3、substring-提取字符串中两个指定的索引号之间的字符。\" class=\"headerlink\" title=\"3、substring() 提取字符串中两个指定的索引号之间的字符。\"></a>3、substring() 提取字符串中两个指定的索引号之间的字符。</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stringObject.substring(start,stop)</span><br><span class=\"line\">// start 必须 非负整 起始下标,num</span><br><span class=\"line\">// stop  可选 非负整 比要提取位置+1 省略时,表示到最后</span><br><span class=\"line\"></span><br><span class=\"line\">// e.g.</span><br><span class=\"line\">var str=<span class=\"string\">\"Hello world!\"</span></span><br><span class=\"line\">console.log(str.substring(3))</span><br><span class=\"line\">console.log(str.substring(3,7))</span><br><span class=\"line\"></span><br><span class=\"line\">// lo world!</span><br><span class=\"line\">// lo w</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、concat-连接字符串。\"><a href=\"#4、concat-连接字符串。\" class=\"headerlink\" title=\"4、concat() 连接字符串。\"></a>4、concat() 连接字符串。</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stringObject.concat(stringX,stringX,...,stringX)</span><br><span class=\"line\"></span><br><span class=\"line\">// e.g.</span><br><span class=\"line\">var str1=<span class=\"string\">\"Hello \"</span></span><br><span class=\"line\">var str2=<span class=\"string\">\"world!\"</span></span><br><span class=\"line\">console.log(str1.concat(str2))</span><br><span class=\"line\">// Hello world!</span><br></pre></td></tr></table></figure>\n<h3 id=\"5、split-把字符串分割为字符串数组。\"><a href=\"#5、split-把字符串分割为字符串数组。\" class=\"headerlink\" title=\"5、split() 把字符串分割为字符串数组。\"></a>5、split() 把字符串分割为字符串数组。</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stringObject.split(separator,howmany)</span><br><span class=\"line\">// separator 必需 字符串或正则 切割符号</span><br><span class=\"line\">// howmany   可选 最大返回长度 省略忽视最大返回长度</span><br></pre></td></tr></table></figure>\n<p>注：如果把空字符串 (“”) 用作 separator，那么 stringObject 中的每个字符之间都会被分割<br>注：String.split()与 Array.join 执行的操作是相反的</p>\n<h3 id=\"6、others\"><a href=\"#6、others\" class=\"headerlink\" title=\"6、others\"></a>6、others</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">charAt()\t\t返回在指定位置的字符。</span><br><span class=\"line\">indexOf()\t\t检索字符串。返回位置</span><br><span class=\"line\">lastIndexOf()\t\t从后向前搜索字符串。返回位置</span><br><span class=\"line\">match()\t\t\t找到一个或多个正则表达式的匹配。</span><br><span class=\"line\">replace()\t\t替换与正则表达式匹配的子串。</span><br><span class=\"line\">search()\t\t检索与正则表达式相匹配的值。</span><br><span class=\"line\">sub()\t\t\t把字符串显示为下标。</span><br><span class=\"line\">sup()\t\t\t把字符串显示为上标。</span><br><span class=\"line\">toLocaleLowerCase()\t把字符串转换为小写。</span><br><span class=\"line\">toLocaleUpperCase()\t把字符串转换为大写。</span><br><span class=\"line\">toLowerCase()\t\t把字符串转换为小写。</span><br><span class=\"line\">toUpperCase()\t\t把字符串转换为大写。</span><br><span class=\"line\">toString()\t\t返回字符串。</span><br><span class=\"line\">valueOf()\t\t返回某个字符串对象的原始值。</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、数组方法\"><a href=\"#二、数组方法\" class=\"headerlink\" title=\"二、数组方法\"></a>二、数组方法</h2><h3 id=\"1、concat-连接两个或更多的数组，并返回结果。\"><a href=\"#1、concat-连接两个或更多的数组，并返回结果。\" class=\"headerlink\" title=\"1、concat() 连接两个或更多的数组，并返回结果。\"></a>1、concat() 连接两个或更多的数组，并返回结果。</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrayObject.concat(arrayX,arrayX,......,arrayX)</span><br><span class=\"line\"></span><br><span class=\"line\">// e.g.</span><br><span class=\"line\">var arr1=[<span class=\"string\">'hello'</span>];</span><br><span class=\"line\">var arr2=[<span class=\"string\">'world!'</span>];</span><br><span class=\"line\">console.log(arr1.concat(arr2))</span><br><span class=\"line\">// [<span class=\"string\">'Hello'</span>,<span class=\"string\">'world!'</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、slice-从某个已有的数组返回选定的元素-不修改原数组\"><a href=\"#2、slice-从某个已有的数组返回选定的元素-不修改原数组\" class=\"headerlink\" title=\"2、slice() 从某个已有的数组返回选定的元素(不修改原数组)\"></a>2、slice() 从某个已有的数组返回选定的元素(不修改原数组)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrayObject.slice(start,end)</span><br><span class=\"line\">// start 必需 起始下标  负数时,从尾部开始算起位置: -1 最后,-2 倒数二</span><br><span class=\"line\">// end   可选 结束下标  省略时,表示到最后,负数时,同上</span><br><span class=\"line\"></span><br><span class=\"line\">// e.g.</span><br><span class=\"line\">var arr=[<span class=\"string\">'thank'</span>,<span class=\"string\">'you'</span>,<span class=\"string\">'very'</span>,<span class=\"string\">'math'</span>];</span><br><span class=\"line\">console.log(arr.slice(2,3))</span><br><span class=\"line\">console.log(arr)</span><br><span class=\"line\"></span><br><span class=\"line\">// [<span class=\"string\">'very'</span>]</span><br><span class=\"line\">// [<span class=\"string\">'thank'</span>,<span class=\"string\">'you'</span>,<span class=\"string\">'very'</span>,<span class=\"string\">'math'</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、splice-删除元素，并向数组添加新元素-改变原数组\"><a href=\"#3、splice-删除元素，并向数组添加新元素-改变原数组\" class=\"headerlink\" title=\"3、splice() 删除元素，并向数组添加新元素(改变原数组)\"></a>3、splice() 删除元素，并向数组添加新元素(改变原数组)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrayObject.splice(index,howmany,item1,.....,itemX)</span><br><span class=\"line\">// index \t\t必需 起始下标  负数时,从尾部开始算起位置: -1 最后,-2 倒数二</span><br><span class=\"line\">// howmany   \t\t可选 删除数量  0:不删</span><br><span class=\"line\">// item1,.....,itemX   \t可选 增加新项</span><br><span class=\"line\"></span><br><span class=\"line\">// e.g.</span><br><span class=\"line\">var arr=[<span class=\"string\">'thank'</span>,<span class=\"string\">'you'</span>,<span class=\"string\">'very'</span>,<span class=\"string\">'math'</span>];</span><br><span class=\"line\">console.log(arr.splice(1,1,<span class=\"string\">'xjw'</span>))</span><br><span class=\"line\">console.log(arr)</span><br><span class=\"line\"></span><br><span class=\"line\">// [<span class=\"string\">'you'</span>]</span><br><span class=\"line\">// [<span class=\"string\">'thank'</span>,<span class=\"string\">'xjw'</span>,<span class=\"string\">'very'</span>,<span class=\"string\">'math'</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、others\"><a href=\"#4、others\" class=\"headerlink\" title=\"4、others\"></a>4、others</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">join() \t   把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。</span><br><span class=\"line\">pop()  \t   删除并返回数组的最后一个元素</span><br><span class=\"line\">push()     向数组的末尾添加一个或更多元素，并返回新的长度。</span><br><span class=\"line\"><span class=\"built_in\">shift</span>()    删除并返回数组的第一个元素</span><br><span class=\"line\">unshift()  向数组的开头添加一个或更多元素，并返回新的长度。</span><br><span class=\"line\">reverse()  颠倒数组中元素的顺序。</span><br><span class=\"line\">sort()     对数组的元素进行排序 注:a-b 正数换位置</span><br><span class=\"line\">toString() 把数组转换为字符串，并返回结果。</span><br><span class=\"line\">valueOf()  返回数组对象的原始值</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、字符串与数据都有的方法\"><a href=\"#三、字符串与数据都有的方法\" class=\"headerlink\" title=\"三、字符串与数据都有的方法\"></a>三、字符串与数据都有的方法</h2><p>1.slice()<br>2.concat()</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、字符串方法\"><a href=\"#一、字符串方法\" class=\"headerlink\" title=\"一、字符串方法\"></a>一、字符串方法</h2><h3 id=\"1、slice-提取字符串的片断，并在新的字符串中返回被提取的部分。\"><a href=\"#1、slice-提取字符串的片断，并在新的字符串中返回被提取的部分。\" class=\"headerlink\" title=\"1、slice() 提取字符串的片断，并在新的字符串中返回被提取的部分。\"></a>1、slice() 提取字符串的片断，并在新的字符串中返回被提取的部分。</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stringObject.slice(start,end) </span><br><span class=\"line\">// start\t起始下标  负数时,从尾部开始算起位置: -1 最后,-2 倒数二</span><br><span class=\"line\">// end \t\t结束下标  省略时,表示到最后,负数时,同上</span><br><span class=\"line\"></span><br><span class=\"line\">// e.g.</span><br><span class=\"line\">var str=<span class=\"string\">\"Hello happy world!\"</span></span><br><span class=\"line\">console.log(str.slice(6))</span><br><span class=\"line\">// happy world!</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、substr-从起始索引号提取字符串中指定数目的字符。-不建议使用-ECMAscript没有对该方法进行标准化\"><a href=\"#2、substr-从起始索引号提取字符串中指定数目的字符。-不建议使用-ECMAscript没有对该方法进行标准化\" class=\"headerlink\" title=\"2、substr() 从起始索引号提取字符串中指定数目的字符。(不建议使用 ECMAscript没有对该方法进行标准化)\"></a>2、substr() 从起始索引号提取字符串中指定数目的字符。(不建议使用 ECMAscript没有对该方法进行标准化)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stringObject.substr(start,length)</span><br><span class=\"line\">// start  必须 起始下标,num 负数时,从尾部开始算起位置: -1 最后,-2 倒数二</span><br><span class=\"line\">// length 可选 长度,num     省略时,表示到最后</span><br><span class=\"line\"></span><br><span class=\"line\">// e.g.</span><br><span class=\"line\">var str=<span class=\"string\">\"Hello world!\"</span></span><br><span class=\"line\">console.log(str.substr(3))</span><br><span class=\"line\">// lo world!</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、substring-提取字符串中两个指定的索引号之间的字符。\"><a href=\"#3、substring-提取字符串中两个指定的索引号之间的字符。\" class=\"headerlink\" title=\"3、substring() 提取字符串中两个指定的索引号之间的字符。\"></a>3、substring() 提取字符串中两个指定的索引号之间的字符。</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stringObject.substring(start,stop)</span><br><span class=\"line\">// start 必须 非负整 起始下标,num</span><br><span class=\"line\">// stop  可选 非负整 比要提取位置+1 省略时,表示到最后</span><br><span class=\"line\"></span><br><span class=\"line\">// e.g.</span><br><span class=\"line\">var str=<span class=\"string\">\"Hello world!\"</span></span><br><span class=\"line\">console.log(str.substring(3))</span><br><span class=\"line\">console.log(str.substring(3,7))</span><br><span class=\"line\"></span><br><span class=\"line\">// lo world!</span><br><span class=\"line\">// lo w</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、concat-连接字符串。\"><a href=\"#4、concat-连接字符串。\" class=\"headerlink\" title=\"4、concat() 连接字符串。\"></a>4、concat() 连接字符串。</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stringObject.concat(stringX,stringX,...,stringX)</span><br><span class=\"line\"></span><br><span class=\"line\">// e.g.</span><br><span class=\"line\">var str1=<span class=\"string\">\"Hello \"</span></span><br><span class=\"line\">var str2=<span class=\"string\">\"world!\"</span></span><br><span class=\"line\">console.log(str1.concat(str2))</span><br><span class=\"line\">// Hello world!</span><br></pre></td></tr></table></figure>\n<h3 id=\"5、split-把字符串分割为字符串数组。\"><a href=\"#5、split-把字符串分割为字符串数组。\" class=\"headerlink\" title=\"5、split() 把字符串分割为字符串数组。\"></a>5、split() 把字符串分割为字符串数组。</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stringObject.split(separator,howmany)</span><br><span class=\"line\">// separator 必需 字符串或正则 切割符号</span><br><span class=\"line\">// howmany   可选 最大返回长度 省略忽视最大返回长度</span><br></pre></td></tr></table></figure>\n<p>注：如果把空字符串 (“”) 用作 separator，那么 stringObject 中的每个字符之间都会被分割<br>注：String.split()与 Array.join 执行的操作是相反的</p>\n<h3 id=\"6、others\"><a href=\"#6、others\" class=\"headerlink\" title=\"6、others\"></a>6、others</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">charAt()\t\t返回在指定位置的字符。</span><br><span class=\"line\">indexOf()\t\t检索字符串。返回位置</span><br><span class=\"line\">lastIndexOf()\t\t从后向前搜索字符串。返回位置</span><br><span class=\"line\">match()\t\t\t找到一个或多个正则表达式的匹配。</span><br><span class=\"line\">replace()\t\t替换与正则表达式匹配的子串。</span><br><span class=\"line\">search()\t\t检索与正则表达式相匹配的值。</span><br><span class=\"line\">sub()\t\t\t把字符串显示为下标。</span><br><span class=\"line\">sup()\t\t\t把字符串显示为上标。</span><br><span class=\"line\">toLocaleLowerCase()\t把字符串转换为小写。</span><br><span class=\"line\">toLocaleUpperCase()\t把字符串转换为大写。</span><br><span class=\"line\">toLowerCase()\t\t把字符串转换为小写。</span><br><span class=\"line\">toUpperCase()\t\t把字符串转换为大写。</span><br><span class=\"line\">toString()\t\t返回字符串。</span><br><span class=\"line\">valueOf()\t\t返回某个字符串对象的原始值。</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、数组方法\"><a href=\"#二、数组方法\" class=\"headerlink\" title=\"二、数组方法\"></a>二、数组方法</h2><h3 id=\"1、concat-连接两个或更多的数组，并返回结果。\"><a href=\"#1、concat-连接两个或更多的数组，并返回结果。\" class=\"headerlink\" title=\"1、concat() 连接两个或更多的数组，并返回结果。\"></a>1、concat() 连接两个或更多的数组，并返回结果。</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrayObject.concat(arrayX,arrayX,......,arrayX)</span><br><span class=\"line\"></span><br><span class=\"line\">// e.g.</span><br><span class=\"line\">var arr1=[<span class=\"string\">'hello'</span>];</span><br><span class=\"line\">var arr2=[<span class=\"string\">'world!'</span>];</span><br><span class=\"line\">console.log(arr1.concat(arr2))</span><br><span class=\"line\">// [<span class=\"string\">'Hello'</span>,<span class=\"string\">'world!'</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、slice-从某个已有的数组返回选定的元素-不修改原数组\"><a href=\"#2、slice-从某个已有的数组返回选定的元素-不修改原数组\" class=\"headerlink\" title=\"2、slice() 从某个已有的数组返回选定的元素(不修改原数组)\"></a>2、slice() 从某个已有的数组返回选定的元素(不修改原数组)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrayObject.slice(start,end)</span><br><span class=\"line\">// start 必需 起始下标  负数时,从尾部开始算起位置: -1 最后,-2 倒数二</span><br><span class=\"line\">// end   可选 结束下标  省略时,表示到最后,负数时,同上</span><br><span class=\"line\"></span><br><span class=\"line\">// e.g.</span><br><span class=\"line\">var arr=[<span class=\"string\">'thank'</span>,<span class=\"string\">'you'</span>,<span class=\"string\">'very'</span>,<span class=\"string\">'math'</span>];</span><br><span class=\"line\">console.log(arr.slice(2,3))</span><br><span class=\"line\">console.log(arr)</span><br><span class=\"line\"></span><br><span class=\"line\">// [<span class=\"string\">'very'</span>]</span><br><span class=\"line\">// [<span class=\"string\">'thank'</span>,<span class=\"string\">'you'</span>,<span class=\"string\">'very'</span>,<span class=\"string\">'math'</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、splice-删除元素，并向数组添加新元素-改变原数组\"><a href=\"#3、splice-删除元素，并向数组添加新元素-改变原数组\" class=\"headerlink\" title=\"3、splice() 删除元素，并向数组添加新元素(改变原数组)\"></a>3、splice() 删除元素，并向数组添加新元素(改变原数组)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrayObject.splice(index,howmany,item1,.....,itemX)</span><br><span class=\"line\">// index \t\t必需 起始下标  负数时,从尾部开始算起位置: -1 最后,-2 倒数二</span><br><span class=\"line\">// howmany   \t\t可选 删除数量  0:不删</span><br><span class=\"line\">// item1,.....,itemX   \t可选 增加新项</span><br><span class=\"line\"></span><br><span class=\"line\">// e.g.</span><br><span class=\"line\">var arr=[<span class=\"string\">'thank'</span>,<span class=\"string\">'you'</span>,<span class=\"string\">'very'</span>,<span class=\"string\">'math'</span>];</span><br><span class=\"line\">console.log(arr.splice(1,1,<span class=\"string\">'xjw'</span>))</span><br><span class=\"line\">console.log(arr)</span><br><span class=\"line\"></span><br><span class=\"line\">// [<span class=\"string\">'you'</span>]</span><br><span class=\"line\">// [<span class=\"string\">'thank'</span>,<span class=\"string\">'xjw'</span>,<span class=\"string\">'very'</span>,<span class=\"string\">'math'</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、others\"><a href=\"#4、others\" class=\"headerlink\" title=\"4、others\"></a>4、others</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">join() \t   把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。</span><br><span class=\"line\">pop()  \t   删除并返回数组的最后一个元素</span><br><span class=\"line\">push()     向数组的末尾添加一个或更多元素，并返回新的长度。</span><br><span class=\"line\"><span class=\"built_in\">shift</span>()    删除并返回数组的第一个元素</span><br><span class=\"line\">unshift()  向数组的开头添加一个或更多元素，并返回新的长度。</span><br><span class=\"line\">reverse()  颠倒数组中元素的顺序。</span><br><span class=\"line\">sort()     对数组的元素进行排序 注:a-b 正数换位置</span><br><span class=\"line\">toString() 把数组转换为字符串，并返回结果。</span><br><span class=\"line\">valueOf()  返回数组对象的原始值</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、字符串与数据都有的方法\"><a href=\"#三、字符串与数据都有的方法\" class=\"headerlink\" title=\"三、字符串与数据都有的方法\"></a>三、字符串与数据都有的方法</h2><p>1.slice()<br>2.concat()</p>\n"},{"title":"文件管理php","date":"2018-08-30T01:27:59.000Z","comments":1,"_content":"### 有些代码不是自己写的 所以格式不太同\n```\n<?php\nfunction fileAdir($dir) {\n\tif (!is_dir($dir)){\n\t\tmkdir($dir);\n\t\tchmod($dir,0777); \n\t\t$data = scandir(\"$dir\");    \n\t\t$allFile = array();        \n\t\tforeach ($data as $file) {\n\t\t\tif($file != '.' && $file != '..') {    //判断是否是文件夹内的文件夹\n\t\t\t\t$a = array(\n\t\t\t\t\t'file'=>$file,\n\t\t\t\t\t'isDir'=>is_dir($dir. '/' .$file),\n\t\t\t\t\t'name'=>$dir . '/' .$file\n\t\t\t\t);\n\t\t\t\tarray_push($allFile, $a);\n\t\t\t}\n\t\t}\n\t\treturn $allFile;\n\t} else{\n\t\t$data = scandir(\"$dir\"); \n\t\t$allFile = array();      \n\t\tforeach ($data as $file) {\n\t\t\tif($file != '.' && $file != '..') {    //判断是否是文件夹内的文件夹\n\t\t\t\t$a = array(\n\t\t\t\t\t'file'=>$file,\n\t\t\t\t\t'isDir'=>is_dir($dir. '/' .$file),\n\t\t\t\t\t'name'=>$dir . '/' .$file\n\t\t\t\t);\n\t\t\t\tarray_push($allFile, $a);\n\t\t\t}\n\t\t}\n\t\treturn $allFile;\n\t}\n}\n/**  读取文件类  **/\nclass file {\n    public $file;\n    public $filename;  //文件名字\n    public $filetype;  //文件类型\n    public $filesize;  //文件大小\n    public $fileopen;  //打开文件\n    public $fileread;  //读取文件\n\n    //写入变量\n    public $filepath;\n    public $filecontent;   //保存文件用到的文件内容\n    public $fileput;       //文件写入\n\tpublic function edits($files){\n        $this->file = $files;\n        if(!file_exists($this->file)){\n            die(\"文件不存在！\");\n        }\n        $this->fileopen = fopen($this->file, 'r');\n        if(!$this->fileopen){\n            die(\"文件读取失败\");\n        }\n        //$this->fileread = htmlspecialchars($this->fileread);\n        //开始获取文件的后缀名\n        $filestr = strlen($this->file);\n        $filepoint = strrpos($this->file, '.');\n        $filesub = substr($this->file, $filepoint+1);\n        $this->filetype = $filesub;\n        $this->filename = basename($this->file);\n\t\t\n\t\t$this->filesize = filesize($this->file);\n\t\tif($this->filesize===0){\n\t\t\t\treturn array(\n\t\t\t\t'filetype'=>$this->filetype,\n\t\t\t\t'filename'=>$this->filename,\n\t\t\t\t'filecontent'=>'',\n\t\t\t\t'filepath'=>$this->file\n\t\t\t);\n\t\t\texit;\n\t\t}\n        $this->fileread = fread($this->fileopen,$this->filesize);\n\t\t// 读取中文\n\t\t//$this->fileread =iconv('gb2312', 'utf-8', $this->fileread); \n        //以数组形式返回：文件类型 文件名称 文件内容 文件路径\n        return array(\n            'filetype'=>$this->filetype,\n            'filename'=>$this->filename,\n            'filecontent'=>$this->fileread,\n            'filepath'=>$this->file\n        );\n        //关闭文件\n        fclose($this->file);\n    }\n    /* 修改文件函数 */\n    public function bc($filepath,$filecontent){\n        $this->filepath = $filepath;\n        //访问文件\n        $this->fileopen = file_get_contents($this->filepath);\n        if(!$this->fileopen){\n            //die('文件打开失败');\n        }\n        //获取传进来的文件内容\n        $this->filecontent = $filecontent;\n        //反转义html\n        //$this->filecontent = htmlspecialchars_decode($this->filecontent);\n        //写入文件\n        $this->fileput = file_put_contents($this->filepath, $this->filecontent);\n        if($this->fileput){\n            return '修改文件成功';\n        }else {\n            return '修改文件失败';\n        }\n    }\n\t// 创建文件夹\n\tpublic function create_folder($dir) {\n        if (!file_exists($dir)){\n            //mkdir($dir,0777,true);\n            mkdir($dir);\n\t\t\tchmod($dir,0777); \n            return '创建文件夹成功';\n        } else {\n\t\t\treturn '创建文件夹已存在';\n        }\n    }\n\t// 创建文件\n\tpublic function create_file($dir) {\n        if (!file_exists($dir)){\n            $handle = fopen($dir, 'w');\n\t\t\tchmod($dir,0777); \n\t\t\tif($handle){\n\t\t\t\treturn '创建文件成功';\n\t\t\t} else{\n\t\t\t\treturn '创建文件失败';\n\t\t\t}  \n        } else {\n            return '需创建的文件已经存在';\n        }\n    }\n\t// 重命名文件/文件夹\n\tpublic function fileRename($old_name,$new_name) {\n        if(!file_exists($new_name)||file_exists($old_name)){\n\t\t\t$result = rename($old_name,$new_name);\n\t\t\tif($result){\n\t\t\t\treturn\t'重命名成功';\n\t\t\t} else{\n\t\t\t\treturn\t'重命名失败';\n\t\t\t}\n        } else {\n\t\t\treturn '目标文件已存在或原文件不存在';\n        }\n    }\n\t// 复制文件夹及文件夹下文件\n\tpublic function copyDirAndFile($src,$dst) {  // 原目录，复制到的目录\n\t\tif(file_exists($src)){\n\t\t\t$dir = opendir($src);\n\t\t\t@mkdir($dst);\n\t\t\tchmod($dst,0777); \n\t\t\twhile(false !== ($file = readdir($dir))) {\n\t\t\t\tif (( $file != '.' ) && ( $file != '..' )) {\n\t\t\t\t\tif (is_dir($src . '/' . $file)) {\n\t\t\t\t\t\t$this->copyDirAndFile($src . '/' . $file,$dst . '/' . $file);\n\t\t\t\t\t\tchmod($dst . '/' . $file,0777);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcopy($src . '/' . $file,$dst . '/' . $file);\n\t\t\t\t\t\tchmod($dst . '/' . $file,0777); \n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tclosedir($dir);\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\t// 删除文件夹及文件夹下文件\n\tpublic function delDirAndFile($dirName){\n\t\tif(file_exists($dirName)){\n\t\t\tif ($handle = opendir(\"$dirName\" )) {\n\t\t\t   while (false !== ($item=readdir($handle))) {\n\t\t\t\t   if ($item != \".\" && $item != \"..\") {\n\t\t\t\t\t   if (is_dir( \"$dirName/$item\")) {\n\t\t\t\t\t\t\t$this->delDirAndFile( \"$dirName/$item\" );\n\t\t\t\t\t   } else {\n\t\t\t\t\t\t\tif(unlink( \"$dirName/$item\" )){\n\t\t\t\t\t\t\t\t// echo \"成功删除文件： $dirName/$item\\n\";\n\t\t\t\t\t\t\t}\t\n\t\t\t\t\t   }\n\t\t\t\t   }\n\t\t\t   }\n\t\t\t   closedir( $handle );\n\t\t\t   if(rmdir( $dirName )) {\n\t\t\t\t   // echo \"成功删除目录： $dirName\\n\";\n\t\t\t   }\n\t\t\t}\n\t\t\treturn true;\n\t\t} else{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// 剪切文件夹及文件夹下文件\n\tpublic function cutDirAndFile($src,$dst) {  // 原目录，复制到的目录\n\t\tif(file_exists($src)){\n\t\t\t$dir = opendir($src);\n\t\t\t@mkdir($dst);\n\t\t\tchmod($dst,0777); \n\t\t\twhile(false !== ($file = readdir($dir))) {\n\t\t\t\tif (( $file != '.' ) && ( $file != '..' )) {\n\t\t\t\t\tif (is_dir($src . '/' . $file)) {\n\t\t\t\t\t\t$this->copyDirAndFile($src . '/' . $file,$dst . '/' . $file);\n\t\t\t\t\t\tchmod($dst . '/' . $file,0777);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcopy($src . '/' . $file,$dst . '/' . $file);\n\t\t\t\t\t\tchmod($dst . '/' . $file,0777); \n\t\t\t\t\t\t//unlink($src . '/' . $file);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t$file = new file();\n\t\t\t$delete = $file->delDirAndFile($src);\n\t\t\tif(!$delete){\n\t\t\t\treturn '文件夹删除失败';\n\t\t\t}\n\t\t\t$file = null;\n\t\t\tclosedir($dir);\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// 复制单个文件\n\tpublic function fileCopy($source_name,$target_name) {\n        if(!file_exists($target_name)||file_exists($source_name)){\n\t\t\t//return copy($source_name,$target_name)?true:false;\n\t\t\t$result = copy($source_name,$target_name);\n\t\t\tchmod($target_name,0777); \n\t\t\treturn $result;\n\t\t\tif($result){\n\t\t\t\treturn '复制文件成功';\n\t\t\t} else {\n\t\t\t\treturn '复制文件失败';\n\t\t\t}\n        } else {\n            return '目标文件已经存在或者原始文件不存在';\n        }\n    }\n\t// 删除单个文件\n\tpublic function fileDelete($del_name) {\n        if(file_exists($del_name)){\n\t\t\t$result = unlink($del_name);\n\t\t\tif($result){\n\t\t\t\treturn '删除文件成功';\n\t\t\t} else {\n\t\t\t\treturn '删除文件失败';\n\t\t\t}\n        } else {\n            return '要删除的文件不存在';\n        }\n    }\n\t// 剪切单个文件\n\tpublic function fileCut($source_name,$target_name) {\n        if(!file_exists($target_name)||file_exists($source_name)){\n\t\t\t//return copy($source_name,$target_name)?true:false;\n\t\t\t$result = copy($source_name,$target_name);\n\t\t\tchmod($target_name,0777); \n\t\t\tunlink($source_name);\n\t\t\tif($result){\n\t\t\t\treturn '剪切文件成功';\n\t\t\t} else {\n\t\t\t\treturn '剪切文件失败';\n\t\t\t}\n        } else {\n            return '目标文件已经存在或者原始文件不存在';\n        }\n    }\n}\n?>\n```","source":"_posts/文件管理php.md","raw":"---\ntitle: 文件管理php\ndate: 2018-08-30 09:27:59\ncategories: ['后端'] \ntags: 后端\ncomments: true\n---\n### 有些代码不是自己写的 所以格式不太同\n```\n<?php\nfunction fileAdir($dir) {\n\tif (!is_dir($dir)){\n\t\tmkdir($dir);\n\t\tchmod($dir,0777); \n\t\t$data = scandir(\"$dir\");    \n\t\t$allFile = array();        \n\t\tforeach ($data as $file) {\n\t\t\tif($file != '.' && $file != '..') {    //判断是否是文件夹内的文件夹\n\t\t\t\t$a = array(\n\t\t\t\t\t'file'=>$file,\n\t\t\t\t\t'isDir'=>is_dir($dir. '/' .$file),\n\t\t\t\t\t'name'=>$dir . '/' .$file\n\t\t\t\t);\n\t\t\t\tarray_push($allFile, $a);\n\t\t\t}\n\t\t}\n\t\treturn $allFile;\n\t} else{\n\t\t$data = scandir(\"$dir\"); \n\t\t$allFile = array();      \n\t\tforeach ($data as $file) {\n\t\t\tif($file != '.' && $file != '..') {    //判断是否是文件夹内的文件夹\n\t\t\t\t$a = array(\n\t\t\t\t\t'file'=>$file,\n\t\t\t\t\t'isDir'=>is_dir($dir. '/' .$file),\n\t\t\t\t\t'name'=>$dir . '/' .$file\n\t\t\t\t);\n\t\t\t\tarray_push($allFile, $a);\n\t\t\t}\n\t\t}\n\t\treturn $allFile;\n\t}\n}\n/**  读取文件类  **/\nclass file {\n    public $file;\n    public $filename;  //文件名字\n    public $filetype;  //文件类型\n    public $filesize;  //文件大小\n    public $fileopen;  //打开文件\n    public $fileread;  //读取文件\n\n    //写入变量\n    public $filepath;\n    public $filecontent;   //保存文件用到的文件内容\n    public $fileput;       //文件写入\n\tpublic function edits($files){\n        $this->file = $files;\n        if(!file_exists($this->file)){\n            die(\"文件不存在！\");\n        }\n        $this->fileopen = fopen($this->file, 'r');\n        if(!$this->fileopen){\n            die(\"文件读取失败\");\n        }\n        //$this->fileread = htmlspecialchars($this->fileread);\n        //开始获取文件的后缀名\n        $filestr = strlen($this->file);\n        $filepoint = strrpos($this->file, '.');\n        $filesub = substr($this->file, $filepoint+1);\n        $this->filetype = $filesub;\n        $this->filename = basename($this->file);\n\t\t\n\t\t$this->filesize = filesize($this->file);\n\t\tif($this->filesize===0){\n\t\t\t\treturn array(\n\t\t\t\t'filetype'=>$this->filetype,\n\t\t\t\t'filename'=>$this->filename,\n\t\t\t\t'filecontent'=>'',\n\t\t\t\t'filepath'=>$this->file\n\t\t\t);\n\t\t\texit;\n\t\t}\n        $this->fileread = fread($this->fileopen,$this->filesize);\n\t\t// 读取中文\n\t\t//$this->fileread =iconv('gb2312', 'utf-8', $this->fileread); \n        //以数组形式返回：文件类型 文件名称 文件内容 文件路径\n        return array(\n            'filetype'=>$this->filetype,\n            'filename'=>$this->filename,\n            'filecontent'=>$this->fileread,\n            'filepath'=>$this->file\n        );\n        //关闭文件\n        fclose($this->file);\n    }\n    /* 修改文件函数 */\n    public function bc($filepath,$filecontent){\n        $this->filepath = $filepath;\n        //访问文件\n        $this->fileopen = file_get_contents($this->filepath);\n        if(!$this->fileopen){\n            //die('文件打开失败');\n        }\n        //获取传进来的文件内容\n        $this->filecontent = $filecontent;\n        //反转义html\n        //$this->filecontent = htmlspecialchars_decode($this->filecontent);\n        //写入文件\n        $this->fileput = file_put_contents($this->filepath, $this->filecontent);\n        if($this->fileput){\n            return '修改文件成功';\n        }else {\n            return '修改文件失败';\n        }\n    }\n\t// 创建文件夹\n\tpublic function create_folder($dir) {\n        if (!file_exists($dir)){\n            //mkdir($dir,0777,true);\n            mkdir($dir);\n\t\t\tchmod($dir,0777); \n            return '创建文件夹成功';\n        } else {\n\t\t\treturn '创建文件夹已存在';\n        }\n    }\n\t// 创建文件\n\tpublic function create_file($dir) {\n        if (!file_exists($dir)){\n            $handle = fopen($dir, 'w');\n\t\t\tchmod($dir,0777); \n\t\t\tif($handle){\n\t\t\t\treturn '创建文件成功';\n\t\t\t} else{\n\t\t\t\treturn '创建文件失败';\n\t\t\t}  \n        } else {\n            return '需创建的文件已经存在';\n        }\n    }\n\t// 重命名文件/文件夹\n\tpublic function fileRename($old_name,$new_name) {\n        if(!file_exists($new_name)||file_exists($old_name)){\n\t\t\t$result = rename($old_name,$new_name);\n\t\t\tif($result){\n\t\t\t\treturn\t'重命名成功';\n\t\t\t} else{\n\t\t\t\treturn\t'重命名失败';\n\t\t\t}\n        } else {\n\t\t\treturn '目标文件已存在或原文件不存在';\n        }\n    }\n\t// 复制文件夹及文件夹下文件\n\tpublic function copyDirAndFile($src,$dst) {  // 原目录，复制到的目录\n\t\tif(file_exists($src)){\n\t\t\t$dir = opendir($src);\n\t\t\t@mkdir($dst);\n\t\t\tchmod($dst,0777); \n\t\t\twhile(false !== ($file = readdir($dir))) {\n\t\t\t\tif (( $file != '.' ) && ( $file != '..' )) {\n\t\t\t\t\tif (is_dir($src . '/' . $file)) {\n\t\t\t\t\t\t$this->copyDirAndFile($src . '/' . $file,$dst . '/' . $file);\n\t\t\t\t\t\tchmod($dst . '/' . $file,0777);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcopy($src . '/' . $file,$dst . '/' . $file);\n\t\t\t\t\t\tchmod($dst . '/' . $file,0777); \n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tclosedir($dir);\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\t// 删除文件夹及文件夹下文件\n\tpublic function delDirAndFile($dirName){\n\t\tif(file_exists($dirName)){\n\t\t\tif ($handle = opendir(\"$dirName\" )) {\n\t\t\t   while (false !== ($item=readdir($handle))) {\n\t\t\t\t   if ($item != \".\" && $item != \"..\") {\n\t\t\t\t\t   if (is_dir( \"$dirName/$item\")) {\n\t\t\t\t\t\t\t$this->delDirAndFile( \"$dirName/$item\" );\n\t\t\t\t\t   } else {\n\t\t\t\t\t\t\tif(unlink( \"$dirName/$item\" )){\n\t\t\t\t\t\t\t\t// echo \"成功删除文件： $dirName/$item\\n\";\n\t\t\t\t\t\t\t}\t\n\t\t\t\t\t   }\n\t\t\t\t   }\n\t\t\t   }\n\t\t\t   closedir( $handle );\n\t\t\t   if(rmdir( $dirName )) {\n\t\t\t\t   // echo \"成功删除目录： $dirName\\n\";\n\t\t\t   }\n\t\t\t}\n\t\t\treturn true;\n\t\t} else{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// 剪切文件夹及文件夹下文件\n\tpublic function cutDirAndFile($src,$dst) {  // 原目录，复制到的目录\n\t\tif(file_exists($src)){\n\t\t\t$dir = opendir($src);\n\t\t\t@mkdir($dst);\n\t\t\tchmod($dst,0777); \n\t\t\twhile(false !== ($file = readdir($dir))) {\n\t\t\t\tif (( $file != '.' ) && ( $file != '..' )) {\n\t\t\t\t\tif (is_dir($src . '/' . $file)) {\n\t\t\t\t\t\t$this->copyDirAndFile($src . '/' . $file,$dst . '/' . $file);\n\t\t\t\t\t\tchmod($dst . '/' . $file,0777);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcopy($src . '/' . $file,$dst . '/' . $file);\n\t\t\t\t\t\tchmod($dst . '/' . $file,0777); \n\t\t\t\t\t\t//unlink($src . '/' . $file);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t$file = new file();\n\t\t\t$delete = $file->delDirAndFile($src);\n\t\t\tif(!$delete){\n\t\t\t\treturn '文件夹删除失败';\n\t\t\t}\n\t\t\t$file = null;\n\t\t\tclosedir($dir);\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// 复制单个文件\n\tpublic function fileCopy($source_name,$target_name) {\n        if(!file_exists($target_name)||file_exists($source_name)){\n\t\t\t//return copy($source_name,$target_name)?true:false;\n\t\t\t$result = copy($source_name,$target_name);\n\t\t\tchmod($target_name,0777); \n\t\t\treturn $result;\n\t\t\tif($result){\n\t\t\t\treturn '复制文件成功';\n\t\t\t} else {\n\t\t\t\treturn '复制文件失败';\n\t\t\t}\n        } else {\n            return '目标文件已经存在或者原始文件不存在';\n        }\n    }\n\t// 删除单个文件\n\tpublic function fileDelete($del_name) {\n        if(file_exists($del_name)){\n\t\t\t$result = unlink($del_name);\n\t\t\tif($result){\n\t\t\t\treturn '删除文件成功';\n\t\t\t} else {\n\t\t\t\treturn '删除文件失败';\n\t\t\t}\n        } else {\n            return '要删除的文件不存在';\n        }\n    }\n\t// 剪切单个文件\n\tpublic function fileCut($source_name,$target_name) {\n        if(!file_exists($target_name)||file_exists($source_name)){\n\t\t\t//return copy($source_name,$target_name)?true:false;\n\t\t\t$result = copy($source_name,$target_name);\n\t\t\tchmod($target_name,0777); \n\t\t\tunlink($source_name);\n\t\t\tif($result){\n\t\t\t\treturn '剪切文件成功';\n\t\t\t} else {\n\t\t\t\treturn '剪切文件失败';\n\t\t\t}\n        } else {\n            return '目标文件已经存在或者原始文件不存在';\n        }\n    }\n}\n?>\n```","slug":"文件管理php","published":1,"updated":"2018-08-30T09:43:42.000Z","layout":"post","photos":[],"link":"","_id":"cjqojjnoa0019uwkqtwzfsd19","content":"<h3 id=\"有些代码不是自己写的-所以格式不太同\"><a href=\"#有些代码不是自己写的-所以格式不太同\" class=\"headerlink\" title=\"有些代码不是自己写的 所以格式不太同\"></a>有些代码不是自己写的 所以格式不太同</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">function fileAdir($dir) &#123;</span><br><span class=\"line\">\tif (!is_dir($dir))&#123;</span><br><span class=\"line\">\t\tmkdir($dir);</span><br><span class=\"line\">\t\tchmod($dir,0777); </span><br><span class=\"line\">\t\t$data = scandir(&quot;$dir&quot;);    </span><br><span class=\"line\">\t\t$allFile = array();        </span><br><span class=\"line\">\t\tforeach ($data as $file) &#123;</span><br><span class=\"line\">\t\t\tif($file != &apos;.&apos; &amp;&amp; $file != &apos;..&apos;) &#123;    //判断是否是文件夹内的文件夹</span><br><span class=\"line\">\t\t\t\t$a = array(</span><br><span class=\"line\">\t\t\t\t\t&apos;file&apos;=&gt;$file,</span><br><span class=\"line\">\t\t\t\t\t&apos;isDir&apos;=&gt;is_dir($dir. &apos;/&apos; .$file),</span><br><span class=\"line\">\t\t\t\t\t&apos;name&apos;=&gt;$dir . &apos;/&apos; .$file</span><br><span class=\"line\">\t\t\t\t);</span><br><span class=\"line\">\t\t\t\tarray_push($allFile, $a);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn $allFile;</span><br><span class=\"line\">\t&#125; else&#123;</span><br><span class=\"line\">\t\t$data = scandir(&quot;$dir&quot;); </span><br><span class=\"line\">\t\t$allFile = array();      </span><br><span class=\"line\">\t\tforeach ($data as $file) &#123;</span><br><span class=\"line\">\t\t\tif($file != &apos;.&apos; &amp;&amp; $file != &apos;..&apos;) &#123;    //判断是否是文件夹内的文件夹</span><br><span class=\"line\">\t\t\t\t$a = array(</span><br><span class=\"line\">\t\t\t\t\t&apos;file&apos;=&gt;$file,</span><br><span class=\"line\">\t\t\t\t\t&apos;isDir&apos;=&gt;is_dir($dir. &apos;/&apos; .$file),</span><br><span class=\"line\">\t\t\t\t\t&apos;name&apos;=&gt;$dir . &apos;/&apos; .$file</span><br><span class=\"line\">\t\t\t\t);</span><br><span class=\"line\">\t\t\t\tarray_push($allFile, $a);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn $allFile;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/**  读取文件类  **/</span><br><span class=\"line\">class file &#123;</span><br><span class=\"line\">    public $file;</span><br><span class=\"line\">    public $filename;  //文件名字</span><br><span class=\"line\">    public $filetype;  //文件类型</span><br><span class=\"line\">    public $filesize;  //文件大小</span><br><span class=\"line\">    public $fileopen;  //打开文件</span><br><span class=\"line\">    public $fileread;  //读取文件</span><br><span class=\"line\"></span><br><span class=\"line\">    //写入变量</span><br><span class=\"line\">    public $filepath;</span><br><span class=\"line\">    public $filecontent;   //保存文件用到的文件内容</span><br><span class=\"line\">    public $fileput;       //文件写入</span><br><span class=\"line\">\tpublic function edits($files)&#123;</span><br><span class=\"line\">        $this-&gt;file = $files;</span><br><span class=\"line\">        if(!file_exists($this-&gt;file))&#123;</span><br><span class=\"line\">            die(&quot;文件不存在！&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $this-&gt;fileopen = fopen($this-&gt;file, &apos;r&apos;);</span><br><span class=\"line\">        if(!$this-&gt;fileopen)&#123;</span><br><span class=\"line\">            die(&quot;文件读取失败&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //$this-&gt;fileread = htmlspecialchars($this-&gt;fileread);</span><br><span class=\"line\">        //开始获取文件的后缀名</span><br><span class=\"line\">        $filestr = strlen($this-&gt;file);</span><br><span class=\"line\">        $filepoint = strrpos($this-&gt;file, &apos;.&apos;);</span><br><span class=\"line\">        $filesub = substr($this-&gt;file, $filepoint+1);</span><br><span class=\"line\">        $this-&gt;filetype = $filesub;</span><br><span class=\"line\">        $this-&gt;filename = basename($this-&gt;file);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t$this-&gt;filesize = filesize($this-&gt;file);</span><br><span class=\"line\">\t\tif($this-&gt;filesize===0)&#123;</span><br><span class=\"line\">\t\t\t\treturn array(</span><br><span class=\"line\">\t\t\t\t&apos;filetype&apos;=&gt;$this-&gt;filetype,</span><br><span class=\"line\">\t\t\t\t&apos;filename&apos;=&gt;$this-&gt;filename,</span><br><span class=\"line\">\t\t\t\t&apos;filecontent&apos;=&gt;&apos;&apos;,</span><br><span class=\"line\">\t\t\t\t&apos;filepath&apos;=&gt;$this-&gt;file</span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\">\t\t\texit;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        $this-&gt;fileread = fread($this-&gt;fileopen,$this-&gt;filesize);</span><br><span class=\"line\">\t\t// 读取中文</span><br><span class=\"line\">\t\t//$this-&gt;fileread =iconv(&apos;gb2312&apos;, &apos;utf-8&apos;, $this-&gt;fileread); </span><br><span class=\"line\">        //以数组形式返回：文件类型 文件名称 文件内容 文件路径</span><br><span class=\"line\">        return array(</span><br><span class=\"line\">            &apos;filetype&apos;=&gt;$this-&gt;filetype,</span><br><span class=\"line\">            &apos;filename&apos;=&gt;$this-&gt;filename,</span><br><span class=\"line\">            &apos;filecontent&apos;=&gt;$this-&gt;fileread,</span><br><span class=\"line\">            &apos;filepath&apos;=&gt;$this-&gt;file</span><br><span class=\"line\">        );</span><br><span class=\"line\">        //关闭文件</span><br><span class=\"line\">        fclose($this-&gt;file);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /* 修改文件函数 */</span><br><span class=\"line\">    public function bc($filepath,$filecontent)&#123;</span><br><span class=\"line\">        $this-&gt;filepath = $filepath;</span><br><span class=\"line\">        //访问文件</span><br><span class=\"line\">        $this-&gt;fileopen = file_get_contents($this-&gt;filepath);</span><br><span class=\"line\">        if(!$this-&gt;fileopen)&#123;</span><br><span class=\"line\">            //die(&apos;文件打开失败&apos;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //获取传进来的文件内容</span><br><span class=\"line\">        $this-&gt;filecontent = $filecontent;</span><br><span class=\"line\">        //反转义html</span><br><span class=\"line\">        //$this-&gt;filecontent = htmlspecialchars_decode($this-&gt;filecontent);</span><br><span class=\"line\">        //写入文件</span><br><span class=\"line\">        $this-&gt;fileput = file_put_contents($this-&gt;filepath, $this-&gt;filecontent);</span><br><span class=\"line\">        if($this-&gt;fileput)&#123;</span><br><span class=\"line\">            return &apos;修改文件成功&apos;;</span><br><span class=\"line\">        &#125;else &#123;</span><br><span class=\"line\">            return &apos;修改文件失败&apos;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t// 创建文件夹</span><br><span class=\"line\">\tpublic function create_folder($dir) &#123;</span><br><span class=\"line\">        if (!file_exists($dir))&#123;</span><br><span class=\"line\">            //mkdir($dir,0777,true);</span><br><span class=\"line\">            mkdir($dir);</span><br><span class=\"line\">\t\t\tchmod($dir,0777); </span><br><span class=\"line\">            return &apos;创建文件夹成功&apos;;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">\t\t\treturn &apos;创建文件夹已存在&apos;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t// 创建文件</span><br><span class=\"line\">\tpublic function create_file($dir) &#123;</span><br><span class=\"line\">        if (!file_exists($dir))&#123;</span><br><span class=\"line\">            $handle = fopen($dir, &apos;w&apos;);</span><br><span class=\"line\">\t\t\tchmod($dir,0777); </span><br><span class=\"line\">\t\t\tif($handle)&#123;</span><br><span class=\"line\">\t\t\t\treturn &apos;创建文件成功&apos;;</span><br><span class=\"line\">\t\t\t&#125; else&#123;</span><br><span class=\"line\">\t\t\t\treturn &apos;创建文件失败&apos;;</span><br><span class=\"line\">\t\t\t&#125;  </span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            return &apos;需创建的文件已经存在&apos;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t// 重命名文件/文件夹</span><br><span class=\"line\">\tpublic function fileRename($old_name,$new_name) &#123;</span><br><span class=\"line\">        if(!file_exists($new_name)||file_exists($old_name))&#123;</span><br><span class=\"line\">\t\t\t$result = rename($old_name,$new_name);</span><br><span class=\"line\">\t\t\tif($result)&#123;</span><br><span class=\"line\">\t\t\t\treturn\t&apos;重命名成功&apos;;</span><br><span class=\"line\">\t\t\t&#125; else&#123;</span><br><span class=\"line\">\t\t\t\treturn\t&apos;重命名失败&apos;;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">\t\t\treturn &apos;目标文件已存在或原文件不存在&apos;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t// 复制文件夹及文件夹下文件</span><br><span class=\"line\">\tpublic function copyDirAndFile($src,$dst) &#123;  // 原目录，复制到的目录</span><br><span class=\"line\">\t\tif(file_exists($src))&#123;</span><br><span class=\"line\">\t\t\t$dir = opendir($src);</span><br><span class=\"line\">\t\t\t@mkdir($dst);</span><br><span class=\"line\">\t\t\tchmod($dst,0777); </span><br><span class=\"line\">\t\t\twhile(false !== ($file = readdir($dir))) &#123;</span><br><span class=\"line\">\t\t\t\tif (( $file != &apos;.&apos; ) &amp;&amp; ( $file != &apos;..&apos; )) &#123;</span><br><span class=\"line\">\t\t\t\t\tif (is_dir($src . &apos;/&apos; . $file)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t$this-&gt;copyDirAndFile($src . &apos;/&apos; . $file,$dst . &apos;/&apos; . $file);</span><br><span class=\"line\">\t\t\t\t\t\tchmod($dst . &apos;/&apos; . $file,0777);</span><br><span class=\"line\">\t\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\t\tcopy($src . &apos;/&apos; . $file,$dst . &apos;/&apos; . $file);</span><br><span class=\"line\">\t\t\t\t\t\tchmod($dst . &apos;/&apos; . $file,0777); </span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tclosedir($dir);</span><br><span class=\"line\">\t\t\treturn true;</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\treturn false;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 删除文件夹及文件夹下文件</span><br><span class=\"line\">\tpublic function delDirAndFile($dirName)&#123;</span><br><span class=\"line\">\t\tif(file_exists($dirName))&#123;</span><br><span class=\"line\">\t\t\tif ($handle = opendir(&quot;$dirName&quot; )) &#123;</span><br><span class=\"line\">\t\t\t   while (false !== ($item=readdir($handle))) &#123;</span><br><span class=\"line\">\t\t\t\t   if ($item != &quot;.&quot; &amp;&amp; $item != &quot;..&quot;) &#123;</span><br><span class=\"line\">\t\t\t\t\t   if (is_dir( &quot;$dirName/$item&quot;)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t$this-&gt;delDirAndFile( &quot;$dirName/$item&quot; );</span><br><span class=\"line\">\t\t\t\t\t   &#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tif(unlink( &quot;$dirName/$item&quot; ))&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t// echo &quot;成功删除文件： $dirName/$item\\n&quot;;</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;\t</span><br><span class=\"line\">\t\t\t\t\t   &#125;</span><br><span class=\"line\">\t\t\t\t   &#125;</span><br><span class=\"line\">\t\t\t   &#125;</span><br><span class=\"line\">\t\t\t   closedir( $handle );</span><br><span class=\"line\">\t\t\t   if(rmdir( $dirName )) &#123;</span><br><span class=\"line\">\t\t\t\t   // echo &quot;成功删除目录： $dirName\\n&quot;;</span><br><span class=\"line\">\t\t\t   &#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\treturn true;</span><br><span class=\"line\">\t\t&#125; else&#123;</span><br><span class=\"line\">\t\t\treturn false;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 剪切文件夹及文件夹下文件</span><br><span class=\"line\">\tpublic function cutDirAndFile($src,$dst) &#123;  // 原目录，复制到的目录</span><br><span class=\"line\">\t\tif(file_exists($src))&#123;</span><br><span class=\"line\">\t\t\t$dir = opendir($src);</span><br><span class=\"line\">\t\t\t@mkdir($dst);</span><br><span class=\"line\">\t\t\tchmod($dst,0777); </span><br><span class=\"line\">\t\t\twhile(false !== ($file = readdir($dir))) &#123;</span><br><span class=\"line\">\t\t\t\tif (( $file != &apos;.&apos; ) &amp;&amp; ( $file != &apos;..&apos; )) &#123;</span><br><span class=\"line\">\t\t\t\t\tif (is_dir($src . &apos;/&apos; . $file)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t$this-&gt;copyDirAndFile($src . &apos;/&apos; . $file,$dst . &apos;/&apos; . $file);</span><br><span class=\"line\">\t\t\t\t\t\tchmod($dst . &apos;/&apos; . $file,0777);</span><br><span class=\"line\">\t\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\t\tcopy($src . &apos;/&apos; . $file,$dst . &apos;/&apos; . $file);</span><br><span class=\"line\">\t\t\t\t\t\tchmod($dst . &apos;/&apos; . $file,0777); </span><br><span class=\"line\">\t\t\t\t\t\t//unlink($src . &apos;/&apos; . $file);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t$file = new file();</span><br><span class=\"line\">\t\t\t$delete = $file-&gt;delDirAndFile($src);</span><br><span class=\"line\">\t\t\tif(!$delete)&#123;</span><br><span class=\"line\">\t\t\t\treturn &apos;文件夹删除失败&apos;;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t$file = null;</span><br><span class=\"line\">\t\t\tclosedir($dir);</span><br><span class=\"line\">\t\t\treturn true;</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\treturn false;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 复制单个文件</span><br><span class=\"line\">\tpublic function fileCopy($source_name,$target_name) &#123;</span><br><span class=\"line\">        if(!file_exists($target_name)||file_exists($source_name))&#123;</span><br><span class=\"line\">\t\t\t//return copy($source_name,$target_name)?true:false;</span><br><span class=\"line\">\t\t\t$result = copy($source_name,$target_name);</span><br><span class=\"line\">\t\t\tchmod($target_name,0777); </span><br><span class=\"line\">\t\t\treturn $result;</span><br><span class=\"line\">\t\t\tif($result)&#123;</span><br><span class=\"line\">\t\t\t\treturn &apos;复制文件成功&apos;;</span><br><span class=\"line\">\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\treturn &apos;复制文件失败&apos;;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            return &apos;目标文件已经存在或者原始文件不存在&apos;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t// 删除单个文件</span><br><span class=\"line\">\tpublic function fileDelete($del_name) &#123;</span><br><span class=\"line\">        if(file_exists($del_name))&#123;</span><br><span class=\"line\">\t\t\t$result = unlink($del_name);</span><br><span class=\"line\">\t\t\tif($result)&#123;</span><br><span class=\"line\">\t\t\t\treturn &apos;删除文件成功&apos;;</span><br><span class=\"line\">\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\treturn &apos;删除文件失败&apos;;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            return &apos;要删除的文件不存在&apos;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t// 剪切单个文件</span><br><span class=\"line\">\tpublic function fileCut($source_name,$target_name) &#123;</span><br><span class=\"line\">        if(!file_exists($target_name)||file_exists($source_name))&#123;</span><br><span class=\"line\">\t\t\t//return copy($source_name,$target_name)?true:false;</span><br><span class=\"line\">\t\t\t$result = copy($source_name,$target_name);</span><br><span class=\"line\">\t\t\tchmod($target_name,0777); </span><br><span class=\"line\">\t\t\tunlink($source_name);</span><br><span class=\"line\">\t\t\tif($result)&#123;</span><br><span class=\"line\">\t\t\t\treturn &apos;剪切文件成功&apos;;</span><br><span class=\"line\">\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\treturn &apos;剪切文件失败&apos;;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            return &apos;目标文件已经存在或者原始文件不存在&apos;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"有些代码不是自己写的-所以格式不太同\"><a href=\"#有些代码不是自己写的-所以格式不太同\" class=\"headerlink\" title=\"有些代码不是自己写的 所以格式不太同\"></a>有些代码不是自己写的 所以格式不太同</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">function fileAdir($dir) &#123;</span><br><span class=\"line\">\tif (!is_dir($dir))&#123;</span><br><span class=\"line\">\t\tmkdir($dir);</span><br><span class=\"line\">\t\tchmod($dir,0777); </span><br><span class=\"line\">\t\t$data = scandir(&quot;$dir&quot;);    </span><br><span class=\"line\">\t\t$allFile = array();        </span><br><span class=\"line\">\t\tforeach ($data as $file) &#123;</span><br><span class=\"line\">\t\t\tif($file != &apos;.&apos; &amp;&amp; $file != &apos;..&apos;) &#123;    //判断是否是文件夹内的文件夹</span><br><span class=\"line\">\t\t\t\t$a = array(</span><br><span class=\"line\">\t\t\t\t\t&apos;file&apos;=&gt;$file,</span><br><span class=\"line\">\t\t\t\t\t&apos;isDir&apos;=&gt;is_dir($dir. &apos;/&apos; .$file),</span><br><span class=\"line\">\t\t\t\t\t&apos;name&apos;=&gt;$dir . &apos;/&apos; .$file</span><br><span class=\"line\">\t\t\t\t);</span><br><span class=\"line\">\t\t\t\tarray_push($allFile, $a);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn $allFile;</span><br><span class=\"line\">\t&#125; else&#123;</span><br><span class=\"line\">\t\t$data = scandir(&quot;$dir&quot;); </span><br><span class=\"line\">\t\t$allFile = array();      </span><br><span class=\"line\">\t\tforeach ($data as $file) &#123;</span><br><span class=\"line\">\t\t\tif($file != &apos;.&apos; &amp;&amp; $file != &apos;..&apos;) &#123;    //判断是否是文件夹内的文件夹</span><br><span class=\"line\">\t\t\t\t$a = array(</span><br><span class=\"line\">\t\t\t\t\t&apos;file&apos;=&gt;$file,</span><br><span class=\"line\">\t\t\t\t\t&apos;isDir&apos;=&gt;is_dir($dir. &apos;/&apos; .$file),</span><br><span class=\"line\">\t\t\t\t\t&apos;name&apos;=&gt;$dir . &apos;/&apos; .$file</span><br><span class=\"line\">\t\t\t\t);</span><br><span class=\"line\">\t\t\t\tarray_push($allFile, $a);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn $allFile;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/**  读取文件类  **/</span><br><span class=\"line\">class file &#123;</span><br><span class=\"line\">    public $file;</span><br><span class=\"line\">    public $filename;  //文件名字</span><br><span class=\"line\">    public $filetype;  //文件类型</span><br><span class=\"line\">    public $filesize;  //文件大小</span><br><span class=\"line\">    public $fileopen;  //打开文件</span><br><span class=\"line\">    public $fileread;  //读取文件</span><br><span class=\"line\"></span><br><span class=\"line\">    //写入变量</span><br><span class=\"line\">    public $filepath;</span><br><span class=\"line\">    public $filecontent;   //保存文件用到的文件内容</span><br><span class=\"line\">    public $fileput;       //文件写入</span><br><span class=\"line\">\tpublic function edits($files)&#123;</span><br><span class=\"line\">        $this-&gt;file = $files;</span><br><span class=\"line\">        if(!file_exists($this-&gt;file))&#123;</span><br><span class=\"line\">            die(&quot;文件不存在！&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $this-&gt;fileopen = fopen($this-&gt;file, &apos;r&apos;);</span><br><span class=\"line\">        if(!$this-&gt;fileopen)&#123;</span><br><span class=\"line\">            die(&quot;文件读取失败&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //$this-&gt;fileread = htmlspecialchars($this-&gt;fileread);</span><br><span class=\"line\">        //开始获取文件的后缀名</span><br><span class=\"line\">        $filestr = strlen($this-&gt;file);</span><br><span class=\"line\">        $filepoint = strrpos($this-&gt;file, &apos;.&apos;);</span><br><span class=\"line\">        $filesub = substr($this-&gt;file, $filepoint+1);</span><br><span class=\"line\">        $this-&gt;filetype = $filesub;</span><br><span class=\"line\">        $this-&gt;filename = basename($this-&gt;file);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t$this-&gt;filesize = filesize($this-&gt;file);</span><br><span class=\"line\">\t\tif($this-&gt;filesize===0)&#123;</span><br><span class=\"line\">\t\t\t\treturn array(</span><br><span class=\"line\">\t\t\t\t&apos;filetype&apos;=&gt;$this-&gt;filetype,</span><br><span class=\"line\">\t\t\t\t&apos;filename&apos;=&gt;$this-&gt;filename,</span><br><span class=\"line\">\t\t\t\t&apos;filecontent&apos;=&gt;&apos;&apos;,</span><br><span class=\"line\">\t\t\t\t&apos;filepath&apos;=&gt;$this-&gt;file</span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\">\t\t\texit;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        $this-&gt;fileread = fread($this-&gt;fileopen,$this-&gt;filesize);</span><br><span class=\"line\">\t\t// 读取中文</span><br><span class=\"line\">\t\t//$this-&gt;fileread =iconv(&apos;gb2312&apos;, &apos;utf-8&apos;, $this-&gt;fileread); </span><br><span class=\"line\">        //以数组形式返回：文件类型 文件名称 文件内容 文件路径</span><br><span class=\"line\">        return array(</span><br><span class=\"line\">            &apos;filetype&apos;=&gt;$this-&gt;filetype,</span><br><span class=\"line\">            &apos;filename&apos;=&gt;$this-&gt;filename,</span><br><span class=\"line\">            &apos;filecontent&apos;=&gt;$this-&gt;fileread,</span><br><span class=\"line\">            &apos;filepath&apos;=&gt;$this-&gt;file</span><br><span class=\"line\">        );</span><br><span class=\"line\">        //关闭文件</span><br><span class=\"line\">        fclose($this-&gt;file);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /* 修改文件函数 */</span><br><span class=\"line\">    public function bc($filepath,$filecontent)&#123;</span><br><span class=\"line\">        $this-&gt;filepath = $filepath;</span><br><span class=\"line\">        //访问文件</span><br><span class=\"line\">        $this-&gt;fileopen = file_get_contents($this-&gt;filepath);</span><br><span class=\"line\">        if(!$this-&gt;fileopen)&#123;</span><br><span class=\"line\">            //die(&apos;文件打开失败&apos;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //获取传进来的文件内容</span><br><span class=\"line\">        $this-&gt;filecontent = $filecontent;</span><br><span class=\"line\">        //反转义html</span><br><span class=\"line\">        //$this-&gt;filecontent = htmlspecialchars_decode($this-&gt;filecontent);</span><br><span class=\"line\">        //写入文件</span><br><span class=\"line\">        $this-&gt;fileput = file_put_contents($this-&gt;filepath, $this-&gt;filecontent);</span><br><span class=\"line\">        if($this-&gt;fileput)&#123;</span><br><span class=\"line\">            return &apos;修改文件成功&apos;;</span><br><span class=\"line\">        &#125;else &#123;</span><br><span class=\"line\">            return &apos;修改文件失败&apos;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t// 创建文件夹</span><br><span class=\"line\">\tpublic function create_folder($dir) &#123;</span><br><span class=\"line\">        if (!file_exists($dir))&#123;</span><br><span class=\"line\">            //mkdir($dir,0777,true);</span><br><span class=\"line\">            mkdir($dir);</span><br><span class=\"line\">\t\t\tchmod($dir,0777); </span><br><span class=\"line\">            return &apos;创建文件夹成功&apos;;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">\t\t\treturn &apos;创建文件夹已存在&apos;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t// 创建文件</span><br><span class=\"line\">\tpublic function create_file($dir) &#123;</span><br><span class=\"line\">        if (!file_exists($dir))&#123;</span><br><span class=\"line\">            $handle = fopen($dir, &apos;w&apos;);</span><br><span class=\"line\">\t\t\tchmod($dir,0777); </span><br><span class=\"line\">\t\t\tif($handle)&#123;</span><br><span class=\"line\">\t\t\t\treturn &apos;创建文件成功&apos;;</span><br><span class=\"line\">\t\t\t&#125; else&#123;</span><br><span class=\"line\">\t\t\t\treturn &apos;创建文件失败&apos;;</span><br><span class=\"line\">\t\t\t&#125;  </span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            return &apos;需创建的文件已经存在&apos;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t// 重命名文件/文件夹</span><br><span class=\"line\">\tpublic function fileRename($old_name,$new_name) &#123;</span><br><span class=\"line\">        if(!file_exists($new_name)||file_exists($old_name))&#123;</span><br><span class=\"line\">\t\t\t$result = rename($old_name,$new_name);</span><br><span class=\"line\">\t\t\tif($result)&#123;</span><br><span class=\"line\">\t\t\t\treturn\t&apos;重命名成功&apos;;</span><br><span class=\"line\">\t\t\t&#125; else&#123;</span><br><span class=\"line\">\t\t\t\treturn\t&apos;重命名失败&apos;;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">\t\t\treturn &apos;目标文件已存在或原文件不存在&apos;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t// 复制文件夹及文件夹下文件</span><br><span class=\"line\">\tpublic function copyDirAndFile($src,$dst) &#123;  // 原目录，复制到的目录</span><br><span class=\"line\">\t\tif(file_exists($src))&#123;</span><br><span class=\"line\">\t\t\t$dir = opendir($src);</span><br><span class=\"line\">\t\t\t@mkdir($dst);</span><br><span class=\"line\">\t\t\tchmod($dst,0777); </span><br><span class=\"line\">\t\t\twhile(false !== ($file = readdir($dir))) &#123;</span><br><span class=\"line\">\t\t\t\tif (( $file != &apos;.&apos; ) &amp;&amp; ( $file != &apos;..&apos; )) &#123;</span><br><span class=\"line\">\t\t\t\t\tif (is_dir($src . &apos;/&apos; . $file)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t$this-&gt;copyDirAndFile($src . &apos;/&apos; . $file,$dst . &apos;/&apos; . $file);</span><br><span class=\"line\">\t\t\t\t\t\tchmod($dst . &apos;/&apos; . $file,0777);</span><br><span class=\"line\">\t\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\t\tcopy($src . &apos;/&apos; . $file,$dst . &apos;/&apos; . $file);</span><br><span class=\"line\">\t\t\t\t\t\tchmod($dst . &apos;/&apos; . $file,0777); </span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tclosedir($dir);</span><br><span class=\"line\">\t\t\treturn true;</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\treturn false;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 删除文件夹及文件夹下文件</span><br><span class=\"line\">\tpublic function delDirAndFile($dirName)&#123;</span><br><span class=\"line\">\t\tif(file_exists($dirName))&#123;</span><br><span class=\"line\">\t\t\tif ($handle = opendir(&quot;$dirName&quot; )) &#123;</span><br><span class=\"line\">\t\t\t   while (false !== ($item=readdir($handle))) &#123;</span><br><span class=\"line\">\t\t\t\t   if ($item != &quot;.&quot; &amp;&amp; $item != &quot;..&quot;) &#123;</span><br><span class=\"line\">\t\t\t\t\t   if (is_dir( &quot;$dirName/$item&quot;)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t$this-&gt;delDirAndFile( &quot;$dirName/$item&quot; );</span><br><span class=\"line\">\t\t\t\t\t   &#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tif(unlink( &quot;$dirName/$item&quot; ))&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t// echo &quot;成功删除文件： $dirName/$item\\n&quot;;</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;\t</span><br><span class=\"line\">\t\t\t\t\t   &#125;</span><br><span class=\"line\">\t\t\t\t   &#125;</span><br><span class=\"line\">\t\t\t   &#125;</span><br><span class=\"line\">\t\t\t   closedir( $handle );</span><br><span class=\"line\">\t\t\t   if(rmdir( $dirName )) &#123;</span><br><span class=\"line\">\t\t\t\t   // echo &quot;成功删除目录： $dirName\\n&quot;;</span><br><span class=\"line\">\t\t\t   &#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\treturn true;</span><br><span class=\"line\">\t\t&#125; else&#123;</span><br><span class=\"line\">\t\t\treturn false;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 剪切文件夹及文件夹下文件</span><br><span class=\"line\">\tpublic function cutDirAndFile($src,$dst) &#123;  // 原目录，复制到的目录</span><br><span class=\"line\">\t\tif(file_exists($src))&#123;</span><br><span class=\"line\">\t\t\t$dir = opendir($src);</span><br><span class=\"line\">\t\t\t@mkdir($dst);</span><br><span class=\"line\">\t\t\tchmod($dst,0777); </span><br><span class=\"line\">\t\t\twhile(false !== ($file = readdir($dir))) &#123;</span><br><span class=\"line\">\t\t\t\tif (( $file != &apos;.&apos; ) &amp;&amp; ( $file != &apos;..&apos; )) &#123;</span><br><span class=\"line\">\t\t\t\t\tif (is_dir($src . &apos;/&apos; . $file)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t$this-&gt;copyDirAndFile($src . &apos;/&apos; . $file,$dst . &apos;/&apos; . $file);</span><br><span class=\"line\">\t\t\t\t\t\tchmod($dst . &apos;/&apos; . $file,0777);</span><br><span class=\"line\">\t\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\t\tcopy($src . &apos;/&apos; . $file,$dst . &apos;/&apos; . $file);</span><br><span class=\"line\">\t\t\t\t\t\tchmod($dst . &apos;/&apos; . $file,0777); </span><br><span class=\"line\">\t\t\t\t\t\t//unlink($src . &apos;/&apos; . $file);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t$file = new file();</span><br><span class=\"line\">\t\t\t$delete = $file-&gt;delDirAndFile($src);</span><br><span class=\"line\">\t\t\tif(!$delete)&#123;</span><br><span class=\"line\">\t\t\t\treturn &apos;文件夹删除失败&apos;;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t$file = null;</span><br><span class=\"line\">\t\t\tclosedir($dir);</span><br><span class=\"line\">\t\t\treturn true;</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\treturn false;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 复制单个文件</span><br><span class=\"line\">\tpublic function fileCopy($source_name,$target_name) &#123;</span><br><span class=\"line\">        if(!file_exists($target_name)||file_exists($source_name))&#123;</span><br><span class=\"line\">\t\t\t//return copy($source_name,$target_name)?true:false;</span><br><span class=\"line\">\t\t\t$result = copy($source_name,$target_name);</span><br><span class=\"line\">\t\t\tchmod($target_name,0777); </span><br><span class=\"line\">\t\t\treturn $result;</span><br><span class=\"line\">\t\t\tif($result)&#123;</span><br><span class=\"line\">\t\t\t\treturn &apos;复制文件成功&apos;;</span><br><span class=\"line\">\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\treturn &apos;复制文件失败&apos;;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            return &apos;目标文件已经存在或者原始文件不存在&apos;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t// 删除单个文件</span><br><span class=\"line\">\tpublic function fileDelete($del_name) &#123;</span><br><span class=\"line\">        if(file_exists($del_name))&#123;</span><br><span class=\"line\">\t\t\t$result = unlink($del_name);</span><br><span class=\"line\">\t\t\tif($result)&#123;</span><br><span class=\"line\">\t\t\t\treturn &apos;删除文件成功&apos;;</span><br><span class=\"line\">\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\treturn &apos;删除文件失败&apos;;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            return &apos;要删除的文件不存在&apos;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t// 剪切单个文件</span><br><span class=\"line\">\tpublic function fileCut($source_name,$target_name) &#123;</span><br><span class=\"line\">        if(!file_exists($target_name)||file_exists($source_name))&#123;</span><br><span class=\"line\">\t\t\t//return copy($source_name,$target_name)?true:false;</span><br><span class=\"line\">\t\t\t$result = copy($source_name,$target_name);</span><br><span class=\"line\">\t\t\tchmod($target_name,0777); </span><br><span class=\"line\">\t\t\tunlink($source_name);</span><br><span class=\"line\">\t\t\tif($result)&#123;</span><br><span class=\"line\">\t\t\t\treturn &apos;剪切文件成功&apos;;</span><br><span class=\"line\">\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\treturn &apos;剪切文件失败&apos;;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            return &apos;目标文件已经存在或者原始文件不存在&apos;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>"},{"title":"淘宝主图换图技术","date":"2018-09-12T10:18:39.000Z","comments":1,"_content":"\n# 淘宝主图换图技术(包更新),\n## 认准QQ:1058330410\n\n\n简单原理\n抓包\n修改抓包的提交主图的url,改为访问服务器\n服务器根据,是否为pc,mobile,显示不同的图片\n提交修改内容到对应接口\n\n## 一、发布商品并把在淘宝图片空间选择的主图链接复制到这（这图就是pc端显示的）\npc：https://img.alicdn.com/imgextra/i3/4011718250/TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpg\n\n同样在淘宝图片空间选择一张图片（移动端要显示的图片）复制链接，到这\n\nmobile：https://img.alicdn.com/imgextra/i4/4011718250/TB25IdCpWAoBKNjSZSyXXaHAVXa_!!4011718250.jpg\n\n## 二、进入服务器地址: http://web.xiaojw.xyz/taobao_DI  ,登录账号密码(一个店铺可多个账号)(需要账号联系我)，选择创建链接，\n\n填写PC端图片名称（既pc端的图片链接对应的部分）：TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpg\nPC端的图片：https://img.alicdn.com/imgextra/i3/4011718250/TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpg\n移动端要显示的图片： https://img.alicdn.com/imgextra/i4/4011718250/TB25IdCpWAoBKNjSZSyXXaHAVXa_!!4011718250.jpg\n\n点击立即增加按钮，增加成功后点击复制代码：复制到这\n例\nhttp://119.29.143.126/alicdn.com/4011718250/TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpg\n\n## 三、下载并打开fiddler软件（百度就能搜索到）（安装后在开始那里可以找到软件）\n配置fiddler： 点击选项Tools-options-Https\n\t     勾选Decrypt Https traffic  弹出时全部点确认就行\n\t      再勾选 Ignore server certificate errors(unsafe)\n接着进去淘宝商家\n出售中宝贝->编辑宝贝->清空fiddler->再点击发布宝贝,\n回到fiddler \n找到绿色箭头upload.taobao.com这行 右键选择Replay-reissue and Edit   右边选项卡 选择webForm\n\n将Body 里的dataBody 的内容剪切出来\n\n{\"stuffStatus\":5,\"title\":\"2018测试双图\",\"multiMedia\":{\"image\":[{\"url\":\"https://img.alicdn.com/imgextra/i3/4011718250/TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpg\",\"major\":true,\"position\":0}],\"imageVideo\":{\"interactiveId\":\"\",\"videoId\":\"\"}},\"price\":\"11\",\"quantity\":1000,\"purchaseLocation\":{\"isGlobalStock\":\"false\"},\"descForPC\":\"<p> 13213</p>\",\"descForMobile\":[{\"type\":\"text\",\"value\":\" 13213\"}],\"deliverWay\":[1],\"deliverTemplate\":15440272050,\"afterSale\":{\"sellPromise\":[1],\"custom\":[3]},\"subStockType\":1,\"startTime\":{\"startType\":0},\"catId\":127666020,\"itemId\":577320607928}\n\n将url:后面的链接替换为重网站上复制的链接\n例如:\n{\"stuffStatus\":5,\"title\":\"2018.9主图双图\",\"multiMedia\":{\"image\":[{\"url\":\"http://119.29.143.126/alicdn.com/4011718250/TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpg\",\"major\":true,\"position\":0}],\"imageVideo\":{\"interactiveId\":\"\",\"videoId\":\"\"}},\"price\":\"11\",\"quantity\":1000,\"purchaseLocation\":{\"isGlobalStock\":\"false\"},\"descForPC\":\"<p> 13213</p>\",\"descForMobile\":[{\"type\":\"text\",\"value\":\" 13213\"}],\"deliverWay\":[1],\"deliverTemplate\":15440272050,\"afterSale\":{\"sellPromise\":[1],\"custom\":[3]},\"subStockType\":1,\"startTime\":{\"startType\":0},\"catId\":127666020,\"itemId\":577320607928}\n\n改完后再完整的复制会原来的位置\n点击下面的run to complete\n\n返回宝贝页面 的淘宝购买页 (宝贝详情最右边有个手机购买) 鼠标移过去 用手机扫码\n","source":"_posts/淘宝主图换图技术.md","raw":"---\ntitle: 淘宝主图换图技术\ndate: 2018-09-12 18:18:39\ncategories: ['其他'] \ntags: 其他\ncomments: true\n---\n\n# 淘宝主图换图技术(包更新),\n## 认准QQ:1058330410\n\n\n简单原理\n抓包\n修改抓包的提交主图的url,改为访问服务器\n服务器根据,是否为pc,mobile,显示不同的图片\n提交修改内容到对应接口\n\n## 一、发布商品并把在淘宝图片空间选择的主图链接复制到这（这图就是pc端显示的）\npc：https://img.alicdn.com/imgextra/i3/4011718250/TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpg\n\n同样在淘宝图片空间选择一张图片（移动端要显示的图片）复制链接，到这\n\nmobile：https://img.alicdn.com/imgextra/i4/4011718250/TB25IdCpWAoBKNjSZSyXXaHAVXa_!!4011718250.jpg\n\n## 二、进入服务器地址: http://web.xiaojw.xyz/taobao_DI  ,登录账号密码(一个店铺可多个账号)(需要账号联系我)，选择创建链接，\n\n填写PC端图片名称（既pc端的图片链接对应的部分）：TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpg\nPC端的图片：https://img.alicdn.com/imgextra/i3/4011718250/TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpg\n移动端要显示的图片： https://img.alicdn.com/imgextra/i4/4011718250/TB25IdCpWAoBKNjSZSyXXaHAVXa_!!4011718250.jpg\n\n点击立即增加按钮，增加成功后点击复制代码：复制到这\n例\nhttp://119.29.143.126/alicdn.com/4011718250/TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpg\n\n## 三、下载并打开fiddler软件（百度就能搜索到）（安装后在开始那里可以找到软件）\n配置fiddler： 点击选项Tools-options-Https\n\t     勾选Decrypt Https traffic  弹出时全部点确认就行\n\t      再勾选 Ignore server certificate errors(unsafe)\n接着进去淘宝商家\n出售中宝贝->编辑宝贝->清空fiddler->再点击发布宝贝,\n回到fiddler \n找到绿色箭头upload.taobao.com这行 右键选择Replay-reissue and Edit   右边选项卡 选择webForm\n\n将Body 里的dataBody 的内容剪切出来\n\n{\"stuffStatus\":5,\"title\":\"2018测试双图\",\"multiMedia\":{\"image\":[{\"url\":\"https://img.alicdn.com/imgextra/i3/4011718250/TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpg\",\"major\":true,\"position\":0}],\"imageVideo\":{\"interactiveId\":\"\",\"videoId\":\"\"}},\"price\":\"11\",\"quantity\":1000,\"purchaseLocation\":{\"isGlobalStock\":\"false\"},\"descForPC\":\"<p> 13213</p>\",\"descForMobile\":[{\"type\":\"text\",\"value\":\" 13213\"}],\"deliverWay\":[1],\"deliverTemplate\":15440272050,\"afterSale\":{\"sellPromise\":[1],\"custom\":[3]},\"subStockType\":1,\"startTime\":{\"startType\":0},\"catId\":127666020,\"itemId\":577320607928}\n\n将url:后面的链接替换为重网站上复制的链接\n例如:\n{\"stuffStatus\":5,\"title\":\"2018.9主图双图\",\"multiMedia\":{\"image\":[{\"url\":\"http://119.29.143.126/alicdn.com/4011718250/TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpg\",\"major\":true,\"position\":0}],\"imageVideo\":{\"interactiveId\":\"\",\"videoId\":\"\"}},\"price\":\"11\",\"quantity\":1000,\"purchaseLocation\":{\"isGlobalStock\":\"false\"},\"descForPC\":\"<p> 13213</p>\",\"descForMobile\":[{\"type\":\"text\",\"value\":\" 13213\"}],\"deliverWay\":[1],\"deliverTemplate\":15440272050,\"afterSale\":{\"sellPromise\":[1],\"custom\":[3]},\"subStockType\":1,\"startTime\":{\"startType\":0},\"catId\":127666020,\"itemId\":577320607928}\n\n改完后再完整的复制会原来的位置\n点击下面的run to complete\n\n返回宝贝页面 的淘宝购买页 (宝贝详情最右边有个手机购买) 鼠标移过去 用手机扫码\n","slug":"淘宝主图换图技术","published":1,"updated":"2019-01-09T01:57:54.041Z","layout":"post","photos":[],"link":"","_id":"cjqojjnoe001cuwkqo34jvp39","content":"<h1 id=\"淘宝主图换图技术-包更新\"><a href=\"#淘宝主图换图技术-包更新\" class=\"headerlink\" title=\"淘宝主图换图技术(包更新),\"></a>淘宝主图换图技术(包更新),</h1><h2 id=\"认准QQ-1058330410\"><a href=\"#认准QQ-1058330410\" class=\"headerlink\" title=\"认准QQ:1058330410\"></a>认准QQ:1058330410</h2><p>简单原理<br>抓包<br>修改抓包的提交主图的url,改为访问服务器<br>服务器根据,是否为pc,mobile,显示不同的图片<br>提交修改内容到对应接口</p>\n<h2 id=\"一、发布商品并把在淘宝图片空间选择的主图链接复制到这（这图就是pc端显示的）\"><a href=\"#一、发布商品并把在淘宝图片空间选择的主图链接复制到这（这图就是pc端显示的）\" class=\"headerlink\" title=\"一、发布商品并把在淘宝图片空间选择的主图链接复制到这（这图就是pc端显示的）\"></a>一、发布商品并把在淘宝图片空间选择的主图链接复制到这（这图就是pc端显示的）</h2><p>pc：<a href=\"https://img.alicdn.com/imgextra/i3/4011718250/TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpg\" target=\"_blank\" rel=\"noopener\">https://img.alicdn.com/imgextra/i3/4011718250/TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpg</a></p>\n<p>同样在淘宝图片空间选择一张图片（移动端要显示的图片）复制链接，到这</p>\n<p>mobile：<a href=\"https://img.alicdn.com/imgextra/i4/4011718250/TB25IdCpWAoBKNjSZSyXXaHAVXa_!!4011718250.jpg\" target=\"_blank\" rel=\"noopener\">https://img.alicdn.com/imgextra/i4/4011718250/TB25IdCpWAoBKNjSZSyXXaHAVXa_!!4011718250.jpg</a></p>\n<h2 id=\"二、进入服务器地址-http-web-xiaojw-xyz-taobao-DI-登录账号密码-一个店铺可多个账号-需要账号联系我-，选择创建链接，\"><a href=\"#二、进入服务器地址-http-web-xiaojw-xyz-taobao-DI-登录账号密码-一个店铺可多个账号-需要账号联系我-，选择创建链接，\" class=\"headerlink\" title=\"二、进入服务器地址: http://web.xiaojw.xyz/taobao_DI  ,登录账号密码(一个店铺可多个账号)(需要账号联系我)，选择创建链接，\"></a>二、进入服务器地址: <a href=\"http://web.xiaojw.xyz/taobao_DI\" target=\"_blank\" rel=\"noopener\">http://web.xiaojw.xyz/taobao_DI</a>  ,登录账号密码(一个店铺可多个账号)(需要账号联系我)，选择创建链接，</h2><p>填写PC端图片名称（既pc端的图片链接对应的部分）：TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpg<br>PC端的图片：<a href=\"https://img.alicdn.com/imgextra/i3/4011718250/TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpg\" target=\"_blank\" rel=\"noopener\">https://img.alicdn.com/imgextra/i3/4011718250/TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpg</a><br>移动端要显示的图片： <a href=\"https://img.alicdn.com/imgextra/i4/4011718250/TB25IdCpWAoBKNjSZSyXXaHAVXa_!!4011718250.jpg\" target=\"_blank\" rel=\"noopener\">https://img.alicdn.com/imgextra/i4/4011718250/TB25IdCpWAoBKNjSZSyXXaHAVXa_!!4011718250.jpg</a></p>\n<p>点击立即增加按钮，增加成功后点击复制代码：复制到这<br>例<br><a href=\"http://119.29.143.126/alicdn.com/4011718250/TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpg\" target=\"_blank\" rel=\"noopener\">http://119.29.143.126/alicdn.com/4011718250/TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpg</a></p>\n<h2 id=\"三、下载并打开fiddler软件（百度就能搜索到）（安装后在开始那里可以找到软件）\"><a href=\"#三、下载并打开fiddler软件（百度就能搜索到）（安装后在开始那里可以找到软件）\" class=\"headerlink\" title=\"三、下载并打开fiddler软件（百度就能搜索到）（安装后在开始那里可以找到软件）\"></a>三、下载并打开fiddler软件（百度就能搜索到）（安装后在开始那里可以找到软件）</h2><p>配置fiddler： 点击选项Tools-options-Https<br>         勾选Decrypt Https traffic  弹出时全部点确认就行<br>          再勾选 Ignore server certificate errors(unsafe)<br>接着进去淘宝商家<br>出售中宝贝-&gt;编辑宝贝-&gt;清空fiddler-&gt;再点击发布宝贝,<br>回到fiddler<br>找到绿色箭头upload.taobao.com这行 右键选择Replay-reissue and Edit   右边选项卡 选择webForm</p>\n<p>将Body 里的dataBody 的内容剪切出来</p>\n<p>{“stuffStatus”:5,”title”:”2018测试双图”,”multiMedia”:{“image”:[{“url”:”<a href=\"https://img.alicdn.com/imgextra/i3/4011718250/TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpg&quot;,&quot;major&quot;:true,&quot;position&quot;:0}],&quot;imageVideo&quot;:{&quot;interactiveId&quot;:&quot;&quot;,&quot;videoId&quot;:&quot;&quot;}},&quot;price&quot;:&quot;11&quot;,&quot;quantity&quot;:1000,&quot;purchaseLocation&quot;:{&quot;isGlobalStock&quot;:&quot;false&quot;},&quot;descForPC&quot;:&quot;\" target=\"_blank\" rel=\"noopener\">https://img.alicdn.com/imgextra/i3/4011718250/TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpg&quot;,&quot;major&quot;:true,&quot;position&quot;:0}],&quot;imageVideo&quot;:{&quot;interactiveId&quot;:&quot;&quot;,&quot;videoId&quot;:&quot;&quot;}},&quot;price&quot;:&quot;11&quot;,&quot;quantity&quot;:1000,&quot;purchaseLocation&quot;:{&quot;isGlobalStock&quot;:&quot;false&quot;},&quot;descForPC&quot;:&quot;</a></p><p> 13213</p>“,”descForMobile”:[{“type”:”text”,”value”:” 13213”}],”deliverWay”:[1],”deliverTemplate”:15440272050,”afterSale”:{“sellPromise”:[1],”custom”:[3]},”subStockType”:1,”startTime”:{“startType”:0},”catId”:127666020,”itemId”:577320607928}<p></p>\n<p>将url:后面的链接替换为重网站上复制的链接<br>例如:<br>{“stuffStatus”:5,”title”:”2018.9主图双图”,”multiMedia”:{“image”:[{“url”:”<a href=\"http://119.29.143.126/alicdn.com/4011718250/TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpg&quot;,&quot;major&quot;:true,&quot;position&quot;:0}],&quot;imageVideo&quot;:{&quot;interactiveId&quot;:&quot;&quot;,&quot;videoId&quot;:&quot;&quot;}},&quot;price&quot;:&quot;11&quot;,&quot;quantity&quot;:1000,&quot;purchaseLocation&quot;:{&quot;isGlobalStock&quot;:&quot;false&quot;},&quot;descForPC&quot;:&quot;\" target=\"_blank\" rel=\"noopener\">http://119.29.143.126/alicdn.com/4011718250/TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpg&quot;,&quot;major&quot;:true,&quot;position&quot;:0}],&quot;imageVideo&quot;:{&quot;interactiveId&quot;:&quot;&quot;,&quot;videoId&quot;:&quot;&quot;}},&quot;price&quot;:&quot;11&quot;,&quot;quantity&quot;:1000,&quot;purchaseLocation&quot;:{&quot;isGlobalStock&quot;:&quot;false&quot;},&quot;descForPC&quot;:&quot;</a></p><p> 13213</p>“,”descForMobile”:[{“type”:”text”,”value”:” 13213”}],”deliverWay”:[1],”deliverTemplate”:15440272050,”afterSale”:{“sellPromise”:[1],”custom”:[3]},”subStockType”:1,”startTime”:{“startType”:0},”catId”:127666020,”itemId”:577320607928}<p></p>\n<p>改完后再完整的复制会原来的位置<br>点击下面的run to complete</p>\n<p>返回宝贝页面 的淘宝购买页 (宝贝详情最右边有个手机购买) 鼠标移过去 用手机扫码</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"淘宝主图换图技术-包更新\"><a href=\"#淘宝主图换图技术-包更新\" class=\"headerlink\" title=\"淘宝主图换图技术(包更新),\"></a>淘宝主图换图技术(包更新),</h1><h2 id=\"认准QQ-1058330410\"><a href=\"#认准QQ-1058330410\" class=\"headerlink\" title=\"认准QQ:1058330410\"></a>认准QQ:1058330410</h2><p>简单原理<br>抓包<br>修改抓包的提交主图的url,改为访问服务器<br>服务器根据,是否为pc,mobile,显示不同的图片<br>提交修改内容到对应接口</p>\n<h2 id=\"一、发布商品并把在淘宝图片空间选择的主图链接复制到这（这图就是pc端显示的）\"><a href=\"#一、发布商品并把在淘宝图片空间选择的主图链接复制到这（这图就是pc端显示的）\" class=\"headerlink\" title=\"一、发布商品并把在淘宝图片空间选择的主图链接复制到这（这图就是pc端显示的）\"></a>一、发布商品并把在淘宝图片空间选择的主图链接复制到这（这图就是pc端显示的）</h2><p>pc：<a href=\"https://img.alicdn.com/imgextra/i3/4011718250/TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpg\" target=\"_blank\" rel=\"noopener\">https://img.alicdn.com/imgextra/i3/4011718250/TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpg</a></p>\n<p>同样在淘宝图片空间选择一张图片（移动端要显示的图片）复制链接，到这</p>\n<p>mobile：<a href=\"https://img.alicdn.com/imgextra/i4/4011718250/TB25IdCpWAoBKNjSZSyXXaHAVXa_!!4011718250.jpg\" target=\"_blank\" rel=\"noopener\">https://img.alicdn.com/imgextra/i4/4011718250/TB25IdCpWAoBKNjSZSyXXaHAVXa_!!4011718250.jpg</a></p>\n<h2 id=\"二、进入服务器地址-http-web-xiaojw-xyz-taobao-DI-登录账号密码-一个店铺可多个账号-需要账号联系我-，选择创建链接，\"><a href=\"#二、进入服务器地址-http-web-xiaojw-xyz-taobao-DI-登录账号密码-一个店铺可多个账号-需要账号联系我-，选择创建链接，\" class=\"headerlink\" title=\"二、进入服务器地址: http://web.xiaojw.xyz/taobao_DI  ,登录账号密码(一个店铺可多个账号)(需要账号联系我)，选择创建链接，\"></a>二、进入服务器地址: <a href=\"http://web.xiaojw.xyz/taobao_DI\" target=\"_blank\" rel=\"noopener\">http://web.xiaojw.xyz/taobao_DI</a>  ,登录账号密码(一个店铺可多个账号)(需要账号联系我)，选择创建链接，</h2><p>填写PC端图片名称（既pc端的图片链接对应的部分）：TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpg<br>PC端的图片：<a href=\"https://img.alicdn.com/imgextra/i3/4011718250/TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpg\" target=\"_blank\" rel=\"noopener\">https://img.alicdn.com/imgextra/i3/4011718250/TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpg</a><br>移动端要显示的图片： <a href=\"https://img.alicdn.com/imgextra/i4/4011718250/TB25IdCpWAoBKNjSZSyXXaHAVXa_!!4011718250.jpg\" target=\"_blank\" rel=\"noopener\">https://img.alicdn.com/imgextra/i4/4011718250/TB25IdCpWAoBKNjSZSyXXaHAVXa_!!4011718250.jpg</a></p>\n<p>点击立即增加按钮，增加成功后点击复制代码：复制到这<br>例<br><a href=\"http://119.29.143.126/alicdn.com/4011718250/TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpg\" target=\"_blank\" rel=\"noopener\">http://119.29.143.126/alicdn.com/4011718250/TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpg</a></p>\n<h2 id=\"三、下载并打开fiddler软件（百度就能搜索到）（安装后在开始那里可以找到软件）\"><a href=\"#三、下载并打开fiddler软件（百度就能搜索到）（安装后在开始那里可以找到软件）\" class=\"headerlink\" title=\"三、下载并打开fiddler软件（百度就能搜索到）（安装后在开始那里可以找到软件）\"></a>三、下载并打开fiddler软件（百度就能搜索到）（安装后在开始那里可以找到软件）</h2><p>配置fiddler： 点击选项Tools-options-Https<br>         勾选Decrypt Https traffic  弹出时全部点确认就行<br>          再勾选 Ignore server certificate errors(unsafe)<br>接着进去淘宝商家<br>出售中宝贝-&gt;编辑宝贝-&gt;清空fiddler-&gt;再点击发布宝贝,<br>回到fiddler<br>找到绿色箭头upload.taobao.com这行 右键选择Replay-reissue and Edit   右边选项卡 选择webForm</p>\n<p>将Body 里的dataBody 的内容剪切出来</p>\n<p>{“stuffStatus”:5,”title”:”2018测试双图”,”multiMedia”:{“image”:[{“url”:”<a href=\"https://img.alicdn.com/imgextra/i3/4011718250/TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpg&quot;,&quot;major&quot;:true,&quot;position&quot;:0}],&quot;imageVideo&quot;:{&quot;interactiveId&quot;:&quot;&quot;,&quot;videoId&quot;:&quot;&quot;}},&quot;price&quot;:&quot;11&quot;,&quot;quantity&quot;:1000,&quot;purchaseLocation&quot;:{&quot;isGlobalStock&quot;:&quot;false&quot;},&quot;descForPC&quot;:&quot;\" target=\"_blank\" rel=\"noopener\">https://img.alicdn.com/imgextra/i3/4011718250/TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpg&quot;,&quot;major&quot;:true,&quot;position&quot;:0}],&quot;imageVideo&quot;:{&quot;interactiveId&quot;:&quot;&quot;,&quot;videoId&quot;:&quot;&quot;}},&quot;price&quot;:&quot;11&quot;,&quot;quantity&quot;:1000,&quot;purchaseLocation&quot;:{&quot;isGlobalStock&quot;:&quot;false&quot;},&quot;descForPC&quot;:&quot;</a></p><p> 13213</p>“,”descForMobile”:[{“type”:”text”,”value”:” 13213”}],”deliverWay”:[1],”deliverTemplate”:15440272050,”afterSale”:{“sellPromise”:[1],”custom”:[3]},”subStockType”:1,”startTime”:{“startType”:0},”catId”:127666020,”itemId”:577320607928}<p></p>\n<p>将url:后面的链接替换为重网站上复制的链接<br>例如:<br>{“stuffStatus”:5,”title”:”2018.9主图双图”,”multiMedia”:{“image”:[{“url”:”<a href=\"http://119.29.143.126/alicdn.com/4011718250/TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpg&quot;,&quot;major&quot;:true,&quot;position&quot;:0}],&quot;imageVideo&quot;:{&quot;interactiveId&quot;:&quot;&quot;,&quot;videoId&quot;:&quot;&quot;}},&quot;price&quot;:&quot;11&quot;,&quot;quantity&quot;:1000,&quot;purchaseLocation&quot;:{&quot;isGlobalStock&quot;:&quot;false&quot;},&quot;descForPC&quot;:&quot;\" target=\"_blank\" rel=\"noopener\">http://119.29.143.126/alicdn.com/4011718250/TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpg&quot;,&quot;major&quot;:true,&quot;position&quot;:0}],&quot;imageVideo&quot;:{&quot;interactiveId&quot;:&quot;&quot;,&quot;videoId&quot;:&quot;&quot;}},&quot;price&quot;:&quot;11&quot;,&quot;quantity&quot;:1000,&quot;purchaseLocation&quot;:{&quot;isGlobalStock&quot;:&quot;false&quot;},&quot;descForPC&quot;:&quot;</a></p><p> 13213</p>“,”descForMobile”:[{“type”:”text”,”value”:” 13213”}],”deliverWay”:[1],”deliverTemplate”:15440272050,”afterSale”:{“sellPromise”:[1],”custom”:[3]},”subStockType”:1,”startTime”:{“startType”:0},”catId”:127666020,”itemId”:577320607928}<p></p>\n<p>改完后再完整的复制会原来的位置<br>点击下面的run to complete</p>\n<p>返回宝贝页面 的淘宝购买页 (宝贝详情最右边有个手机购买) 鼠标移过去 用手机扫码</p>\n"},{"title":"自定义百度云分享密码","date":"2018-08-30T03:39:24.000Z","comments":1,"_content":"\n### 动态图片展示\n\n![无法展示图片](http://web.xiaojw.xyz/blog_file/123.gif)\n\n```\njavascript:require([\"function-widget-1:share/util/service/createLinkShare.js\"]).prototype.makePrivatePassword=function(){return prompt(\"请输入自定义的密码\",\"1234\")}\n\n```\n\n### 使用方法：\n\n首先，选择要分享的文件，点击分享按钮。\n这时候，按F12打开控制台，切换至Console，输入代码按回车即可。\n\n然后点击创建私密链接，会弹出输入框，输入密码即可！\n\n注意使用代码前要先点一下分享按钮，相关模块才会载入，这时候用代码才有效果。\n\n转载自:流年似水博客\n转载自:[西门吹雪](http://xmcx.me/post-14.html)\n","source":"_posts/自定义百度云分享密码.md","raw":"---\ntitle: 自定义百度云分享密码\ndate: 2018-08-30 11:39:24\ncategories: ['其他'] \ntags: 其他\ncomments: true\n---\n\n### 动态图片展示\n\n![无法展示图片](http://web.xiaojw.xyz/blog_file/123.gif)\n\n```\njavascript:require([\"function-widget-1:share/util/service/createLinkShare.js\"]).prototype.makePrivatePassword=function(){return prompt(\"请输入自定义的密码\",\"1234\")}\n\n```\n\n### 使用方法：\n\n首先，选择要分享的文件，点击分享按钮。\n这时候，按F12打开控制台，切换至Console，输入代码按回车即可。\n\n然后点击创建私密链接，会弹出输入框，输入密码即可！\n\n注意使用代码前要先点一下分享按钮，相关模块才会载入，这时候用代码才有效果。\n\n转载自:流年似水博客\n转载自:[西门吹雪](http://xmcx.me/post-14.html)\n","slug":"自定义百度云分享密码","published":1,"updated":"2019-01-09T01:56:35.118Z","layout":"post","photos":[],"link":"","_id":"cjqojjnog001fuwkq0ect3i3p","content":"<h3 id=\"动态图片展示\"><a href=\"#动态图片展示\" class=\"headerlink\" title=\"动态图片展示\"></a>动态图片展示</h3><p><img src=\"http://web.xiaojw.xyz/blog_file/123.gif\" alt=\"无法展示图片\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javascript:require([&quot;function-widget-1:share/util/service/createLinkShare.js&quot;]).prototype.makePrivatePassword=function()&#123;return prompt(&quot;请输入自定义的密码&quot;,&quot;1234&quot;)&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用方法：\"><a href=\"#使用方法：\" class=\"headerlink\" title=\"使用方法：\"></a>使用方法：</h3><p>首先，选择要分享的文件，点击分享按钮。<br>这时候，按F12打开控制台，切换至Console，输入代码按回车即可。</p>\n<p>然后点击创建私密链接，会弹出输入框，输入密码即可！</p>\n<p>注意使用代码前要先点一下分享按钮，相关模块才会载入，这时候用代码才有效果。</p>\n<p>转载自:流年似水博客<br>转载自:<a href=\"http://xmcx.me/post-14.html\" target=\"_blank\" rel=\"noopener\">西门吹雪</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"动态图片展示\"><a href=\"#动态图片展示\" class=\"headerlink\" title=\"动态图片展示\"></a>动态图片展示</h3><p><img src=\"http://web.xiaojw.xyz/blog_file/123.gif\" alt=\"无法展示图片\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javascript:require([&quot;function-widget-1:share/util/service/createLinkShare.js&quot;]).prototype.makePrivatePassword=function()&#123;return prompt(&quot;请输入自定义的密码&quot;,&quot;1234&quot;)&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用方法：\"><a href=\"#使用方法：\" class=\"headerlink\" title=\"使用方法：\"></a>使用方法：</h3><p>首先，选择要分享的文件，点击分享按钮。<br>这时候，按F12打开控制台，切换至Console，输入代码按回车即可。</p>\n<p>然后点击创建私密链接，会弹出输入框，输入密码即可！</p>\n<p>注意使用代码前要先点一下分享按钮，相关模块才会载入，这时候用代码才有效果。</p>\n<p>转载自:流年似水博客<br>转载自:<a href=\"http://xmcx.me/post-14.html\" target=\"_blank\" rel=\"noopener\">西门吹雪</a></p>\n"},{"title":"解决vue不能使用锚标记时的方法","date":"2018-10-23T09:48:24.000Z","comments":1,"_content":"## 普通的锚标记转跳\n\n```bash\n<a href=\"#q\">转跳</a>\n\n<a name=\"q\">转跳到这</a>\n\n```\n\n## 以上方法不能转跳到对应位置的话,用这种\n```bash\n\n<div @click=\"returnTo('xxx')\">转跳</div>\n\n<div id=\"xxx\">转跳到这</h3>\n\n// methods 里\nreturnTo(name) {\n   document.querySelector(`#${name}`).scrollIntoView(true)\n}\n\n```","source":"_posts/解决vue不能使用锚标记时的方法.md","raw":"---\ntitle: 解决vue不能使用锚标记时的方法\ndate: 2018-10-23 17:48:24\ncategories: ['前端'] \ntags: 前端\ncomments: true\n---\n## 普通的锚标记转跳\n\n```bash\n<a href=\"#q\">转跳</a>\n\n<a name=\"q\">转跳到这</a>\n\n```\n\n## 以上方法不能转跳到对应位置的话,用这种\n```bash\n\n<div @click=\"returnTo('xxx')\">转跳</div>\n\n<div id=\"xxx\">转跳到这</h3>\n\n// methods 里\nreturnTo(name) {\n   document.querySelector(`#${name}`).scrollIntoView(true)\n}\n\n```","slug":"解决vue不能使用锚标记时的方法","published":1,"updated":"2018-10-24T03:04:45.345Z","layout":"post","photos":[],"link":"","_id":"cjqojjnoj001iuwkqv7v8mcjt","content":"<h2 id=\"普通的锚标记转跳\"><a href=\"#普通的锚标记转跳\" class=\"headerlink\" title=\"普通的锚标记转跳\"></a>普通的锚标记转跳</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=<span class=\"string\">\"#q\"</span>&gt;转跳&lt;/a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;a name=<span class=\"string\">\"q\"</span>&gt;转跳到这&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"以上方法不能转跳到对应位置的话-用这种\"><a href=\"#以上方法不能转跳到对应位置的话-用这种\" class=\"headerlink\" title=\"以上方法不能转跳到对应位置的话,用这种\"></a>以上方法不能转跳到对应位置的话,用这种</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;div @click=<span class=\"string\">\"returnTo('xxx')\"</span>&gt;转跳&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"xxx\"</span>&gt;转跳到这&lt;/h3&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// methods 里</span><br><span class=\"line\">returnTo(name) &#123;</span><br><span class=\"line\">   document.querySelector(`<span class=\"comment\">#$&#123;name&#125;`).scrollIntoView(true)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"普通的锚标记转跳\"><a href=\"#普通的锚标记转跳\" class=\"headerlink\" title=\"普通的锚标记转跳\"></a>普通的锚标记转跳</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=<span class=\"string\">\"#q\"</span>&gt;转跳&lt;/a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;a name=<span class=\"string\">\"q\"</span>&gt;转跳到这&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"以上方法不能转跳到对应位置的话-用这种\"><a href=\"#以上方法不能转跳到对应位置的话-用这种\" class=\"headerlink\" title=\"以上方法不能转跳到对应位置的话,用这种\"></a>以上方法不能转跳到对应位置的话,用这种</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;div @click=<span class=\"string\">\"returnTo('xxx')\"</span>&gt;转跳&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"xxx\"</span>&gt;转跳到这&lt;/h3&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// methods 里</span><br><span class=\"line\">returnTo(name) &#123;</span><br><span class=\"line\">   document.querySelector(`<span class=\"comment\">#$&#123;name&#125;`).scrollIntoView(true)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjqojjnmq0005uwkqewlswcoj","category_id":"cjqojjnmj0002uwkqnkjxiujo","_id":"cjqojjnne000duwkq6pzucyj3"},{"post_id":"cjqojjnm90000uwkql23yxb4x","category_id":"cjqojjnmj0002uwkqnkjxiujo","_id":"cjqojjnnj000iuwkqq9x0058o"},{"post_id":"cjqojjnmu0006uwkq23pki5wb","category_id":"cjqojjnmj0002uwkqnkjxiujo","_id":"cjqojjnnt000luwkq307jfjzp"},{"post_id":"cjqojjnmg0001uwkqibtab0vz","category_id":"cjqojjnmw0007uwkqttqwyek5","_id":"cjqojjnnw000quwkq7a09yq7w"},{"post_id":"cjqojjnn5000cuwkq0xa4zdxd","category_id":"cjqojjnmj0002uwkqnkjxiujo","_id":"cjqojjnny000tuwkqskl123yk"},{"post_id":"cjqojjnnh000huwkq9cyty62p","category_id":"cjqojjnmj0002uwkqnkjxiujo","_id":"cjqojjno1000wuwkql4jdyn3p"},{"post_id":"cjqojjnmm0004uwkqphulhixt","category_id":"cjqojjnmw0007uwkqttqwyek5","_id":"cjqojjno30011uwkqu8f50ph7"},{"post_id":"cjqojjnnk000kuwkqz2ejfjxj","category_id":"cjqojjnmj0002uwkqnkjxiujo","_id":"cjqojjno60014uwkqsq7p58vs"},{"post_id":"cjqojjnnv000puwkqzycreuar","category_id":"cjqojjnmj0002uwkqnkjxiujo","_id":"cjqojjno90017uwkq4g6ib5j2"},{"post_id":"cjqojjnn1000auwkq32nayvwm","category_id":"cjqojjnnt000muwkqzvktva4b","_id":"cjqojjnoc001auwkqda6i4q5f"},{"post_id":"cjqojjno0000vuwkqc0f7hn5w","category_id":"cjqojjnmj0002uwkqnkjxiujo","_id":"cjqojjnof001duwkqfp6wj1cb"},{"post_id":"cjqojjno20010uwkq11nnjxaj","category_id":"cjqojjnmj0002uwkqnkjxiujo","_id":"cjqojjnoi001guwkqsxw24le6"},{"post_id":"cjqojjno50013uwkq52arkhju","category_id":"cjqojjnmj0002uwkqnkjxiujo","_id":"cjqojjnok001juwkqqh47ymh1"},{"post_id":"cjqojjnnx000suwkql2mhqmak","category_id":"cjqojjno2000xuwkq04ujuy3s","_id":"cjqojjnol001luwkquhdtdafa"},{"post_id":"cjqojjno70016uwkqx0oh2o6k","category_id":"cjqojjnmj0002uwkqnkjxiujo","_id":"cjqojjnom001nuwkqmj4ivc0t"},{"post_id":"cjqojjnoa0019uwkqtwzfsd19","category_id":"cjqojjnnt000muwkqzvktva4b","_id":"cjqojjnom001puwkqcvvqebks"},{"post_id":"cjqojjnoe001cuwkqo34jvp39","category_id":"cjqojjnmw0007uwkqttqwyek5","_id":"cjqojjnon001ruwkqbvwg93r2"},{"post_id":"cjqojjnog001fuwkq0ect3i3p","category_id":"cjqojjnmw0007uwkqttqwyek5","_id":"cjqojjnoo001tuwkq9mwk8bv2"},{"post_id":"cjqojjnoj001iuwkqv7v8mcjt","category_id":"cjqojjnmj0002uwkqnkjxiujo","_id":"cjqojjnoo001uuwkqer9wap8x"}],"PostTag":[{"post_id":"cjqojjnmq0005uwkqewlswcoj","tag_id":"cjqojjnmm0003uwkqerlx63s5","_id":"cjqojjnn00009uwkq4epbyzbh"},{"post_id":"cjqojjnm90000uwkql23yxb4x","tag_id":"cjqojjnmm0003uwkqerlx63s5","_id":"cjqojjnn4000buwkqistc6n8w"},{"post_id":"cjqojjnmu0006uwkq23pki5wb","tag_id":"cjqojjnmm0003uwkqerlx63s5","_id":"cjqojjnnh000guwkqu1dbd1vv"},{"post_id":"cjqojjnmg0001uwkqibtab0vz","tag_id":"cjqojjnmx0008uwkqknecqrrc","_id":"cjqojjnnk000juwkqay995pa9"},{"post_id":"cjqojjnn5000cuwkq0xa4zdxd","tag_id":"cjqojjnmm0003uwkqerlx63s5","_id":"cjqojjnnv000ouwkqr9g15jdr"},{"post_id":"cjqojjnnh000huwkq9cyty62p","tag_id":"cjqojjnmm0003uwkqerlx63s5","_id":"cjqojjnnx000ruwkqsy0b8cqk"},{"post_id":"cjqojjnmm0004uwkqphulhixt","tag_id":"cjqojjnmx0008uwkqknecqrrc","_id":"cjqojjnnz000uuwkqj72vovsf"},{"post_id":"cjqojjnnk000kuwkqz2ejfjxj","tag_id":"cjqojjnmm0003uwkqerlx63s5","_id":"cjqojjno2000zuwkq9qgfl0hr"},{"post_id":"cjqojjnnv000puwkqzycreuar","tag_id":"cjqojjnmm0003uwkqerlx63s5","_id":"cjqojjno40012uwkqa96m671z"},{"post_id":"cjqojjnn1000auwkq32nayvwm","tag_id":"cjqojjnnu000nuwkqqkglm56w","_id":"cjqojjno70015uwkqi5gbdle7"},{"post_id":"cjqojjno0000vuwkqc0f7hn5w","tag_id":"cjqojjnmm0003uwkqerlx63s5","_id":"cjqojjnoa0018uwkq68q8c5ty"},{"post_id":"cjqojjno20010uwkq11nnjxaj","tag_id":"cjqojjnmm0003uwkqerlx63s5","_id":"cjqojjnod001buwkqngk9x2ju"},{"post_id":"cjqojjno50013uwkq52arkhju","tag_id":"cjqojjnmm0003uwkqerlx63s5","_id":"cjqojjnog001euwkqzxgx32r2"},{"post_id":"cjqojjnnx000suwkql2mhqmak","tag_id":"cjqojjno2000yuwkq85n80qls","_id":"cjqojjnoi001huwkq96iaykzu"},{"post_id":"cjqojjno70016uwkqx0oh2o6k","tag_id":"cjqojjnmm0003uwkqerlx63s5","_id":"cjqojjnol001kuwkqqfc41ydq"},{"post_id":"cjqojjnoa0019uwkqtwzfsd19","tag_id":"cjqojjnnu000nuwkqqkglm56w","_id":"cjqojjnom001muwkqmhwzvyw6"},{"post_id":"cjqojjnoe001cuwkqo34jvp39","tag_id":"cjqojjnmx0008uwkqknecqrrc","_id":"cjqojjnom001ouwkqi6a1cluc"},{"post_id":"cjqojjnog001fuwkq0ect3i3p","tag_id":"cjqojjnmx0008uwkqknecqrrc","_id":"cjqojjnon001quwkq8tmwfgmk"},{"post_id":"cjqojjnoj001iuwkqv7v8mcjt","tag_id":"cjqojjnmm0003uwkqerlx63s5","_id":"cjqojjnoo001suwkq4gm8igxr"}],"Tag":[{"name":"前端","_id":"cjqojjnmm0003uwkqerlx63s5"},{"name":"其他","_id":"cjqojjnmx0008uwkqknecqrrc"},{"name":"后端","_id":"cjqojjnnu000nuwkqqkglm56w"},{"name":"服务器","_id":"cjqojjno2000yuwkq85n80qls"}]}}