{"meta":{"title":"个人博客-xiaojinwen","subtitle":"xiaojinwen","description":"个人日常","author":"xiaojinwen","url":"https://xiaojinwen.github.io"},"pages":[],"posts":[{"title":"vue的url去掉难看的井号并解决相关问题","slug":"去掉vue的url中难看的井号并解决相关问题","date":"2018-09-19T08:26:10.000Z","updated":"2018-09-19T09:02:22.756Z","comments":true,"path":"2018/09/19/去掉vue的url中难看的井号并解决相关问题/","link":"","permalink":"https://xiaojinwen.github.io/2018/09/19/去掉vue的url中难看的井号并解决相关问题/","excerpt":"","text":"一、首先在路由文件配置history模式12345678910// 增加 mode: 'history'export default new Router(&#123; mode: 'history', routes: [ &#123; path: '/', redirect: '/login' &#125; ]&#125;) 二、使用history后一切都正常,唯有刷新浏览器的时候就不会加载了因为刷新后 服务器上没有对应的静态页对应 解决 将服务器上路径设置对应的定向 后端配置例子Apache12345678&lt;IfModule mod_rewrite.c&gt; RewriteEngine On RewriteBase / RewriteRule ^index\\.html$ - [L] RewriteCond %&#123;REQUEST_FILENAME&#125; !-f RewriteCond %&#123;REQUEST_FILENAME&#125; !-d RewriteRule . /index.html [L]&lt;/IfModule&gt; 除了 mod_rewrite，你也可以使用 FallbackResource nginx123location / &#123; try_files $uri $uri/ /index.html;&#125; 原生 Node.js12345678910111213141516171819const http = require('http')const fs = require('fs')const httpPort = 80http.createServer((req, res) =&gt; &#123; fs.readFile('index.htm', 'utf-8', (err, content) =&gt; &#123; if (err) &#123; console.log('We cannot open \"index.htm\" file.') &#125; res.writeHead(200, &#123; 'Content-Type': 'text/html; charset=utf-8' &#125;) res.end(content) &#125;)&#125;).listen(httpPort, () =&gt; &#123; console.log('Server listening on: http://localhost:%s', httpPort)&#125;) 基于 Node.js 的 Express对于 Node.js/Express，请考虑使用connect-history-api-fallback 中间件 12345678910111213const express = require('express');const history = require('connect-history-api-fallback');const app = express();app.use(history( &#123; htmlAcceptHeaders: ['text/html', 'application/xhtml+xml'] &#125;));app.use(express.static('dist'));const server = app.listen(3002, function () &#123; const port = server.address().port; console.log(`listening at http://localhost:$&#123;port&#125;`);&#125;); Internet Information Services (IIS)1.安装 IIS UrlRewrite2.在你的网站根目录中创建一个web.config文件，内容如下：1234567891011121314151617&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;configuration&gt; &lt;system.webServer&gt; &lt;rewrite&gt; &lt;rules&gt; &lt;rule name=\"Handle History Mode and custom 404/500\" stopProcessing=\"true\"&gt; &lt;match url=\"(.*)\" /&gt; &lt;conditions logicalGrouping=\"MatchAll\"&gt; &lt;add input=\"&#123;REQUEST_FILENAME&#125;\" matchType=\"IsFile\" negate=\"true\" /&gt; &lt;add input=\"&#123;REQUEST_FILENAME&#125;\" matchType=\"IsDirectory\" negate=\"true\" /&gt; &lt;/conditions&gt; &lt;action type=\"Rewrite\" url=\"/\" /&gt; &lt;/rule&gt; &lt;/rules&gt; &lt;/rewrite&gt; &lt;/system.webServer&gt;&lt;/configuration&gt; Caddy1234rewrite &#123; regexp .* to &#123;path&#125; /&#125; Firebase 主机在你的firebase.json中加入：1234567891011&#123; \"hosting\": &#123; \"public\": \"dist\", \"rewrites\": [ &#123; \"source\": \"**\", \"destination\": \"/index.html\" &#125; ] &#125;&#125; 警告因为这么做以后，你的服务器就不再返回 404 错误页面，因为对于所有路径都会返回 index.html 文件。为了避免这种情况，你应该在 Vue 应用里面覆盖所有的路由情况，然后在给出一个 404 页面。123456const router = new VueRouter(&#123; mode: 'history', routes: [ &#123; path: '*', component: NotFoundComponent &#125; ]&#125;) 或者，如果你使用 Node.js 服务器，你可以用服务端路由匹配到来的 URL，并在没有匹配到路由的时候返回 404，以实现回退。更多详情请查阅 Vue 服务端渲染文档。","categories":[{"name":"前端","slug":"前端","permalink":"https://xiaojinwen.github.io/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://xiaojinwen.github.io/tags/前端/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"https://xiaojinwen.github.io/categories/前端/"}]},{"title":"关于vue中修改UI库样式的坑","slug":"关于vue中修改UI库样式的坑","date":"2018-09-19T03:57:01.000Z","updated":"2018-09-19T04:15:18.889Z","comments":true,"path":"2018/09/19/关于vue中修改UI库样式的坑/","link":"","permalink":"https://xiaojinwen.github.io/2018/09/19/关于vue中修改UI库样式的坑/","excerpt":"","text":"一、怎么修改样式都不生效，在浏览器上改就能生效原因一: style标签加了scoped属性&lt;style scoped&gt;,去掉即可12&lt;style&gt;&lt;/style&gt; 原因二: 那就是选择器没选中咯,检查检查二、修改样式后影响了其他组件的样式原因:直接在UI组件上加的样式解决:在外层再套一层标签 加上限制,便不会影响全局了例:123456789101112131415---------------------template---------------------&lt;div class=\"elinput\"&gt; &lt;el-input v-model=\"form.VerificationCode\" placeholder=\"输入验证码\" auto-complete=\"ture\"&gt;&lt;/el-input&gt;&lt;/div&gt;---------------------style---------------------.elinput .el-input&#123;// 写样式&#125;","categories":[{"name":"前端","slug":"前端","permalink":"https://xiaojinwen.github.io/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://xiaojinwen.github.io/tags/前端/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"https://xiaojinwen.github.io/categories/前端/"}]},{"title":"淘宝主图换图技术","slug":"淘宝主图换图技术","date":"2018-09-12T10:18:39.000Z","updated":"2018-09-12T10:38:39.282Z","comments":true,"path":"2018/09/12/淘宝主图换图技术/","link":"","permalink":"https://xiaojinwen.github.io/2018/09/12/淘宝主图换图技术/","excerpt":"","text":"淘宝主图换图技术(包更新),认准QQ:1058330410,视频教程需要过几天发布简单原理抓包修改抓包的提交主图的url,改为访问服务器服务器根据,是否为pc,mobile,显示不同的图片提交修改内容到对应接口 一、发布商品并把在淘宝图片空间选择的主图链接复制到这（这图就是pc端显示的）pc：https://img.alicdn.com/imgextra/i3/4011718250/TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpg 同样在淘宝图片空间选择一张图片（移动端要显示的图片）复制链接，到这 mobile：https://img.alicdn.com/imgextra/i4/4011718250/TB25IdCpWAoBKNjSZSyXXaHAVXa_!!4011718250.jpg 二、进入服务器地址: http://119.29.143.126:3002/ ,登录账号密码(一个店铺一个账号)(需要账号联系我)，选择创建链接，填写PC端图片名称（既pc端的图片链接对应的部分）：TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpgPC端的图片：https://img.alicdn.com/imgextra/i3/4011718250/TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpg移动端要显示的图片： https://img.alicdn.com/imgextra/i4/4011718250/TB25IdCpWAoBKNjSZSyXXaHAVXa_!!4011718250.jpg 点击立即增加按钮，增加成功后点击复制代码：复制到这例http://119.29.143.126/alicdn.com/4011718250/TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpg 三、下载并打开fiddler软件（百度就能搜索到）（安装后在开始那里可以找到软件）配置fiddler： 点击选项Tools-options-Https 勾选Decrypt Https traffic 弹出时全部点确认就行 再勾选 Ignore server certificate errors(unsafe)接着进去淘宝商家出售中宝贝-&gt;编辑宝贝-&gt;清空fiddler-&gt;再点击发布宝贝,回到fiddler找到绿色箭头upload.taobao.com这行 右键选择Replay-reissue and Edit 右边选项卡 选择webForm 将Body 里的dataBody 的内容剪切出来 {“stuffStatus”:5,”title”:”2018测试双图”,”multiMedia”:{“image”:[{“url”:”https://img.alicdn.com/imgextra/i3/4011718250/TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpg&quot;,&quot;major&quot;:true,&quot;position&quot;:0}],&quot;imageVideo&quot;:{&quot;interactiveId&quot;:&quot;&quot;,&quot;videoId&quot;:&quot;&quot;}},&quot;price&quot;:&quot;11&quot;,&quot;quantity&quot;:1000,&quot;purchaseLocation&quot;:{&quot;isGlobalStock&quot;:&quot;false&quot;},&quot;descForPC&quot;:&quot; 13213“,”descForMobile”:[{“type”:”text”,”value”:” 13213”}],”deliverWay”:[1],”deliverTemplate”:15440272050,”afterSale”:{“sellPromise”:[1],”custom”:[3]},”subStockType”:1,”startTime”:{“startType”:0},”catId”:127666020,”itemId”:577320607928} 将url:后面的链接替换为重网站上复制的链接例如:{“stuffStatus”:5,”title”:”2018.9主图双图”,”multiMedia”:{“image”:[{“url”:”http://119.29.143.126/alicdn.com/4011718250/TB27z3RtEOWBKNjSZKzXXXfWFXa_!!4011718250.jpg&quot;,&quot;major&quot;:true,&quot;position&quot;:0}],&quot;imageVideo&quot;:{&quot;interactiveId&quot;:&quot;&quot;,&quot;videoId&quot;:&quot;&quot;}},&quot;price&quot;:&quot;11&quot;,&quot;quantity&quot;:1000,&quot;purchaseLocation&quot;:{&quot;isGlobalStock&quot;:&quot;false&quot;},&quot;descForPC&quot;:&quot; 13213“,”descForMobile”:[{“type”:”text”,”value”:” 13213”}],”deliverWay”:[1],”deliverTemplate”:15440272050,”afterSale”:{“sellPromise”:[1],”custom”:[3]},”subStockType”:1,”startTime”:{“startType”:0},”catId”:127666020,”itemId”:577320607928} 改完后再完整的复制会原来的位置点击下面的run to complete 返回宝贝页面 的淘宝购买页 (宝贝详情最右边有个手机购买) 鼠标移过去 用手机扫码","categories":[{"name":"其他","slug":"其他","permalink":"https://xiaojinwen.github.io/categories/其他/"}],"tags":[{"name":"其他","slug":"其他","permalink":"https://xiaojinwen.github.io/tags/其他/"}],"keywords":[{"name":"其他","slug":"其他","permalink":"https://xiaojinwen.github.io/categories/其他/"}]},{"title":"关于列表水平展示的方法","slug":"关于列表水平展示的方法","date":"2018-09-07T10:38:22.000Z","updated":"2018-09-07T10:59:01.060Z","comments":true,"path":"2018/09/07/关于列表水平展示的方法/","link":"","permalink":"https://xiaojinwen.github.io/2018/09/07/关于列表水平展示的方法/","excerpt":"","text":"一、使用float:left; 或 float:right这个方法水平排列起来简单 只需1float:left; 但是会引起一些不必要的问题: 父级盒子没有float部分的高度,因为float脱离了标准文档流解决办法可以设置父级的高,清理浮动,清理浮动的方式有很多,推荐使用伪类清理法123456789101112&lt;div class ='clearfix'&gt;&lt;/div&gt;.clearfix::after &#123; content: \".\"; clear: both; display: block; overflow: hidden; font-size: 0; height: 0;&#125;// 为兼容IE6,IE7，因为ie6,ie7不能用after伪类。加上下面代码.clearfix&#123;zoom:1&#125; 二、设置元素为行内块元素在需要水平排列的地方1display: inline-block; 三、使用flex布局在需要水平排列的父布局中 12display: flex;// flex-wrap: wrap; /*超出宽度强制换行*/ 在子布局中 12flex: 1;// 更多参数选择请自行百度 flex","categories":[{"name":"前端","slug":"前端","permalink":"https://xiaojinwen.github.io/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://xiaojinwen.github.io/tags/前端/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"https://xiaojinwen.github.io/categories/前端/"}]},{"title":"数组与字符串的那些相似方法","slug":"数组与字符串的那些相似方法","date":"2018-09-04T08:22:16.000Z","updated":"2018-09-04T10:14:08.623Z","comments":true,"path":"2018/09/04/数组与字符串的那些相似方法/","link":"","permalink":"https://xiaojinwen.github.io/2018/09/04/数组与字符串的那些相似方法/","excerpt":"","text":"一、字符串方法1、slice() 提取字符串的片断，并在新的字符串中返回被提取的部分。12345678stringObject.slice(start,end) // start 起始下标 负数时,从尾部开始算起位置: -1 最后,-2 倒数二// end 结束下标 省略时,表示到最后,负数时,同上// e.g.var str=\"Hello happy world!\"console.log(str.slice(6))// happy world! 2、substr() 从起始索引号提取字符串中指定数目的字符。(不建议使用 ECMAscript没有对该方法进行标准化)12345678stringObject.substr(start,length)// start 必须 起始下标,num 负数时,从尾部开始算起位置: -1 最后,-2 倒数二// length 可选 长度,num 省略时,表示到最后// e.g.var str=\"Hello world!\"console.log(str.substr(3))// lo world! 3、substring() 提取字符串中两个指定的索引号之间的字符。1234567891011stringObject.substring(start,stop)// start 必须 非负整 起始下标,num// stop 可选 非负整 比要提取位置+1 省略时,表示到最后// e.g.var str=\"Hello world!\"console.log(str.substring(3))console.log(str.substring(3,7))// lo world!// lo w 4、concat() 连接字符串。1234567stringObject.concat(stringX,stringX,...,stringX)// e.g.var str1=\"Hello \"var str2=\"world!\"console.log(str1.concat(str2))// Hello world! 5、split() 把字符串分割为字符串数组。123stringObject.split(separator,howmany)// separator 必需 字符串或正则 切割符号// howmany 可选 最大返回长度 省略忽视最大返回长度 注：如果把空字符串 (“”) 用作 separator，那么 stringObject 中的每个字符之间都会被分割注：String.split()与 Array.join 执行的操作是相反的 6、others1234567891011121314charAt() 返回在指定位置的字符。indexOf() 检索字符串。返回位置lastIndexOf() 从后向前搜索字符串。返回位置match() 找到一个或多个正则表达式的匹配。replace() 替换与正则表达式匹配的子串。search() 检索与正则表达式相匹配的值。sub() 把字符串显示为下标。sup() 把字符串显示为上标。toLocaleLowerCase() 把字符串转换为小写。toLocaleUpperCase() 把字符串转换为大写。toLowerCase() 把字符串转换为小写。toUpperCase() 把字符串转换为大写。toString() 返回字符串。valueOf() 返回某个字符串对象的原始值。 二、数组方法1、concat() 连接两个或更多的数组，并返回结果。1234567arrayObject.concat(arrayX,arrayX,......,arrayX)// e.g.var arr1=['hello'];var arr2=['world!'];console.log(arr1.concat(arr2))// ['Hello','world!'] 2、slice() 从某个已有的数组返回选定的元素(不修改原数组)1234567891011arrayObject.slice(start,end)// start 必需 起始下标 负数时,从尾部开始算起位置: -1 最后,-2 倒数二// end 可选 结束下标 省略时,表示到最后,负数时,同上// e.g.var arr=['thank','you','very','math'];console.log(arr.slice(2,3))console.log(arr)// ['very']// ['thank','you','very','math'] 3、splice() 删除元素，并向数组添加新元素(改变原数组)123456789101112arrayObject.splice(index,howmany,item1,.....,itemX)// index 必需 起始下标 负数时,从尾部开始算起位置: -1 最后,-2 倒数二// howmany 可选 删除数量 0:不删// item1,.....,itemX 可选 增加新项// e.g.var arr=['thank','you','very','math'];console.log(arr.splice(1,1,'xjw'))console.log(arr)// ['you']// ['thank','xjw','very','math'] 4、others123456789join() 把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。pop() 删除并返回数组的最后一个元素push() 向数组的末尾添加一个或更多元素，并返回新的长度。shift() 删除并返回数组的第一个元素unshift() 向数组的开头添加一个或更多元素，并返回新的长度。reverse() 颠倒数组中元素的顺序。sort() 对数组的元素进行排序 注:a-b 正数换位置toString() 把数组转换为字符串，并返回结果。valueOf() 返回数组对象的原始值 三、字符串与数据都有的方法1.slice()2.concat()","categories":[{"name":"前端","slug":"前端","permalink":"https://xiaojinwen.github.io/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://xiaojinwen.github.io/tags/前端/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"https://xiaojinwen.github.io/categories/前端/"}]},{"title":"phpMyAdmin无法登陆解决","slug":"phpMyAdmin无法登陆解决","date":"2018-08-31T03:53:39.000Z","updated":"2018-08-31T05:08:33.735Z","comments":true,"path":"2018/08/31/phpMyAdmin无法登陆解决/","link":"","permalink":"https://xiaojinwen.github.io/2018/08/31/phpMyAdmin无法登陆解决/","excerpt":"","text":"问题ERROR 1045 (28000): Access denied for user ‘root‘@’localhost’ (using password: NO)ERROR 1045 (28000): Access denied for user ‘root‘@’localhost’ (using password: YES) 解析通常这种情况是没有设置密码或者密码错误导致的 解决首先确定 相关端口打开了 3306 888(默认) 1.关闭mysql 1/bin/systemctl stop mysql.service or1/etc/init.d/mysql stop 2.在mysql关闭的情况下： 1/bin/systemctl stop mysql.service --skip-grant-tables or1/etc/init.d/mysql start --skip-grant-tables 3.连接mysql,进入mysql命令行12345mysql -u root -p ## 出现password：的时候直接回车可以进入。mysql&gt; use mysql; Database changedmysql&gt; update user set password=password(\"123456\") where user=\"root\"; # 给root用户设置新密码mysql&gt; flush privileges; # 刷新数据库mysql&gt; quitBye # 退出mysql 改好之后,重启mysql服务就可以了。去掉这句 --skip-grant-tables","categories":[{"name":"后端","slug":"后端","permalink":"https://xiaojinwen.github.io/categories/后端/"}],"tags":[{"name":"后端","slug":"后端","permalink":"https://xiaojinwen.github.io/tags/后端/"}],"keywords":[{"name":"后端","slug":"后端","permalink":"https://xiaojinwen.github.io/categories/后端/"}]},{"title":"使用canvas画环形进度条","slug":"使用canvas画环形进度条","date":"2018-08-30T11:07:06.000Z","updated":"2018-09-12T10:20:39.660Z","comments":true,"path":"2018/08/30/使用canvas画环形进度条/","link":"","permalink":"https://xiaojinwen.github.io/2018/08/30/使用canvas画环形进度条/","excerpt":"","text":"效果展示 html1234&lt;canvas id=\"myCanvas\" width=\"300\" height=\"150\" style=\"border:1px solid #d3d3d3;\"&gt; Your browser does not support the HTML5 canvas tag.&lt;/canvas&gt; js1234567891011121314151617181920212223242526let canvas = document.getElementById('myCanvas')let ctx = canvas.getContext('2d')// 绘制 灰色层 底层ctx.beginPath()ctx.arc(100, 75, 50, 0, 2 * Math.PI)ctx.lineWidth = 10ctx.strokeStyle = \"#eee\";ctx.stroke()// 绘制 蓝色层 进度层ctx.beginPath()ctx.arc(100, 75, 50, -Math.PI / 2, 0)ctx.lineWidth = 10ctx.strokeStyle = \"#489cff\";ctx.stroke()// 绘制文字层ctx.font = \"20px Verdana\";/* 渐变let gradient = ctx.createLinearGradient(0, 0, canvas.width, 0);gradient.addColorStop(0, \"magenta\");gradient.addColorStop(0.5, \"blue\");gradient.addColorStop(1, \"red\");ctx.fillStyle = gradient;*/ctx.fillStyle = \"#666\";ctx.fillText(\"25%\", 80, 84)","categories":[{"name":"前端","slug":"前端","permalink":"https://xiaojinwen.github.io/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://xiaojinwen.github.io/tags/前端/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"https://xiaojinwen.github.io/categories/前端/"}]},{"title":"自定义百度云分享密码","slug":"自定义百度云分享密码","date":"2018-08-30T03:39:24.000Z","updated":"2018-09-12T10:20:19.487Z","comments":true,"path":"2018/08/30/自定义百度云分享密码/","link":"","permalink":"https://xiaojinwen.github.io/2018/08/30/自定义百度云分享密码/","excerpt":"","text":"动态图片展示 1javascript:require([&quot;function-widget-1:share/util/service/createLinkShare.js&quot;]).prototype.makePrivatePassword=function()&#123;return prompt(&quot;请输入自定义的密码&quot;,&quot;1234&quot;)&#125; 使用方法：首先，选择要分享的文件，点击分享按钮。这时候，按F12打开控制台，切换至Console，输入代码按回车即可。 然后点击创建私密链接，会弹出输入框，输入密码即可！ 注意使用代码前要先点一下分享按钮，相关模块才会载入，这时候用代码才有效果。 转载自:流年似水博客转载自:西门吹雪","categories":[{"name":"其他","slug":"其他","permalink":"https://xiaojinwen.github.io/categories/其他/"}],"tags":[{"name":"其他","slug":"其他","permalink":"https://xiaojinwen.github.io/tags/其他/"}],"keywords":[{"name":"其他","slug":"其他","permalink":"https://xiaojinwen.github.io/categories/其他/"}]},{"title":"动态路由-路由访问权限","slug":"动态路由-路由访问权限","date":"2018-08-30T02:42:53.000Z","updated":"2018-08-30T09:43:42.000Z","comments":true,"path":"2018/08/30/动态路由-路由访问权限/","link":"","permalink":"https://xiaojinwen.github.io/2018/08/30/动态路由-路由访问权限/","excerpt":"","text":"动态路由控制权限 参考文章12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485login.vuelet dR = new Array();for (let i = 0; i &lt; dynamicRouter.length; i++) &#123; //第一层循环遍历动态路由表的每一个路由 let aside_list = this.aside_list for (let j = 0; j &lt; aside_list.length; j++) &#123; if (dynamicRouter[i].path === aside_list[j].path &amp;&amp; aside_list[j].isShow) &#123; // console.log(dynamicRouter[i]) dR.push(dynamicRouter[i]); // 符合条件的路由信息就放进数组里 if (!this.xjw) &#123; // this.firstShowPath = dynamicRouter[i] dR.push(dynamicRouter[2]); this.xjw = true &#125; &#125; else if (aside_list[j].path.indexOf('x') &amp;&amp; aside_list[j].isShow) &#123; if (!this.first) &#123; // 符合条件的路由的福袋必须访问的路由就放进数组里 dR.push(dynamicRouter[0]); dR.push(dynamicRouter[1]); this.first = true &#125; &#125; else if ( (aside_list[j].path.indexOf('xx') || aside_list[j].path.indexOf('xxx') || aside_list[j].path.indexOf('xxxx')) &amp;&amp; aside_list[j].isShow) &#123; if (!this.second) &#123; dR.push(dynamicRouter[1]); this.second = true &#125; &#125; &#125;&#125;this.xjw = nullthis.first = nullthis.second = null// console.log(dR)this.$router.addRoutes(dR.concat([&#123; //这里调用addRoutes方法，动态添加符合条件的路由 path: '*', redirect: '/404' //所有不匹配路径(*)都重定向到404，为什么写在这里而不放到静态路由表里可以查看“前端路上”的文章&#125;]));this.$router.push(this.firstShowPath); APP.vue// 获取登录状态if (!isLogin) &#123; return this.$router.push('/login');&#125; else &#123; let dR = new Array(); for (let i = 0; i &lt; dynamicRouter.length; i++) &#123; let aside_list = this.get_aside_list.aside_list // console.log(dynamicRouter[i]) for (let j = 0; j &lt; aside_list.length; j++) &#123; if (dynamicRouter[i].path === aside_list[j].path &amp;&amp; aside_list[j].isShow) &#123; // console.log(dynamicRouter[i]) dR.push(dynamicRouter[i]); //符合条件的路由信息就放进数组里 if (!this.xjw) &#123; dR.push(dynamicRouter[2]); this.xjw = true &#125; &#125; else if (aside_list[j].path.indexOf('x') &amp;&amp; aside_list[j].isShow) &#123; if (!this.first) &#123; dR.push(dynamicRouter[0]); dR.push(dynamicRouter[1]); this.first = true &#125; &#125; else if ( (aside_list[j].path.indexOf('xx') || aside_list[j].path.indexOf('xxx') || aside_list[j].path.indexOf('xxxx')) &amp;&amp; aside_list[j].isShow) &#123; if (!this.second) &#123; dR.push(dynamicRouter[1]); this.second = true &#125; &#125; &#125; &#125; this.xjw = null this.first = null this.second = null // console.log(dR) this.$router.addRoutes(dR);","categories":[{"name":"前端","slug":"前端","permalink":"https://xiaojinwen.github.io/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://xiaojinwen.github.io/tags/前端/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"https://xiaojinwen.github.io/categories/前端/"}]},{"title":"hexo 常用命令","slug":"hexo 常用命令","date":"2018-08-30T02:39:24.000Z","updated":"2018-08-31T05:30:55.470Z","comments":true,"path":"2018/08/30/hexo 常用命令/","link":"","permalink":"https://xiaojinwen.github.io/2018/08/30/hexo 常用命令/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment 列出已安装依赖(局部/全局)12$ npm ls --depth 0 $ npm ls --depth 0 -g","categories":[{"name":"其他","slug":"其他","permalink":"https://xiaojinwen.github.io/categories/其他/"}],"tags":[{"name":"其他","slug":"其他","permalink":"https://xiaojinwen.github.io/tags/其他/"}],"keywords":[{"name":"其他","slug":"其他","permalink":"https://xiaojinwen.github.io/categories/其他/"}]},{"title":"删除服务器乱码文件/目录","slug":"删除服务器乱码文件","date":"2018-08-30T02:20:58.000Z","updated":"2018-08-30T09:43:42.000Z","comments":true,"path":"2018/08/30/删除服务器乱码文件/","link":"","permalink":"https://xiaojinwen.github.io/2018/08/30/删除服务器乱码文件/","excerpt":"","text":"方法一1.使用 ls -li 命令得到乱码文件的 inode 值1$ ls -li 2.使用 find . -inum 24609 -exec rm {} -rf \\; 命令删除乱码文件.其中24609替换为乱码文件的inode值. 注意空格 中英文符号\\;等1$ find . -inum 24609 -exec rm &#123;&#125; -rf \\; 方法二1.使用rm -rf 删除上一级目录，当然前提是需要备份你需要备份的数据.123456789101112131415一种思路：1. 比如/home下文件夹内含有乱码的文件2. mkdir tmp3. 将所有的文件首先移动到 mv * tmp/4.到tmp下 把所有有正常的显示字符的文件移动出来cd tmp ;mv [a-zA-Z0-9]* ..5.现在可以 rm -rf tmp 了","categories":[{"name":"服务器","slug":"服务器","permalink":"https://xiaojinwen.github.io/categories/服务器/"}],"tags":[{"name":"服务器","slug":"服务器","permalink":"https://xiaojinwen.github.io/tags/服务器/"}],"keywords":[{"name":"服务器","slug":"服务器","permalink":"https://xiaojinwen.github.io/categories/服务器/"}]},{"title":"文件管理php","slug":"文件管理php","date":"2018-08-30T01:27:59.000Z","updated":"2018-08-30T09:43:42.000Z","comments":true,"path":"2018/08/30/文件管理php/","link":"","permalink":"https://xiaojinwen.github.io/2018/08/30/文件管理php/","excerpt":"","text":"有些代码不是自己写的 所以格式不太同lt;?phpfunction fileAdir($dir) &#123; if (!is_dir($dir))&#123; mkdir($dir); chmod($dir,0777); $data = scandir(&quot;$dir&quot;); $allFile = array(); foreach ($data as $file) &#123; if($file != &apos;.&apos; &amp;&amp; $file != &apos;..&apos;) &#123; //判断是否是文件夹内的文件夹 $a = array( &apos;file&apos;=&gt;$file, &apos;isDir&apos;=&gt;is_dir($dir. &apos;/&apos; .$file), &apos;name&apos;=&gt;$dir . &apos;/&apos; .$file ); array_push($allFile, $a); &#125; &#125; return $allFile; &#125; else&#123; $data = scandir(&quot;$dir&quot;); $allFile = array(); foreach ($data as $file) &#123; if($file != &apos;.&apos; &amp;&amp; $file != &apos;..&apos;) &#123; //判断是否是文件夹内的文件夹 $a = array( &apos;file&apos;=&gt;$file, &apos;isDir&apos;=&gt;is_dir($dir. &apos;/&apos; .$file), &apos;name&apos;=&gt;$dir . &apos;/&apos; .$file ); array_push($allFile, $a); &#125; &#125; return $allFile; &#125;&#125;/** 读取文件类 **/class file &#123; public $file; public $filename; //文件名字 public $filetype; //文件类型 public $filesize; //文件大小 public $fileopen; //打开文件 public $fileread; //读取文件 //写入变量 public $filepath; public $filecontent; //保存文件用到的文件内容 public $fileput; //文件写入 public function edits($files)&#123; $this-&gt;file = $files; if(!file_exists($this-&gt;file))&#123; die(&quot;文件不存在！&quot;); &#125; $this-&gt;fileopen = fopen($this-&gt;file, &apos;r&apos;); if(!$this-&gt;fileopen)&#123; die(&quot;文件读取失败&quot;); &#125; //$this-&gt;fileread = htmlspecialchars($this-&gt;fileread); //开始获取文件的后缀名 $filestr = strlen($this-&gt;file); $filepoint = strrpos($this-&gt;file, &apos;.&apos;); $filesub = substr($this-&gt;file, $filepoint+1); $this-&gt;filetype = $filesub; $this-&gt;filename = basename($this-&gt;file); $this-&gt;filesize = filesize($this-&gt;file); if($this-&gt;filesize===0)&#123; return array( &apos;filetype&apos;=&gt;$this-&gt;filetype, &apos;filename&apos;=&gt;$this-&gt;filename, &apos;filecontent&apos;=&gt;&apos;&apos;, &apos;filepath&apos;=&gt;$this-&gt;file ); exit; &#125; $this-&gt;fileread = fread($this-&gt;fileopen,$this-&gt;filesize); // 读取中文 //$this-&gt;fileread =iconv(&apos;gb2312&apos;, &apos;utf-8&apos;, $this-&gt;fileread); //以数组形式返回：文件类型 文件名称 文件内容 文件路径 return array( &apos;filetype&apos;=&gt;$this-&gt;filetype, &apos;filename&apos;=&gt;$this-&gt;filename, &apos;filecontent&apos;=&gt;$this-&gt;fileread, &apos;filepath&apos;=&gt;$this-&gt;file ); //关闭文件 fclose($this-&gt;file); &#125; /* 修改文件函数 */ public function bc($filepath,$filecontent)&#123; $this-&gt;filepath = $filepath; //访问文件 $this-&gt;fileopen = file_get_contents($this-&gt;filepath); if(!$this-&gt;fileopen)&#123; //die(&apos;文件打开失败&apos;); &#125; //获取传进来的文件内容 $this-&gt;filecontent = $filecontent; //反转义html //$this-&gt;filecontent = htmlspecialchars_decode($this-&gt;filecontent); //写入文件 $this-&gt;fileput = file_put_contents($this-&gt;filepath, $this-&gt;filecontent); if($this-&gt;fileput)&#123; return &apos;修改文件成功&apos;; &#125;else &#123; return &apos;修改文件失败&apos;; &#125; &#125; // 创建文件夹 public function create_folder($dir) &#123; if (!file_exists($dir))&#123; //mkdir($dir,0777,true); mkdir($dir); chmod($dir,0777); return &apos;创建文件夹成功&apos;; &#125; else &#123; return &apos;创建文件夹已存在&apos;; &#125; &#125; // 创建文件 public function create_file($dir) &#123; if (!file_exists($dir))&#123; $handle = fopen($dir, &apos;w&apos;); chmod($dir,0777); if($handle)&#123; return &apos;创建文件成功&apos;; &#125; else&#123; return &apos;创建文件失败&apos;; &#125; &#125; else &#123; return &apos;需创建的文件已经存在&apos;; &#125; &#125; // 重命名文件/文件夹 public function fileRename($old_name,$new_name) &#123; if(!file_exists($new_name)||file_exists($old_name))&#123; $result = rename($old_name,$new_name); if($result)&#123; return &apos;重命名成功&apos;; &#125; else&#123; return &apos;重命名失败&apos;; &#125; &#125; else &#123; return &apos;目标文件已存在或原文件不存在&apos;; &#125; &#125; // 复制文件夹及文件夹下文件 public function copyDirAndFile($src,$dst) &#123; // 原目录，复制到的目录 if(file_exists($src))&#123; $dir = opendir($src); @mkdir($dst); chmod($dst,0777); while(false !== ($file = readdir($dir))) &#123; if (( $file != &apos;.&apos; ) &amp;&amp; ( $file != &apos;..&apos; )) &#123; if (is_dir($src . &apos;/&apos; . $file)) &#123; $this-&gt;copyDirAndFile($src . &apos;/&apos; . $file,$dst . &apos;/&apos; . $file); chmod($dst . &apos;/&apos; . $file,0777); &#125; else &#123; copy($src . &apos;/&apos; . $file,$dst . &apos;/&apos; . $file); chmod($dst . &apos;/&apos; . $file,0777); &#125; &#125; &#125; closedir($dir); return true; &#125; else &#123; return false; &#125; &#125; // 删除文件夹及文件夹下文件 public function delDirAndFile($dirName)&#123; if(file_exists($dirName))&#123; if ($handle = opendir(&quot;$dirName&quot; )) &#123; while (false !== ($item=readdir($handle))) &#123; if ($item != &quot;.&quot; &amp;&amp; $item != &quot;..&quot;) &#123; if (is_dir( &quot;$dirName/$item&quot;)) &#123; $this-&gt;delDirAndFile( &quot;$dirName/$item&quot; ); &#125; else &#123; if(unlink( &quot;$dirName/$item&quot; ))&#123; // echo &quot;成功删除文件： $dirName/$item\\n&quot;; &#125; &#125; &#125; &#125; closedir( $handle ); if(rmdir( $dirName )) &#123; // echo &quot;成功删除目录： $dirName\\n&quot;; &#125; &#125; return true; &#125; else&#123; return false; &#125; &#125; // 剪切文件夹及文件夹下文件 public function cutDirAndFile($src,$dst) &#123; // 原目录，复制到的目录 if(file_exists($src))&#123; $dir = opendir($src); @mkdir($dst); chmod($dst,0777); while(false !== ($file = readdir($dir))) &#123; if (( $file != &apos;.&apos; ) &amp;&amp; ( $file != &apos;..&apos; )) &#123; if (is_dir($src . &apos;/&apos; . $file)) &#123; $this-&gt;copyDirAndFile($src . &apos;/&apos; . $file,$dst . &apos;/&apos; . $file); chmod($dst . &apos;/&apos; . $file,0777); &#125; else &#123; copy($src . &apos;/&apos; . $file,$dst . &apos;/&apos; . $file); chmod($dst . &apos;/&apos; . $file,0777); //unlink($src . &apos;/&apos; . $file); &#125; &#125; &#125; $file = new file(); $delete = $file-&gt;delDirAndFile($src); if(!$delete)&#123; return &apos;文件夹删除失败&apos;; &#125; $file = null; closedir($dir); return true; &#125; else &#123; return false; &#125; &#125; // 复制单个文件 public function fileCopy($source_name,$target_name) &#123; if(!file_exists($target_name)||file_exists($source_name))&#123; //return copy($source_name,$target_name)?true:false; $result = copy($source_name,$target_name); chmod($target_name,0777); return $result; if($result)&#123; return &apos;复制文件成功&apos;; &#125; else &#123; return &apos;复制文件失败&apos;; &#125; &#125; else &#123; return &apos;目标文件已经存在或者原始文件不存在&apos;; &#125; &#125; // 删除单个文件 public function fileDelete($del_name) &#123; if(file_exists($del_name))&#123; $result = unlink($del_name); if($result)&#123; return &apos;删除文件成功&apos;; &#125; else &#123; return &apos;删除文件失败&apos;; &#125; &#125; else &#123; return &apos;要删除的文件不存在&apos;; &#125; &#125; // 剪切单个文件 public function fileCut($source_name,$target_name) &#123; if(!file_exists($target_name)||file_exists($source_name))&#123; //return copy($source_name,$target_name)?true:false; $result = copy($source_name,$target_name); chmod($target_name,0777); unlink($source_name); if($result)&#123; return &apos;剪切文件成功&apos;; &#125; else &#123; return &apos;剪切文件失败&apos;; &#125; &#125; else &#123; return &apos;目标文件已经存在或者原始文件不存在&apos;; &#125; &#125;&#125;?&gt;","categories":[{"name":"后端","slug":"后端","permalink":"https://xiaojinwen.github.io/categories/后端/"}],"tags":[{"name":"后端","slug":"后端","permalink":"https://xiaojinwen.github.io/tags/后端/"}],"keywords":[{"name":"后端","slug":"后端","permalink":"https://xiaojinwen.github.io/categories/后端/"}]}]}