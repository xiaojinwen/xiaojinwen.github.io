{"meta":{"title":"个人博客-xiaojinwen","subtitle":"xiaojinwen","description":"个人日常","author":"xiaojinwen","url":"https://xiaojinwen.github.io"},"pages":[],"posts":[{"title":"自定义百度云分享密码","slug":"自定义百度云分享密码","date":"2018-08-30T03:39:24.000Z","updated":"2018-08-30T08:42:31.572Z","comments":true,"path":"2018/08/30/自定义百度云分享密码/","link":"","permalink":"https://xiaojinwen.github.io/2018/08/30/自定义百度云分享密码/","excerpt":"","text":"动态图片展示 1javascript:require([&quot;function-widget-1:share/util/service/createLinkShare.js&quot;]).prototype.makePrivatePassword=function()&#123;return prompt(&quot;请输入自定义的密码&quot;,&quot;1234&quot;)&#125; 使用方法：首先，选择要分享的文件，点击分享按钮。这时候，按F12打开控制台，切换至Console，输入代码按回车即可。 然后点击创建私密链接，会弹出输入框，输入密码即可！ 注意使用代码前要先点一下分享按钮，相关模块才会载入，这时候用代码才有效果。 转载自:流年似水博客转载自:西门吹雪","categories":[{"name":"其他","slug":"其他","permalink":"https://xiaojinwen.github.io/categories/其他/"}],"tags":[{"name":"其他","slug":"其他","permalink":"https://xiaojinwen.github.io/tags/其他/"}],"keywords":[{"name":"其他","slug":"其他","permalink":"https://xiaojinwen.github.io/categories/其他/"}]},{"title":"动态路由-路由访问权限","slug":"动态路由-路由访问权限","date":"2018-08-30T02:42:53.000Z","updated":"2018-08-30T07:55:03.388Z","comments":true,"path":"2018/08/30/动态路由-路由访问权限/","link":"","permalink":"https://xiaojinwen.github.io/2018/08/30/动态路由-路由访问权限/","excerpt":"","text":"动态路由控制权限 参考文章12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485login.vuelet dR = new Array();for (let i = 0; i &lt; dynamicRouter.length; i++) &#123; //第一层循环遍历动态路由表的每一个路由 let aside_list = this.aside_list for (let j = 0; j &lt; aside_list.length; j++) &#123; if (dynamicRouter[i].path === aside_list[j].path &amp;&amp; aside_list[j].isShow) &#123; // console.log(dynamicRouter[i]) dR.push(dynamicRouter[i]); // 符合条件的路由信息就放进数组里 if (!this.xjw) &#123; // this.firstShowPath = dynamicRouter[i] dR.push(dynamicRouter[2]); this.xjw = true &#125; &#125; else if (aside_list[j].path.indexOf('x') &amp;&amp; aside_list[j].isShow) &#123; if (!this.first) &#123; // 符合条件的路由的福袋必须访问的路由就放进数组里 dR.push(dynamicRouter[0]); dR.push(dynamicRouter[1]); this.first = true &#125; &#125; else if ( (aside_list[j].path.indexOf('xx') || aside_list[j].path.indexOf('xxx') || aside_list[j].path.indexOf('xxxx')) &amp;&amp; aside_list[j].isShow) &#123; if (!this.second) &#123; dR.push(dynamicRouter[1]); this.second = true &#125; &#125; &#125;&#125;this.xjw = nullthis.first = nullthis.second = null// console.log(dR)this.$router.addRoutes(dR.concat([&#123; //这里调用addRoutes方法，动态添加符合条件的路由 path: '*', redirect: '/404' //所有不匹配路径(*)都重定向到404，为什么写在这里而不放到静态路由表里可以查看“前端路上”的文章&#125;]));this.$router.push(this.firstShowPath); APP.vue// 获取登录状态if (!isLogin) &#123; return this.$router.push('/login');&#125; else &#123; let dR = new Array(); for (let i = 0; i &lt; dynamicRouter.length; i++) &#123; let aside_list = this.get_aside_list.aside_list // console.log(dynamicRouter[i]) for (let j = 0; j &lt; aside_list.length; j++) &#123; if (dynamicRouter[i].path === aside_list[j].path &amp;&amp; aside_list[j].isShow) &#123; // console.log(dynamicRouter[i]) dR.push(dynamicRouter[i]); //符合条件的路由信息就放进数组里 if (!this.xjw) &#123; dR.push(dynamicRouter[2]); this.xjw = true &#125; &#125; else if (aside_list[j].path.indexOf('x') &amp;&amp; aside_list[j].isShow) &#123; if (!this.first) &#123; dR.push(dynamicRouter[0]); dR.push(dynamicRouter[1]); this.first = true &#125; &#125; else if ( (aside_list[j].path.indexOf('xx') || aside_list[j].path.indexOf('xxx') || aside_list[j].path.indexOf('xxxx')) &amp;&amp; aside_list[j].isShow) &#123; if (!this.second) &#123; dR.push(dynamicRouter[1]); this.second = true &#125; &#125; &#125; &#125; this.xjw = null this.first = null this.second = null // console.log(dR) this.$router.addRoutes(dR);","categories":[{"name":"前端","slug":"前端","permalink":"https://xiaojinwen.github.io/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://xiaojinwen.github.io/tags/前端/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"https://xiaojinwen.github.io/categories/前端/"}]},{"title":"删除服务器乱码文件/目录","slug":"删除服务器乱码文件","date":"2018-08-30T02:20:58.000Z","updated":"2018-08-30T07:54:43.765Z","comments":true,"path":"2018/08/30/删除服务器乱码文件/","link":"","permalink":"https://xiaojinwen.github.io/2018/08/30/删除服务器乱码文件/","excerpt":"","text":"方法一1.使用 ls -li 命令得到乱码文件的 inode 值1$ ls -li 2.使用 find . -inum 24609 -exec rm {} -rf \\; 命令删除乱码文件.其中24609替换为乱码文件的inode值. 注意空格 中英文符号\\;等1$ find . -inum 24609 -exec rm &#123;&#125; -rf \\; 方法二1.使用rm -rf 删除上一级目录，当然前提是需要备份你需要备份的数据.123456789101112131415一种思路：1. 比如/home下文件夹内含有乱码的文件2. mkdir tmp3. 将所有的文件首先移动到 mv * tmp/4.到tmp下 把所有有正常的显示字符的文件移动出来cd tmp ;mv [a-zA-Z0-9]* ..5.现在可以 rm -rf tmp 了","categories":[{"name":"服务器","slug":"服务器","permalink":"https://xiaojinwen.github.io/categories/服务器/"}],"tags":[{"name":"服务器","slug":"服务器","permalink":"https://xiaojinwen.github.io/tags/服务器/"}],"keywords":[{"name":"服务器","slug":"服务器","permalink":"https://xiaojinwen.github.io/categories/服务器/"}]},{"title":"文件管理php","slug":"文件管理php","date":"2018-08-30T01:27:59.000Z","updated":"2018-08-30T07:54:02.447Z","comments":true,"path":"2018/08/30/文件管理php/","link":"","permalink":"https://xiaojinwen.github.io/2018/08/30/文件管理php/","excerpt":"","text":"有些代码不是自己写的 所以格式不太同lt;?phpfunction fileAdir($dir) &#123; if (!is_dir($dir))&#123; mkdir($dir); chmod($dir,0777); $data = scandir(&quot;$dir&quot;); $allFile = array(); foreach ($data as $file) &#123; if($file != &apos;.&apos; &amp;&amp; $file != &apos;..&apos;) &#123; //判断是否是文件夹内的文件夹 $a = array( &apos;file&apos;=&gt;$file, &apos;isDir&apos;=&gt;is_dir($dir. &apos;/&apos; .$file), &apos;name&apos;=&gt;$dir . &apos;/&apos; .$file ); array_push($allFile, $a); &#125; &#125; return $allFile; &#125; else&#123; $data = scandir(&quot;$dir&quot;); $allFile = array(); foreach ($data as $file) &#123; if($file != &apos;.&apos; &amp;&amp; $file != &apos;..&apos;) &#123; //判断是否是文件夹内的文件夹 $a = array( &apos;file&apos;=&gt;$file, &apos;isDir&apos;=&gt;is_dir($dir. &apos;/&apos; .$file), &apos;name&apos;=&gt;$dir . &apos;/&apos; .$file ); array_push($allFile, $a); &#125; &#125; return $allFile; &#125;&#125;/** 读取文件类 **/class file &#123; public $file; public $filename; //文件名字 public $filetype; //文件类型 public $filesize; //文件大小 public $fileopen; //打开文件 public $fileread; //读取文件 //写入变量 public $filepath; public $filecontent; //保存文件用到的文件内容 public $fileput; //文件写入 public function edits($files)&#123; $this-&gt;file = $files; if(!file_exists($this-&gt;file))&#123; die(&quot;文件不存在！&quot;); &#125; $this-&gt;fileopen = fopen($this-&gt;file, &apos;r&apos;); if(!$this-&gt;fileopen)&#123; die(&quot;文件读取失败&quot;); &#125; //$this-&gt;fileread = htmlspecialchars($this-&gt;fileread); //开始获取文件的后缀名 $filestr = strlen($this-&gt;file); $filepoint = strrpos($this-&gt;file, &apos;.&apos;); $filesub = substr($this-&gt;file, $filepoint+1); $this-&gt;filetype = $filesub; $this-&gt;filename = basename($this-&gt;file); $this-&gt;filesize = filesize($this-&gt;file); if($this-&gt;filesize===0)&#123; return array( &apos;filetype&apos;=&gt;$this-&gt;filetype, &apos;filename&apos;=&gt;$this-&gt;filename, &apos;filecontent&apos;=&gt;&apos;&apos;, &apos;filepath&apos;=&gt;$this-&gt;file ); exit; &#125; $this-&gt;fileread = fread($this-&gt;fileopen,$this-&gt;filesize); // 读取中文 //$this-&gt;fileread =iconv(&apos;gb2312&apos;, &apos;utf-8&apos;, $this-&gt;fileread); //以数组形式返回：文件类型 文件名称 文件内容 文件路径 return array( &apos;filetype&apos;=&gt;$this-&gt;filetype, &apos;filename&apos;=&gt;$this-&gt;filename, &apos;filecontent&apos;=&gt;$this-&gt;fileread, &apos;filepath&apos;=&gt;$this-&gt;file ); //关闭文件 fclose($this-&gt;file); &#125; /* 修改文件函数 */ public function bc($filepath,$filecontent)&#123; $this-&gt;filepath = $filepath; //访问文件 $this-&gt;fileopen = file_get_contents($this-&gt;filepath); if(!$this-&gt;fileopen)&#123; //die(&apos;文件打开失败&apos;); &#125; //获取传进来的文件内容 $this-&gt;filecontent = $filecontent; //反转义html //$this-&gt;filecontent = htmlspecialchars_decode($this-&gt;filecontent); //写入文件 $this-&gt;fileput = file_put_contents($this-&gt;filepath, $this-&gt;filecontent); if($this-&gt;fileput)&#123; return &apos;修改文件成功&apos;; &#125;else &#123; return &apos;修改文件失败&apos;; &#125; &#125; // 创建文件夹 public function create_folder($dir) &#123; if (!file_exists($dir))&#123; //mkdir($dir,0777,true); mkdir($dir); chmod($dir,0777); return &apos;创建文件夹成功&apos;; &#125; else &#123; return &apos;创建文件夹已存在&apos;; &#125; &#125; // 创建文件 public function create_file($dir) &#123; if (!file_exists($dir))&#123; $handle = fopen($dir, &apos;w&apos;); chmod($dir,0777); if($handle)&#123; return &apos;创建文件成功&apos;; &#125; else&#123; return &apos;创建文件失败&apos;; &#125; &#125; else &#123; return &apos;需创建的文件已经存在&apos;; &#125; &#125; // 重命名文件/文件夹 public function fileRename($old_name,$new_name) &#123; if(!file_exists($new_name)||file_exists($old_name))&#123; $result = rename($old_name,$new_name); if($result)&#123; return &apos;重命名成功&apos;; &#125; else&#123; return &apos;重命名失败&apos;; &#125; &#125; else &#123; return &apos;目标文件已存在或原文件不存在&apos;; &#125; &#125; // 复制文件夹及文件夹下文件 public function copyDirAndFile($src,$dst) &#123; // 原目录，复制到的目录 if(file_exists($src))&#123; $dir = opendir($src); @mkdir($dst); chmod($dst,0777); while(false !== ($file = readdir($dir))) &#123; if (( $file != &apos;.&apos; ) &amp;&amp; ( $file != &apos;..&apos; )) &#123; if (is_dir($src . &apos;/&apos; . $file)) &#123; $this-&gt;copyDirAndFile($src . &apos;/&apos; . $file,$dst . &apos;/&apos; . $file); chmod($dst . &apos;/&apos; . $file,0777); &#125; else &#123; copy($src . &apos;/&apos; . $file,$dst . &apos;/&apos; . $file); chmod($dst . &apos;/&apos; . $file,0777); &#125; &#125; &#125; closedir($dir); return true; &#125; else &#123; return false; &#125; &#125; // 删除文件夹及文件夹下文件 public function delDirAndFile($dirName)&#123; if(file_exists($dirName))&#123; if ($handle = opendir(&quot;$dirName&quot; )) &#123; while (false !== ($item=readdir($handle))) &#123; if ($item != &quot;.&quot; &amp;&amp; $item != &quot;..&quot;) &#123; if (is_dir( &quot;$dirName/$item&quot;)) &#123; $this-&gt;delDirAndFile( &quot;$dirName/$item&quot; ); &#125; else &#123; if(unlink( &quot;$dirName/$item&quot; ))&#123; // echo &quot;成功删除文件： $dirName/$item\\n&quot;; &#125; &#125; &#125; &#125; closedir( $handle ); if(rmdir( $dirName )) &#123; // echo &quot;成功删除目录： $dirName\\n&quot;; &#125; &#125; return true; &#125; else&#123; return false; &#125; &#125; // 剪切文件夹及文件夹下文件 public function cutDirAndFile($src,$dst) &#123; // 原目录，复制到的目录 if(file_exists($src))&#123; $dir = opendir($src); @mkdir($dst); chmod($dst,0777); while(false !== ($file = readdir($dir))) &#123; if (( $file != &apos;.&apos; ) &amp;&amp; ( $file != &apos;..&apos; )) &#123; if (is_dir($src . &apos;/&apos; . $file)) &#123; $this-&gt;copyDirAndFile($src . &apos;/&apos; . $file,$dst . &apos;/&apos; . $file); chmod($dst . &apos;/&apos; . $file,0777); &#125; else &#123; copy($src . &apos;/&apos; . $file,$dst . &apos;/&apos; . $file); chmod($dst . &apos;/&apos; . $file,0777); //unlink($src . &apos;/&apos; . $file); &#125; &#125; &#125; $file = new file(); $delete = $file-&gt;delDirAndFile($src); if(!$delete)&#123; return &apos;文件夹删除失败&apos;; &#125; $file = null; closedir($dir); return true; &#125; else &#123; return false; &#125; &#125; // 复制单个文件 public function fileCopy($source_name,$target_name) &#123; if(!file_exists($target_name)||file_exists($source_name))&#123; //return copy($source_name,$target_name)?true:false; $result = copy($source_name,$target_name); chmod($target_name,0777); return $result; if($result)&#123; return &apos;复制文件成功&apos;; &#125; else &#123; return &apos;复制文件失败&apos;; &#125; &#125; else &#123; return &apos;目标文件已经存在或者原始文件不存在&apos;; &#125; &#125; // 删除单个文件 public function fileDelete($del_name) &#123; if(file_exists($del_name))&#123; $result = unlink($del_name); if($result)&#123; return &apos;删除文件成功&apos;; &#125; else &#123; return &apos;删除文件失败&apos;; &#125; &#125; else &#123; return &apos;要删除的文件不存在&apos;; &#125; &#125; // 剪切单个文件 public function fileCut($source_name,$target_name) &#123; if(!file_exists($target_name)||file_exists($source_name))&#123; //return copy($source_name,$target_name)?true:false; $result = copy($source_name,$target_name); chmod($target_name,0777); unlink($source_name); if($result)&#123; return &apos;剪切文件成功&apos;; &#125; else &#123; return &apos;剪切文件失败&apos;; &#125; &#125; else &#123; return &apos;目标文件已经存在或者原始文件不存在&apos;; &#125; &#125;&#125;?&gt;","categories":[{"name":"后端","slug":"后端","permalink":"https://xiaojinwen.github.io/categories/后端/"}],"tags":[{"name":"后端","slug":"后端","permalink":"https://xiaojinwen.github.io/tags/后端/"}],"keywords":[{"name":"后端","slug":"后端","permalink":"https://xiaojinwen.github.io/categories/后端/"}]},{"title":"hexo 常用命令","slug":"hexo 常用命令","date":"2018-08-29T11:40:00.046Z","updated":"2018-08-30T02:19:01.218Z","comments":true,"path":"2018/08/29/hexo 常用命令/","link":"","permalink":"https://xiaojinwen.github.io/2018/08/29/hexo 常用命令/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment 列出已安装依赖(局部/全局)12$ npm ls --depth 0 $ npm ls --depth 0 -g","categories":[],"tags":[],"keywords":[]}]}